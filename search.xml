<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[读书笔记(05) - 事件 - JavaScript高级程序设计]]></title>
      <url>/2018/12/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-05-%E4%BA%8B%E4%BB%B6-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-f4f4615c26bb5bf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="coding"></p>
<p>HTML依托于JavaScript来实现用户与WEB网页之间的动态交互，接收用户操作并做出相应的反馈，而事件在此间则充当桥梁的重要角色。</p>
<p>日常开发中，经常会为某个元素绑定一个事件，编写相应的业务逻辑，在元素被点击时执行，并反馈到用户操作界面。</p>
<p>这个过程中，事件就像一个侦听器，当点击动作发生时，才会执行对应的程序。这种模式可称之为观察员模式。</p>
<p>接下来就讲讲DOM事件相关知识。</p>
<h3 id="何为事件"><a href="#何为事件" class="headerlink" title="何为事件"></a>何为事件</h3><blockquote>
<p>事件就是用户或浏览器自身执行的某种动作</p>
</blockquote>
<p>常用的DOM事件有<code>click/mouseover/mouseout/keyup/keydown</code>等。</p>
<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><blockquote>
<p>事件流描述的是从页面中接收事件的顺序</p>
</blockquote>
<p>HTML描述的是一个DOM文档结构，而事件流所描述的是DOM文档节点接收事件顺序。</p>
<p>而事件流有两种事件模式，<strong>捕获/冒泡</strong>，两者所描述的事件传递顺序对立相反。</p>
<h4 id="事件模式：捕获与冒泡"><a href="#事件模式：捕获与冒泡" class="headerlink" title="事件模式：捕获与冒泡"></a>事件模式：捕获与冒泡</h4><h5 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h5><blockquote>
<p>事件冒泡：事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）</p>
</blockquote>
<p>规范要求事件冒泡到<code>document</code>对象，而浏览器则会将事件一直冒泡到<code>window</code>对象。</p>
<p>所有浏览器都支持事件冒泡（包括IE9以下）。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-da0f01864160c603.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件冒泡"></p>
<h5 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h5><blockquote>
<p>事件捕获：（与事件冒泡相反）事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件</p>
</blockquote>
<p>与冒泡一样，虽然规定事件应该从<code>document</code>对象开始传播，但浏览器普遍都是从<code>window</code>对象开始捕获。</p>
<p><strong>IE9以下不支持事件捕获</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-71e2c4c5b58235c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件捕获"></p>
<h4 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h4><blockquote>
<p>“DOM2级事件”规定事件流包括三个阶段，顺序进行</p>
<ol>
<li>事件捕获阶段</li>
</ol>
<ol>
<li>处于目标阶段</li>
</ol>
<ol>
<li>事件冒泡阶段</li>
</ol>
</blockquote>
<p>TIPS: 实际的目标元素在捕获阶段不会接收到事件，在处于目标阶段时接收事件发生处理，并被看成是冒泡阶段的一部分。</p>
<p>尽管”DOM2级事件”规范明确要求捕获阶段不会涉及事件目标，但浏览器会在捕获阶段触发事件对象上的事件。</p>
<h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><blockquote>
<p>响应某个事件的函数方法，我们称之为事件处理程序（或事件侦听器）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">window.onclick = function() &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">// 这里的function()&#123;&#125;就是事件处理程序</div></pre></td></tr></table></figure>
<h4 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h4><p>HTML中元素支持的事件，可以使用一个同名的HTML特性来指定，而这个特性的值就是js能执行的代码或表达式。写法上可以看出类似HTML中<code>id/type/class</code>等属性的写法，都是<code>on+&#39;...&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>缺点：HTML是结构层（显示层），而JavaScript是行为层（业务层）。在显示层上去编写业务逻辑代码处理，会使得HTML与JavaScript代码耦合过于紧密，不好维护。</p>
<p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。</p>
<p>而<strong>DOM事件分为3个级别：DOM 0级事件处理程序，DOM 2级事件处理程序和DOM 3级事件处理程序</strong>。DOM 1级中没有规范事件的相关内容，所以没有DOM 1级事件处理。</p>
<h4 id="DOM0-级事件处理程序"><a href="#DOM0-级事件处理程序" class="headerlink" title="DOM0 级事件处理程序"></a>DOM0 级事件处理程序</h4><p>每个元素(HTML元素)都有自己的事件处理程序属性，属性名通常以on开头，例如<code>onclick/onmouseover</code>。为这个属性的值设置一个函数，就可以指定事件处理程序。而将其属性值赋值为null，则完成解绑。(<strong>同个元素无法绑定多个同名事件</strong>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var myBtn = document.getElementById(&apos;myBtn&apos;);</div><div class="line"></div><div class="line">// 为myBtn绑定事件处理程序, 只能绑定一个</div><div class="line">myBtn.onclick = function() &#123;</div><div class="line">    alert(&apos;Hello world!&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.onclick = null;</div></pre></td></tr></table></figure>
<h4 id="DOM2-级事件处理程序"><a href="#DOM2-级事件处理程序" class="headerlink" title="DOM2 级事件处理程序"></a>DOM2 级事件处理程序</h4><p>“DOM2级事件”定义了两个方法，<code>addEventListener()/removeEventListener()</code>，用于为元素绑定和解绑事件。</p>
<p>（<strong>可绑定多个事件，区别于DOM0级/HTML仅能绑定一个</strong>）。</p>
<p><strong>el.addEventListener(eventName, callBack, useCapture)</strong></p>
<ul>
<li><p>eventName: 事件名称</p>
</li>
<li><p>callBack: 回调函数，当事件触发时，函数会传入一个参数event，为当前的事件对象</p>
</li>
<li><p><strong>useCapture: 默认是false，代表事件句柄在冒泡阶段执行， true则代表在捕获阶段执行</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var myBtn = document.getElementById(&apos;myBtn&apos;);</div><div class="line"></div><div class="line">var handleClick = function() &#123;</div><div class="line">    alert(&apos;Hello world!&apos;);</div><div class="line">&#125;</div><div class="line">// 绑定事件处理程序</div><div class="line">myBtn.addEventListener(&apos;click&apos;, handleClick, false);</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.removeEventListener(&apos;click&apos;, handleClick);</div></pre></td></tr></table></figure>
<p><strong>TIPS：DOM2级事件处理程序，解绑时<code>function</code>必须与传入<code>addEventListener</code>相同</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 绑定</div><div class="line">myBtn.addEventListener(&apos;click&apos;, function() &#123;</div><div class="line">    // 匿名函数</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.removeEventListener(&apos;click&apos;,function() &#123;</div><div class="line">    // 匿名函数</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// add/remove 分别绑定了两个匿名函数（函数为引用类型），所以两个函数并不相同，所以无法成功解绑</div></pre></td></tr></table></figure>
<p><strong>TIPS：绑定多个事件处理程序时，执行顺序按绑定顺序执行</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">myBtn.addEventListener(&apos;click&apos;, function() &#123;</div><div class="line">    // step1...</div><div class="line">&#125;)</div><div class="line">myBtn.addEventListener(&apos;click&apos;, function() &#123;</div><div class="line">    // step2...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 执行顺序：step1 -&gt; step2</div></pre></td></tr></table></figure>
<p><strong>浏览器支持情况：IE9以下不支持DOM2级事件处理程序</strong></p>
<h4 id="IE-事件处理程序"><a href="#IE-事件处理程序" class="headerlink" title="IE 事件处理程序"></a>IE 事件处理程序</h4><p>IE9以下不支持DOM2级事件，但IE提供了与DOM2级事件类似的两个方法，<code>attachEvent()/detachEvent</code>，IE9以下不支持事件捕获，所以<code>attachEvent</code>仅支持冒泡阶段触发，只接收两个参数（eventName, function)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 绑定</div><div class="line">myBtn.attachEvent(&apos;onclick&apos;, handleClick);</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.detachEvent(&apos;onclick&apos;, handleClick);</div></pre></td></tr></table></figure>
<p><strong>TIPS：</strong></p>
<ol>
<li><p>解绑时<code>function</code>必须与传入<code>attachEvent</code>相同，这点与DOM2级事件相同</p>
</li>
<li><p>与DOM0级的区别，DOM0级事件处理在元素的作用域运行，而<code>attachEvent</code>事件处理在全局，<code>this</code>指向<code>window</code></p>
</li>
<li><p><strong>绑定多个事件处理程序时，执行顺序按绑定顺序逆反执行（与DOM2级相反）</strong></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">myBtn.attachEvent(&apos;click&apos;, function() &#123;</div><div class="line"> // step1...</div><div class="line">&#125;)</div><div class="line">myBtn.attachEvent(&apos;click&apos;, function() &#123;</div><div class="line"> // step2...</div><div class="line">&#125;)</div><div class="line">// 执行顺序：step2 -&gt; step1</div></pre></td></tr></table></figure>
<h3 id="Event-事件对象"><a href="#Event-事件对象" class="headerlink" title="Event 事件对象"></a>Event 事件对象</h3><h4 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h4><h5 id="event-preventDefault"><a href="#event-preventDefault" class="headerlink" title="event.preventDefault()"></a><code>event.preventDefault()</code></h5><p>阻止默认事件</p>
<h5 id="event-stopPropagation"><a href="#event-stopPropagation" class="headerlink" title="event.stopPropagation()"></a><code>event.stopPropagation()</code></h5><p>阻止事件流发生传递（冒泡/捕获）</p>
<h5 id="event-stopImmediatePropagation"><a href="#event-stopImmediatePropagation" class="headerlink" title="event.stopImmediatePropagation()"></a><code>event.stopImmediatePropagation()</code></h5><p>阻止剩余事件处理函数的执行，并阻止当前事件在事件流上传递</p>
<h5 id="event-currentTarget"><a href="#event-currentTarget" class="headerlink" title="event.currentTarget"></a><code>event.currentTarget</code></h5><p>当前绑定事件的元素</p>
<h5 id="event-target"><a href="#event-target" class="headerlink" title="event.target"></a><code>event.target</code></h5><p>当前触发事件的元素</p>
<h5 id="event-stopPropagation-与-stopImmediatePropagation-的区别"><a href="#event-stopPropagation-与-stopImmediatePropagation-的区别" class="headerlink" title="event.stopPropagation()与.stopImmediatePropagation()的区别"></a>event.stopPropagation()与.stopImmediatePropagation()的区别</h5><p>同个元素绑定多个同名事件时，<code>stopImmediatePropagation</code>不仅阻止了冒泡，而且会阻止后续事件的执行，可以理解为加强版的<code>stopPropagation</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">myBtn.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    // step1;</div><div class="line">    event.stopImmediatePropagation();</div><div class="line">&#125;)</div><div class="line"></div><div class="line">myBtn.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    // step2;</div><div class="line">    // 我被stopImmediatePropagation阻止掉了！！！</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="currantTarget与target的区别"><a href="#currantTarget与target的区别" class="headerlink" title="currantTarget与target的区别"></a>currantTarget与target的区别</h5><p>事件处理程序内部，this等于currentTarget（当前绑定事件的元素），而target（当前触发事件的元素）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// currentTarget == target</div><div class="line">myBtn.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    event.target == event.currentTarget; // true -&gt; myBtn</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// currentTarget != target 捕获/冒泡</div><div class="line">document.body.addEventListener(&apos;click&apos;, function(event)&#123;</div><div class="line">    event.target == event.currentTarget; // false</div><div class="line">    // event.target -&gt; myBtn</div><div class="line">    // event.currentTarget -&gt; body</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="内存与性能"><a href="#内存与性能" class="headerlink" title="内存与性能"></a>内存与性能</h3><p>WEB网页是运行在浏览器客户端的，而计算机分配给浏览器的内存及CPU占用是有限制的。虽说浏览器引擎不断地发展优化，但是内存占用多了， 性能不免会损耗。</p>
<h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>为元素指定事件绑定程序，事实上是赋值了一个函数方法，而函数在javaScript中是一种引用类型的数据格式，既然是数据那就需要用到内存储存。函数创建多了，消耗掉内存。</p>
<h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><p>为元素指定事件绑定程序，首先需要对DOM进行查询，找出要绑定事件的元素。而这也会造成DOM元素的访问次数增加。DOM的操作一直是网页性能的一个优化点。</p>
<p>了解完事件绑定带来内存跟性能的原理，我们来看一个例子，例如我们有一个<code>ul&gt;li</code>的列表，要监听每一个<code>li</code>的点击事件，并触发事件处理程序。</p>
<p>单独绑定的话，10个<code>li</code>就要对DOM元素查询10次，创建的匿名函数就有10个（当然可以共同创建同个函数引用），如果还有20个，30个，100个，那么这种为每个<code>li</code>元素单独绑定事件的方法，绝对不是最优解。</p>
<p>这就引出下面的优化方案：<strong>“事件委托”</strong>。</p>
<h4 id="事件委托（事件代理）"><a href="#事件委托（事件代理）" class="headerlink" title="事件委托（事件代理）"></a>事件委托（事件代理）</h4><p>对”事件处理程序绑定过多”的问题，最好的解决方案就是<strong>“事件委托”</strong>。它的原理是利用了事件流的<strong>“冒泡”</strong>机制，事件目标元素会把事件向上层传递，直到<code>document</code>（浏览器会传到<code>window</code>)，所以父级节点是可以接收子节点的事件传递。</p>
<p>以刚刚<code>ul&gt;li</code>的例子，<code>li</code>有很多个， 但它们有一个共同的父节点<code>ul</code>。<code>li</code>的点击事件会冒泡到<code>ul</code>，因此我们可以在<code>ul</code>上绑定一个事件处理程序，处理所有<code>li</code>的点击事件，然后通过<code>event.target</code>可以确定触发事件的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var ulParent = document.getElementById(&apos;parent&apos;);</div><div class="line">ulParent.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    var taget = event.target; </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过<strong>“事件委托”</strong>减少了DOM元素的查询，以及多个函数的内存占用，而且还有一个好处，当我们的<code>li</code>是动态的，增加和移除时，都无需再做绑定和解绑事件操作，因为它都会冒泡到父级节点。</p>
<h4 id="移除多余的事件绑定"><a href="#移除多余的事件绑定" class="headerlink" title="移除多余的事件绑定"></a>移除多余的事件绑定</h4><p>文档中移除了绑定了事件的DOM元素，如<code>innerHTML/removeChild()/replaceChild()</code>等可以对DOM进行替换，而移除的DOM元素原先所绑定的事件处理程序，并不能有效被浏览器垃圾回收，所以占用一直存在。</p>
<p>所以建议在移除某个DOM元素时，如果其绑定了事件处理程序，需手动解除绑定，释放内存。</p>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>除了为元素绑定支持的事件以外，我们还可以通过<code>Event/CustomEvent</code>来创建开发者自定义事件。</p>
<p>两者不同的是<code>CustomEvent</code>可传递一个<code>Object</code>对象来传输数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// Event</div><div class="line">var eve = new Event(&apos;custome&apos;);</div><div class="line"></div><div class="line">// CustomeEvent 可传参数</div><div class="line">var eve = new CustomeEvent(&apos;custome&apos;, &#123;</div><div class="line">    detail: &#123;</div><div class="line">        name: &apos;KenTsang&apos;,</div><div class="line">        age: 28</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 为DOM元素添加事件监听</div><div class="line">ele.addEventListener(&apos;custome&apos;, function(event) &#123;</div><div class="line">    console.log(event.detail);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 触发ele绑定的自定义事件</div><div class="line">ele.dispatch(eve);</div></pre></td></tr></table></figure>
<hr>
<p>事件这块还剩下一部分知识点，后续文章会再就模拟事件这块知识点进行拆分详解。</p>
<p>天冷了，更文不易，望大家多多点赞。</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(04) - 错误监控 - JavaScript高级程序设计]]></title>
      <url>/2018/12/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-04-%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-f8f97ce928eeb707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="coding"></p>
<h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><ol>
<li><p>即时运行错误 (代码错误)</p>
</li>
<li><p>资源加载错误</p>
</li>
</ol>
<h4 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h4><h5 id="1-类型转换错误"><a href="#1-类型转换错误" class="headerlink" title="1. 类型转换错误"></a>1. 类型转换错误</h5><p>建议使用全等<code>===</code>操作符</p>
<h5 id="2-数据类型错误"><a href="#2-数据类型错误" class="headerlink" title="2.数据类型错误"></a>2.数据类型错误</h5><p>建议加强类型判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 数组倒序</div><div class="line">function reverseSort(value) &#123;</div><div class="line">    if (value instanceof Array) &#123; </div><div class="line">        // 使用instanceof验证数据类型 </div><div class="line">        // (基础类型用typeof, 引用类型用instanceof)</div><div class="line">        value.sort();</div><div class="line">        value.revere()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-通信错误"><a href="#3-通信错误" class="headerlink" title="3. 通信错误"></a>3. 通信错误</h5><p>url参数编码错误造成，建议使用<code>encodeURIComponent()</code>对url参数数据进行编码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 错误的url参数</div><div class="line">// http://www.xxx.com/?redir=http://www.xxx.com?a=b&amp;c=d</div><div class="line"></div><div class="line">// 针对redir后面的参数字符串进行编码</div><div class="line"></div><div class="line">// 封装一个处理方法（摘自书中代码）</div><div class="line">function addQueryStringArg(url, name, value) &#123;</div><div class="line">    if (url.indexOf(&apos;?&apos;) &lt; 0) &#123;</div><div class="line">        url += &apos;?&apos;;        </div><div class="line">    &#125; else &#123;</div><div class="line">        url += &apos;&amp;&apos;;</div><div class="line">    &#125;</div><div class="line">    url += encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(value);</div><div class="line">    return url;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="错误的捕获方式"><a href="#错误的捕获方式" class="headerlink" title="错误的捕获方式"></a>错误的捕获方式</h4><h5 id="针对即时运行错误"><a href="#针对即时运行错误" class="headerlink" title="针对即时运行错误"></a>针对即时运行错误</h5><ol>
<li><p><code>try-catch</code>（代码可疑区域可增加<code>try-catch</code>）</p>
</li>
<li><p><code>window.onerror</code> (全局监控js错误异常)</p>
</li>
</ol>
<h5 id="1-try-catch"><a href="#1-try-catch" class="headerlink" title="1. try-catch"></a>1. <code>try-catch</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    // 可能会导致错误的代码</div><div class="line">&#125; catch (error) &#123;</div><div class="line">    // 错误发生时处理</div><div class="line">    console.log(error.message);</div><div class="line">&#125; finally &#123;</div><div class="line">    // 一定会执行(无论是否发生错误)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>TIPS: 使用了<code>finally</code>，<code>try</code>跟<code>catch</code>的<code>return</code>语句都会被忽略</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function testFinally() &#123;</div><div class="line">    try &#123;</div><div class="line">        return 2;</div><div class="line">    &#125; catch (error) &#123;</div><div class="line">        return 1;</div><div class="line">    &#125; finally &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// testFinally 最终返回 0</div></pre></td></tr></table></figure>
<p><strong>TIPS: <code>try-catch</code>只能捕获同步运行的代码错误，无法检测语法和异步错误</strong></p>
<p>（语法可借助ESlint工具在开发阶段提示解决）</p>
<h5 id="2-window-onerror"><a href="#2-window-onerror" class="headerlink" title="2. window.onerror"></a>2. <code>window.onerror</code></h5><p>遵循DOM0级事件，<code>window.onerror</code>事件处理程序不会创建<code>event</code>对象，但可以接收三个参数<code>message</code>(错误信息), <code>url</code>(错误文件url), <code>line</code>(行号)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">window.onerror = function(message, url, line)&#123;</div><div class="line">    console.log(message, ulr, line);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在事件处理程序中返回false，可以阻止浏览器报告错误的默认行为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">window.onerror = function(message, url, line) &#123;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="针对资源加载错误"><a href="#针对资源加载错误" class="headerlink" title="针对资源加载错误"></a>针对资源加载错误</h5><ol>
<li><p><code>object.onerror</code></p>
</li>
<li><p><code>performance.getEntries()</code></p>
</li>
<li><p><code>Error</code>事件捕获 （全局监控静态资源异常）</p>
</li>
</ol>
<h5 id="1-object-onerror"><a href="#1-object-onerror" class="headerlink" title="1. object.onerror"></a>1. <code>object.onerror</code></h5><p>如script，image等标签src引用，会返回一个<code>event</code>对象</p>
<p><strong>TIPS: <code>object.onerror</code>不会冒泡到<code>window</code>对象，所以window.onerror无法监控资源加载错误</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var img = new Image();</div><div class="line">img.src = &apos;http://xxx.com/xxx.jpg&apos;;</div><div class="line">img.onerror = function(event) &#123;</div><div class="line">    console.log(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-1144b99ced9ba124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="object.onerror"></p>
<h5 id="2-window-performance-getEntires"><a href="#2-window-performance-getEntires" class="headerlink" title="2. window.performance.getEntires()"></a>2. <code>window.performance.getEntires()</code></h5><p>适用高版本浏览器，返回已成功加载的资源列表，然后自行做比对差集运算，核实哪些文件没有加载成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var result = [];</div><div class="line">window.performance.getEntries().forEach(function (perf) &#123;</div><div class="line">    result.push(&#123;</div><div class="line">        &apos;url&apos;: perf.name,</div><div class="line">        &apos;entryType&apos;: perf.entryType,</div><div class="line">        &apos;type&apos;: perf.initiatorType,</div><div class="line">        &apos;duration(ms)&apos;: perf.duration</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">console.log(result);</div></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-d494ca159f7da111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="window.performance.getEntires"></p>
<h5 id="3-Error事件捕获"><a href="#3-Error事件捕获" class="headerlink" title="3. Error事件捕获"></a>3. Error事件捕获</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">window.addEventListener(&apos;error&apos;, function(error)&#123;</div><div class="line">    //...（全局监控静态资源异常）</div><div class="line">    console.log(error);</div><div class="line">&#125;, true);  // 默认false为冒泡阶段触发，true为捕获阶段触发</div></pre></td></tr></table></figure>
<h4 id="跨域的js错误捕获"><a href="#跨域的js错误捕获" class="headerlink" title="跨域的js错误捕获"></a>跨域的js错误捕获</h4><p>一般涉及跨域的js运行错误时会抛出错误提示<code>script error</code>，但没有具体信息（如出错文件，行列号提示等）, 可利用资源共享策略来捕获跨域js错误</p>
<ol>
<li><p>客户端：在script标签增加crossorigin属性（客户端）</p>
</li>
<li><p>服务端：js资源响应头<code>Access-Control-Allow-Origin: *</code></p>
</li>
</ol>
<h4 id="错误上报"><a href="#错误上报" class="headerlink" title="错误上报"></a>错误上报</h4><ol>
<li><p>Ajax请求 (会有跨域问题)</p>
</li>
<li><p>动态创建Image标签 (兼容完美，代码简洁，需要注意浏览器url长度限制)</p>
</li>
</ol>
<h5 id="Image标签"><a href="#Image标签" class="headerlink" title="Image标签"></a>Image标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(new Image()).src= &apos;http://xxx.com/error?code=1002&apos;</div></pre></td></tr></table></figure>
<h5 id="上报频率"><a href="#上报频率" class="headerlink" title="上报频率"></a>上报频率</h5><p>错误信息频繁发送上报请求，会对后端服务器造成压力。<br>项目中我们可通过设置采集率，或对规定时间内数据汇总再上报，减少请求数量，从而缓解服务端压力。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 借鉴别人的一个例子</div><div class="line">Reporter.send=function(data) &#123;</div><div class="line">    // 只采集30%</div><div class="line">    if（Math.random() &lt; 0.3) &#123;</div><div class="line">        send(data); // 上报错误</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考文档</p>
<ul>
<li><p><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></p>
</li>
<li><p><a href="http://jartto.wang/2018/11/20/js-exception-handling/" target="_blank" rel="external">《如何优雅处理前端异常》</a></p>
</li>
</ul>
<blockquote>
<p>作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(03) - 性能 - JavaScript高级程序设计]]></title>
      <url>/2018/12/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-03-%E6%80%A7%E8%83%BD-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-cd88edf91da4bdee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="coding"></p>
<h3 id="作用域链查找"><a href="#作用域链查找" class="headerlink" title="作用域链查找"></a>作用域链查找</h3><p>作用域链的查找是逐层向上查找。查找的层次越多，速度越慢。随着硬件性能的提升和浏览器引擎的优化，这个慢我们基本可以忽略。</p>
<p>除了层级查找损耗的问题，变量的修改应只在局部环境进行，尽量避免在局部环境下去操作修改父级变量的值。（react/vue 单向数据流的数据传输方式）</p>
<p>优化方法：声明一个变量存储引用（该方法应用甚多）</p>
<h3 id="不必要的属性查找"><a href="#不必要的属性查找" class="headerlink" title="不必要的属性查找"></a>不必要的属性查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 未优化（window.location.href 3*2 6次）</div><div class="line">var query = window.location.href.substring(window.location.href.indexOf(&apos;?&apos;));</div><div class="line"></div><div class="line">// 优化后（3次，以后多次调用url，查询次数不会增加）</div><div class="line">var url = window.location.href;</div><div class="line">var query = url.substring(url.indexOf(&apos;?&apos;));</div><div class="line">url = null;</div></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-ee9950e6ad5be98a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="window.location.href"></p>
<p>函数里面声明的变量，在函数调用栈执行后退出时，会自动清除引用。而全局变量和闭包则会与之相反，继续保存，所以使用用后需手动标记清除，以免造成内存泄漏。</p>
<h3 id="优化循环"><a href="#优化循环" class="headerlink" title="优化循环"></a>优化循环</h3><ol>
<li>减值迭代</li>
<li>简化终止条件</li>
<li>简化循环体</li>
<li>使用后测试循环</li>
</ol>
<h4 id="减值迭代"><a href="#减值迭代" class="headerlink" title="减值迭代"></a>减值迭代</h4><p>日常应用不多，与增值迭代的区别，就在i存储的值。减值迭代i的值不断在变小，存储的空间也在变小。</p>
<p>但在前端极少需要遍历上万次上亿次的数据，上千上百都很少，所以这个优化可忽略。而且我们遍历的顺序一般都是从数组头部开始，所以增值迭代应用的更多。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 增值迭代（用的较多）</div><div class="line">for(var i = 0; i &lt; len; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 减值迭代</div><div class="line">for(var i = len - 1; i &gt;= 0 ; i--) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="简化终止条件-常用"><a href="#简化终止条件-常用" class="headerlink" title="简化终止条件 (常用)"></a>简化终止条件 (常用)</h4><p>终止条件应该是一个固定值判断，应避免在终止条件上做其他运算（属性查找等）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 未优化，每次循环都会去计算数组长度</div><div class="line">var arr = [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JavaScript&apos;];</div><div class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 优化后</div><div class="line">for (var i = 0, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">// 声明了一个变量len用于储存数组长度，只会计算一次</div></pre></td></tr></table></figure></p>
<h4 id="简化循环体"><a href="#简化循环体" class="headerlink" title="简化循环体"></a>简化循环体</h4><p>循环体的代码应该着重于只需要遍历处理的代码，其他无关代码应放置到循环体外面。</p>
<h4 id="后测试循环"><a href="#后测试循环" class="headerlink" title="后测试循环"></a>后测试循环</h4><blockquote>
<p>最常用的for循环和while循环都是前测试循环。而do-while这种后测试循环，可以避免最初终止条件的计算，因此运行更快。</p>
<p>前测试循环（for/while），可能一次都不会执行循环体</p>
<p>后测试循环（do…while），至少执行一次</p>
</blockquote>
<h4 id="用确定索引值更快"><a href="#用确定索引值更快" class="headerlink" title="用确定索引值更快"></a>用确定索引值更快</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// for循环遍历</div><div class="line">var arr = [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JavaScript&apos;];</div><div class="line">for (let i = 0, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    arr[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 确定索引值</div><div class="line">arr[0]; </div><div class="line">arr[1]; </div><div class="line">arr[2];</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>原生方法较快（Math)</li>
<li>switch语句较快 (多个if情况下)</li>
<li>位运算符较快</li>
</ol>
<p><strong>TIPS: 判断优化，最可能的到最不可能的顺序组织（<code>if/switch</code>)</strong></p>
<h3 id="最小语句数"><a href="#最小语句数" class="headerlink" title="最小语句数"></a>最小语句数</h3><p>符合 <strong>write less, do more</strong> 的代码追求</p>
<h4 id="多个变量声明合并"><a href="#多个变量声明合并" class="headerlink" title="多个变量声明合并"></a>多个变量声明合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 多个var声明</div><div class="line">var name = &apos;KenTsang&apos;;</div><div class="line">var age = 28;</div><div class="line">var job = &apos;Developer&apos;;</div><div class="line"></div><div class="line">// 合并一个var声明</div><div class="line">var name = &apos;KenTsang&apos;,</div><div class="line">    age = 27,</div><div class="line">    job = &apos;Developer&apos;;</div></pre></td></tr></table></figure>
<h4 id="插入迭代值"><a href="#插入迭代值" class="headerlink" title="插入迭代值"></a>插入迭代值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 优化前</div><div class="line">var name = value[i];</div><div class="line">i++;</div><div class="line"></div><div class="line">// 优化后</div><div class="line">var name = value[i++];</div></pre></td></tr></table></figure>
<h4 id="数组-对象字面量"><a href="#数组-对象字面量" class="headerlink" title="数组/对象字面量"></a>数组/对象字面量</h4><p>创建引用类型可以使用构造函数和字面量两种方式，不过日常习惯都使用字面量，因为语句更简洁，写起来更像数据封装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 字面量</div><div class="line">var arr = [1, 2, 3, 4];</div><div class="line">var obj = &#123;</div><div class="line">    name: &apos;KenTsang&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 构造函数</div><div class="line">var arr = new Array(1, 2, 3, 4);</div><div class="line">var obj = new Object();</div><div class="line">obj.name = &apos;KenTsang&apos;;</div></pre></td></tr></table></figure></p>
<h3 id="DOM优化交互"><a href="#DOM优化交互" class="headerlink" title="DOM优化交互"></a>DOM优化交互</h3><h4 id="最小现场更新"><a href="#最小现场更新" class="headerlink" title="最小现场更新"></a>最小现场更新</h4><blockquote>
<p>现场更新：一旦你需要访问的 DOM 部分是已经显示的页面的一部分，那么你就是在进行一个现场更新</p>
</blockquote>
<h4 id="文档片段"><a href="#文档片段" class="headerlink" title="文档片段"></a>文档片段</h4><p>文档片段相当一个临时的占位符，只有片段中的内容会被添加到DOM上，片段本身并不会被添加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 代码片段标签</div><div class="line">var ele  = document.getElementById(&apos;ul&apos;);</div><div class="line">var fragment = document.createDocumentFragment();</div><div class="line">var browsers = [&apos;Firefox&apos;, &apos;Chrome&apos;, &apos;Opera&apos;, </div><div class="line">    &apos;Safari&apos;, &apos;IE&apos;];</div><div class="line"></div><div class="line">browsers.forEach(function(browser) &#123;</div><div class="line">    var li = document.createElement(&apos;li&apos;);</div><div class="line">    li.textContent = browser;</div><div class="line">    fragment.appendChild(li);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 只会操作一次DOM</div><div class="line">ele.appendChild(fragment);</div></pre></td></tr></table></figure>
<h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>合并插入代码一次性设置innerHTML。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 优化前：操作多次DOM</div><div class="line">var list = document.getElementById(&quot;myList&quot;);</div><div class="line">for (var i=0; i &lt; 10; i++) &#123;</div><div class="line">    list.innerHTML += &quot;&lt;li&gt;Item &quot; + i + &quot;&lt;/li&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 优化后：操作一次DOM</div><div class="line">var innerHtml = &apos;&apos;;</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">    innerHtml += &apos;&lt;li&gt;Item&apos; + i + &apos;&lt;/li&gt;&apos;;</div><div class="line">&#125;</div><div class="line">list.innerHTML = innerHtml;</div></pre></td></tr></table></figure>
<h4 id="事件代理（事件委托）"><a href="#事件代理（事件委托）" class="headerlink" title="事件代理（事件委托）"></a>事件代理（事件委托）</h4><p>通过事件流——冒泡机制实现代理，子元素事件触发冒泡到父元素，由父元素绑定一个事件进行统一处理，避免多个事件绑定影响性能。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-4b78e22a65ec2c73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件冒泡"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list&quot;&gt;</div><div class="line">    &lt;li class=&quot;item&quot;&gt;HTML&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item&quot;&gt;CSS&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item&quot;&gt;JavaScript&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">var listEle = document.getElementById(&apos;list&apos;);</div><div class="line"></div><div class="line">listEle.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    if (event.target.className.indexOf(&apos;item&apos;) &gt; -1) &#123;</div><div class="line">        console.log(event.target.innerHTML); </div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// jquery</div><div class="line">$(&apos;#list&apos;).on(&apos;click&apos;, &apos;.item&apos;, function(event)&#123;</div><div class="line">    console.log($(this).html());</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="注意HTMLCollection"><a href="#注意HTMLCollection" class="headerlink" title="注意HTMLCollection"></a>注意HTMLCollection</h4><blockquote>
<p>任何时候要访问 HTMLCollection，不管它是一个属性还是一个方法，都是在文档上进行一个查询，这个查询开销很昂贵。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 一个死循环例子</div><div class="line">&lt;a href=&quot;&quot;&gt;link&lt;/a&gt;</div><div class="line">    </div><div class="line">var existLinkEle = document.getElementsByTagName(&apos;a&apos;);</div><div class="line">for (var i = 0; i &lt; existLinkEle.length; i++) &#123;     </div><div class="line">    console.log(i);</div><div class="line">    var linkEle = document.createElement(&apos;a&apos;);</div><div class="line">    document.body.appendChild(linkEle);</div><div class="line">&#125;</div><div class="line">// body会不断地插入a标签</div></pre></td></tr></table></figure>
<p>因为<code>existLinkEle.length</code>每次循环都会重新计算页面a节点的数量，而得到的值一直递增。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 优化（一个变量存储引用）</div><div class="line">var len = existLinkEle.length;</div><div class="line">for (var i = 0; i &lt; len; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回<code>HTMLCollection</code>对象情况有：</p>
<ol>
<li><code>document.getElementByTagName()</code>。</li>
<li>获取元素的<code>childNodes</code>属性</li>
<li>获取元素的<code>attributes</code>属性</li>
<li><code>document.forms</code>,<code>document.images</code>等</li>
</ol>
<hr>
<p>参考文档</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(02) - 可维护性 - JavaScript高级程序设计]]></title>
      <url>/2018/12/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-02-%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-195eaa14018e8e0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="coding"></p>
<h3 id="编写可维护性代码"><a href="#编写可维护性代码" class="headerlink" title="编写可维护性代码"></a>编写可维护性代码</h3><p>可维护的代码遵循原则：</p>
<ol>
<li>可理解性 （方便他人理解）</li>
<li>直观性    （一眼明了）</li>
<li>可适应性 （数据变化无需重写方法）</li>
<li>可扩展性 （应对未来需求扩展，要求较高）</li>
<li>可调试性 （错误处理方便定位）</li>
</ol>
<h4 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h4><p>变量取名多为为名词，方法取名多为为动词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 变量名</div><div class="line">car, person;</div><div class="line"></div><div class="line">// 方法名</div><div class="line">getName, isEnable;</div></pre></td></tr></table></figure></p>
<h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>功能过于依赖，代码耦合过紧，不利于维护。而通过解耦能让我们更专一地处理特定功能业务的开发，也方便我们开发中调试，从复杂的耦合依赖中抽离出来。</p>
<p>解耦优势：代码复用，单元测试。</p>
<p><strong>解耦原则：</strong></p>
<ol>
<li>HTML/JavaScript解耦（结构层/行为层的解耦）</li>
<li>CSS/JavaScript解耦 （样式层/行为层的解耦）</li>
<li>应用逻辑/事件处理程序解耦</li>
</ol>
<blockquote>
<p>应用逻辑/事件处理程序解耦合的原则：</p>
<ol>
<li>勿将event对象传给其他方法；只传来自event对象中所&gt; 需的数据</li>
<li>任何可以在应用层面的动作都应该可以在不执行任何事&gt; 件处理程序的情况下进行；</li>
<li>任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 一个事件解耦的例子</div><div class="line">var pwdInput = document.getElementById(&apos;password&apos;);</div><div class="line"></div><div class="line">// 回车事件</div><div class="line">pwdInput.addEventListener(&apos;keyup&apos;, function(event)&#123;</div><div class="line">    if (event.keyCode == 13) &#123;</div><div class="line">        validatePassword(event.target.value);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 失焦事件</div><div class="line">pwdInput.addEventListener(&apos;blur&apos;, function(event) &#123;</div><div class="line">    validatePassword(event.target.value);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 业务应用单独封装到一个方法里面，多处复用/单元测试皆可</div><div class="line">function validatePassword(pwd) &#123;</div><div class="line">    if (!pwd) &#123;</div><div class="line">        alert(&apos;密码不能为空!&apos;);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对象所有权"><a href="#对象所有权" class="headerlink" title="对象所有权"></a>对象所有权</h3><p>JavaScript中是通过原型链来实现继承，而原型继承的一个特点就是原型上定义的属性方法，可以被多个实例共享使用。</p>
<p><strong>对象维护原则：</strong></p>
<ol>
<li>不要为实例或原型添加属性</li>
<li>不要为实例或原型添加方法</li>
<li>不要重定义已存在的方法</li>
</ol>
<p><strong>需要修改对象时：</strong></p>
<ol>
<li>创建包含所需功能的新对象，并用它与相关对象进行交互</li>
<li>创建自定义类型，继承需要进行修改的类型，然后可以自定义类型添加额外功能</li>
</ol>
<h3 id="全局变量引申命名空间"><a href="#全局变量引申命名空间" class="headerlink" title="全局变量引申命名空间"></a>全局变量引申命名空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var name = &apos;KenTsang&apos;;</div><div class="line">function sayName () &#123;</div><div class="line">    console.log(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var MyApp = &#123;</div><div class="line">    name: &apos;KenTsang&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">    skill: &#123;</div><div class="line">        html: 80,</div><div class="line">        css: 80,</div><div class="line">        js: 80</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyApp.skill.js // 80</div></pre></td></tr></table></figure>
<p>虽然减少程序员输错代码造成修改全局变量的几率，但依旧可以修改到全局变量，而且增加了代码量。</p>
<h3 id="常用null比较误区"><a href="#常用null比较误区" class="headerlink" title="常用null比较误区"></a>常用null比较误区</h3><p>TIPS: <code>null</code>可同时判断<code>null/undefined</code>，可用来判断对象属性是否存在。</p>
<p>使用<code>null</code>作判断无法进行充分的类型检查。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 错误用法</div><div class="line">function sortArrays(values) &#123;</div><div class="line">    if (values != null) &#123;</div><div class="line">        // 非数组类型就会报错，因为sort方法只有Array才具备</div><div class="line">        values.sort();</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line">// 正确用法</div><div class="line">if (values instanceof Array) &#123;</div><div class="line">    value.sort();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用null比较的代码，替换原则：</p>
<ol>
<li>如果值应为一个引用类型，使用instanceof操作符检查其构造函数</li>
<li>如果值应为一个基本类型(值类型)，使用typeof检查其类型</li>
<li>如果是希望对象包含某个特点的方法名，则使用typeof操作符确保指定名字的方法存在于对象上</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 值类型 (Number, String, Boolean)</div><div class="line">typeof value == &apos;string&apos;;</div><div class="line"></div><div class="line">// 引用类型 (Array, Object, Function)</div><div class="line">value instanceof Array;</div><div class="line"></div><div class="line">// 对象方法 (Object.property)</div><div class="line">typeof person.getName == &apos;function&apos;</div></pre></td></tr></table></figure>
<h3 id="常量应用"><a href="#常量应用" class="headerlink" title="常量应用"></a>常量应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var CONSTANS = &#123;</div><div class="line">    INVALID_VALUES_MSG: &quot;Invalid value!&quot;,</div><div class="line">    INVALID_VALUE_URL: &quot;/erros/invalid.php&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CONSTANS.INVALID_VALUES_MSG // &quot;Invalid value!&quot;</div></pre></td></tr></table></figure>
<p>常量应用原则：</p>
<ol>
<li>重复值——多处地方引用的值 (CSS类名/后端返回的状态码)。</li>
<li>用户界面字符串——显示给用户的字符串 (国际化, 替换为对应的语言包文件)</li>
<li>URLs——公共地方存放所有的URL (测试API的URL/上线API的URL)</li>
<li>任何可能会更改的值 (通常是环境/语言配置上的修改)</li>
</ol>
<p>redux/vuex的actionType判断的应用，也是常量应用常见的场景。好处就是引用时拼写错误会直接抛出变量引用错误，而直接用字符串值判断，则不会抛出错误，不利于调试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// redux-reducer.js文件中应用常量</div><div class="line">import &#123;</div><div class="line">    ADD_TODO_ITEM, </div><div class="line">    DELETE_TODO_ITEM</div><div class="line">&#125; from &apos;./actionTypes&apos;</div><div class="line"></div><div class="line">const defaultState = &#123;</div><div class="line">    inputValue: &apos;&apos;,</div><div class="line">    list: []</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default (state = defaultState, action) =&gt; &#123;</div><div class="line">    let newState = JSON.parse(JSON.stringify(state));</div><div class="line"></div><div class="line">    switch (action.type) &#123;</div><div class="line">        case DELETE_TODO_ITEM:</div><div class="line">            newState.list.splice(action.value, 1);</div><div class="line">        break;</div><div class="line">        case ADD_TODO_ITEM:</div><div class="line">            if (newState.inputValue.trim().length) &#123;</div><div class="line">                newState.list.push(newState.inputValue);</div><div class="line">            &#125;</div><div class="line">            newState.inputValue = &apos;&apos;;</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return newState;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考文档</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(01) - JSON - JavaScript高级程序设计]]></title>
      <url>/2018/12/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-01-JSON-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-c9c583de82f7b80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="coding"></p>
<h3 id="JSON与JavaScript对象"><a href="#JSON与JavaScript对象" class="headerlink" title="JSON与JavaScript对象"></a>JSON与JavaScript对象</h3><p>JSON是一种表示结构化数据的存储格式，语法格式上与JavasScript对象有些类似。</p>
<p>TIPS: 与JavaScript对象的格式区别</p>
<ol>
<li>不支持变量、函数或对象实例</li>
<li>字符串，属性名必须使用双引号</li>
<li>无需定义变量存储引用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// JSON对象</div><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;KenTsang&quot;,</div><div class="line">    &quot;age&quot;: 27,</div><div class="line">    &quot;job&quot;: &quot;Developer&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// js对象(该对象将作在后续例子引用)</div><div class="line">let person = &#123;</div><div class="line">    name: &apos;KenTsang&apos;,</div><div class="line">    age: 27,</div><div class="line">    job: &apos;Developer&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES5定义了一个全局对象JSON，IE8+以上支持，该对象提供来<code>stringify</code>和<code>parse</code>两个方法用于JSON数据解析和序列化。</p>
<h3 id="stringify"><a href="#stringify" class="headerlink" title="stringify()"></a>stringify()</h3><p>stringify用于把JavaScript对象序列化JSON字符串，</p>
<blockquote>
<p>在序列化JavaScript对象时，所有函数及原型成员都会被有意忽略，不体现在结果中。此外，值为undefined的任何属性也都会被跳过。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JSON.stringify(</div><div class="line">    value: Object, </div><div class="line">    replace: Array | function(key,value) &#123;&#125;,</div><div class="line">    space: number | string</div><div class="line">)</div></pre></td></tr></table></figure>
<p>该方法接受三个参数</p>
<ol>
<li>参数：接收传入的js对象</li>
<li>参数：过滤器（数组/函数）</li>
<li>参数：字符串缩进（数值/字符串）</li>
</ol>
<h4 id="参数2-过滤器"><a href="#参数2-过滤器" class="headerlink" title="参数2 - 过滤器"></a>参数2 - 过滤器</h4><p>TIPS1: 过滤器是一个数组时，序列化结果只包含数组中列出的属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let result = JSON.stringify(person, [&quot;name&quot;, &quot;job&quot;]);</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">// &#123;&quot;name&quot;:&quot;KenTsang&quot;,&quot;job&quot;:&quot;Developer&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>TIPS2: 过滤器是一个函数时（替换函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var jsonStr = JSON.stringify(Person, function(key, value)&#123;</div><div class="line">    if (key == &apos;age&apos;) &#123;</div><div class="line">        return &apos;secret&apos;;</div><div class="line">    &#125; else &#123;</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">// &#123;&quot;name&quot;:&quot;KenTsang&quot;,&quot;age&quot;:&quot;secret&quot;,&quot;job&quot;:&quot;Developer&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>如果替换函数返回的是<code>undefined</code>，则该属性不会被包含在序列化结果中。</p>
<h4 id="参数3-字符串缩进"><a href="#参数3-字符串缩进" class="headerlink" title="参数3 - 字符串缩进"></a>参数3 - 字符串缩进</h4><p>用于控制序列化结果中的缩进和空白符，输出序列结果带缩进格式，方便预览查看。实际应用开发不多。</p>
<ol>
<li>为数值时，表示每个级别缩进的空格数（最大10）</li>
<li>为字符串时，则作为缩进字符（替换默认的空格，最大10个字符）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let result = JSON.stringify(person, null, &apos;--&apos;);</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">/*</div><div class="line">&#123;</div><div class="line">--&quot;name&quot;: &quot;KenTsang&quot;,</div><div class="line">--&quot;age&quot;: 27,</div><div class="line">--&quot;job&quot;: &quot;Developer&quot;</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="toJSON-方法"><a href="#toJSON-方法" class="headerlink" title="toJSON()方法"></a>toJSON()方法</h4><p>应对更复杂的一些需求，我们可以通过toJSON()对某些对象进行自定义序列化的需求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">    name: &quot;KenTsang&quot;,</div><div class="line">    age: 27,</div><div class="line">    job: &apos;Developer&apos;,</div><div class="line">    toJSON: function() &#123;</div><div class="line">        return &#123;</div><div class="line">            &quot;name&quot;: &quot;KT&quot;,</div><div class="line">            &quot;age&quot;: &quot;2*&quot;,</div><div class="line">            &quot;job&quot;: &quot;DP&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let result = JSON.stringify(person);</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">// &#123;&quot;name&quot;:&quot;KT&quot;,&quot;age&quot;:&quot;2*&quot;,&quot;job&quot;:&quot;DP&quot;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>TIPS: 序列化顺序</strong></p>
<blockquote>
<ol>
<li>如果存着toJSON方法而且能通过它取得有效的值，则调用该方法。否则，返回对象本身。</li>
<li>如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第(1)步的值。</li>
<li>对第(2)步返回的每个值进行相应的序列化。</li>
<li>如果提供了第三个参数，执行相应的格式化。</li>
</ol>
<p>– 摘自《JavaScript高级程序设计》–</p>
</blockquote>
<h3 id="parse"><a href="#parse" class="headerlink" title="parse()"></a>parse()</h3><p>parse用于把JSON字符串解析成JavaScript对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSON.parse(text: string, reviver: function(key, value) &#123;&#125;)</div></pre></td></tr></table></figure></p>
<p>该方法接受三个参数</p>
<ol>
<li>参数：接收传入的json字符串</li>
<li>参数：还原函数</li>
</ol>
<h4 id="还原函数"><a href="#还原函数" class="headerlink" title="还原函数"></a>还原函数</h4><ol>
<li>返回undefined, 结果中删除相应的键 </li>
<li>返回其它值，则将值插入到结果中</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">let Person = &#123;</div><div class="line">    name: &quot;KenTsang&quot;,</div><div class="line">    age: 27,</div><div class="line">    job: &quot;Developer&quot;,</div><div class="line">    birth: new Date(1991, 3, 19)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var jsonStr = JSON.stringify(Person);</div><div class="line">var jsObj = JSON.parse(jsonStr, function(key, value) &#123;</div><div class="line">    if (key == &apos;birth&apos;) &#123;</div><div class="line">        return new Date(value);</div><div class="line">    &#125; else &#123;</div><div class="line">        return value);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">jsObj.birth.getFullYearh(); </div><div class="line"></div><div class="line">// 输出结果： 1991</div></pre></td></tr></table></figure>
<p>例子中通过还原函数，重新实例一个Date对象，所以可以用到<code>getFullYear()</code>方法。</p>
<hr>
<p>参考文档</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂谈：HTTP1.1 与 HTTP2.0 知多少？]]></title>
      <url>/2018/08/04/%E6%9D%82%E8%B0%88%EF%BC%9AHTTP1-1-%E4%B8%8E-HTTP2-0-%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>HTTP是应用层协议，是基于TCP底层协议而来。</p>
<p>TCP的机制限定，每建立一个连接需要3次握手，断开连接则需要4次挥手。</p>
<p>HTTP协议采用“请求-应答”模式，HTTP1.0下，HTTP1.1非Keep-Alive模式下，每个请求都要新建一个连接，完成之后立即断开连接。如果有新的请求，则要重新创建请求连接（HTTP协议为无连接的协议）。</p>
<p>这样不免造成了网络传输数据一定的延迟，1999年推出HTTP1.1，虽然可以通过设置延迟时间，让连接延迟关闭。但仍然有线头阻塞，max-connection最大连接限制了并行请求数量等痛点，难以应对日益增长的大数据实时传输。</p>
<p>新一代HTTP2.0协议应运而生，提高HTTP应对高并发场景下的数据传输能力。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-83d4cb235ce8f922.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="杂谈：HTTP1.1 与 HTTP2.0 知多少？"></p>
<h3 id="「-HTTP1-1」"><a href="#「-HTTP1-1」" class="headerlink" title="「 HTTP1.1」"></a>「 HTTP1.1」</h3><h4 id="Pipelining管道化"><a href="#Pipelining管道化" class="headerlink" title="Pipelining管道化"></a>Pipelining管道化</h4><p>提出管道化方案解决连接延迟，服务端可设置Keep-Alive来让连接延迟关闭时间，但因为浏览器自身的Max-Connection最大连接限制，同一个域名 (host) 下的请求连接限制（同域下谷歌浏览器是一次限制最多6个连接），只能通过多开域名来实现，这也就是我们的静态资源选择放到CDN上或其它域名下，来提高资源加载速度。</p>
<p>pipelining方案需要前后端支持，但绝大部分的HTTP代理器对pipelining的支持并不友好。</p>
<h4 id="只支持GET-HEAD"><a href="#只支持GET-HEAD" class="headerlink" title="只支持GET/HEAD"></a>只支持GET/HEAD</h4><p>pipelining只支持GET/HEAD方式传送数据，不支持POST等其它方式传输。</p>
<h4 id="头部信息冗余"><a href="#头部信息冗余" class="headerlink" title="头部信息冗余"></a>头部信息冗余</h4><p>HTTP是无状态的，客户端/服务端只能通过HEAD的数据维护获取状态信息，这样就造成每次连接请求时都会携带大量冗余的头部信息，头部信息包括COOKIE信息等。</p>
<h4 id="超文本协议"><a href="#超文本协议" class="headerlink" title="超文本协议"></a>超文本协议</h4><p>HTTP1.X是超文本协议传输。超文本协议传输，发送请求时会找出数据的开头和结尾帧的位置，并去除多余空格，选择最优方式传输。如果使用了HTTPS，那么还会对数据进行加密处理，一定程度上会造成传输速度上的损耗。</p>
<h4 id="线头阻塞"><a href="#线头阻塞" class="headerlink" title="线头阻塞"></a>线头阻塞</h4><p>pipelining通过延迟连接关闭的方案，虽然可同时发起对服务端的多个请求，但服务端的response依旧遵循FIFO（first in first out)规则 依次返回。</p>
<p>举个例子客户端发送了1、2、3、4四个请求，如果1没返回给客户端，那么2，3，4也不会返回。这就是所谓的线头阻塞。高并发高延迟的场景下阻塞明显。</p>
<h4 id="HTTP1-X传输优化方法"><a href="#HTTP1-X传输优化方法" class="headerlink" title="HTTP1.X传输优化方法"></a>HTTP1.X传输优化方法</h4><ol>
<li>多个资源合并成一个请求连接，如前端Spriting雪碧图，JS/CSS压缩成一个文件等</li>
<li>Inlining内联的方式，采用inline css/inline js等并入html中，减少对css/js文件的请求</li>
<li>CDN资源多域名转发，静态资源分布存储在多个域下。</li>
</ol>
<p>以上三种三种方法虽然能使HTTP1.X协议传输速度提高，但也有对应的不足。</p>
<ol>
<li>如雪碧图，将多个小图合并成一张大图，降低多张小图请求的高延迟，但是如果我只想要两个icon小图，却需要加载一整张大图，就会造成资源冗余。合并的JS/CSS文件也有类似的问题。</li>
<li>内联的方式，会让我们的代码变得难以维护，让html文件变得更大，代码混合严重。</li>
<li>多域名下可缓解Max-Connection，但不同域会让Cookie信息无法彼此共享。</li>
</ol>
<hr>
<p>了解完HTTP1.1的痛点，接下来就是我们新一代的HTTP协议HTTP2.0</p>
<hr>
<h3 id="「-HTTP2-0」"><a href="#「-HTTP2-0」" class="headerlink" title="「 HTTP2.0」"></a>「 HTTP2.0」</h3><h4 id="前身SPDY"><a href="#前身SPDY" class="headerlink" title="前身SPDY"></a>前身SPDY</h4><p>SPDY是2012年谷歌推出的是基于SSL/TLS的传输协议，SPDY有降低延迟，多路复用，头部压缩，服务端推送等特点，这些特点也称为了后续HTTP2.0的功能基石，HTTP2.0是SPDY/3 draft的优化版。</p>
<p>HTTP2.0 与 SPDY的区别：</p>
<ol>
<li>HTTP2.0 头部压缩采用HPACK， 而SPDY采用DELEFT。</li>
<li>HTTP2.0 理论上支持明文HTTP传输，而SPDY强制使用HTTPS。</li>
</ol>
<h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>（一个域只要一个TCP连接）实现真正的并发请求，降低延时，提高了带宽的利用率。</p>
<h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><p>客户端/服务端进行渐进更新维护，采用HPACK压缩，节省了报文头占用流量。</p>
<ol>
<li>相同的头部信息不会通过请求发送，延用之前请求携带的头部信息。</li>
<li>新增/修改的头部信息会被加入到HEAD中，两端渐进更新。</li>
</ol>
<p>两端会共同维护一个head list，每次请求时都会进行检查。<br>该list包括：</p>
<ol>
<li>static (既定的头部信息)</li>
<li>dynamic (自定义的头部信息)</li>
</ol>
<h4 id="请求优先级"><a href="#请求优先级" class="headerlink" title="请求优先级"></a>请求优先级</h4><p>每个流都有自己的优先级别，客户端可指定优先级。并可以做流量控制。因为HTTP2.0的传世允许请求并发，但是应用场景中我们要处理一些主要文件的优先级权重，以及资源模块依赖等。所以我们可通过设置优先级来提高主要文件的权重，使其优先加载请求。</p>
<h4 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h4><p>请求不是来自客户端“明确”的请求，是从服务端PUSH_PROMISE帧中提供。例如我们加载index.html, 我们可能还需要index.js, index.css等文件。传统的请求只有当拿到index.html，解析html中对index.js/index.css的引入才会再请求资源加载，但是通过服务端数据，可以提前将资源推送给客户端，这样客户端要用到的时候直接调用即可，不用再发送请求。</p>
<ul>
<li>push的资源能缓存在浏览器中</li>
<li>不同的网页能使用该缓存，不用重新发起</li>
<li>push的资源通过multiplexed进行传输</li>
<li>push的资源能够进行priority标识</li>
<li>client有权取消push资源的加载</li>
<li>push的资源必须同域</li>
</ul>
<h4 id="二进制协议"><a href="#二进制协议" class="headerlink" title="二进制协议"></a>二进制协议</h4><p>HTTP2.0 传输协议采用二进制协议，区别与HTTP1.X的超文本协议。更易于帧，数据包的发送接收。HTTP2.0是运行在TCP连接上的应用层协议，接受服务器或发送请求时，会自动将头部信息/request body分成HEAD帧和DATA帧。</p>
<p>客户端/服务端发送/接收数据时，会将数据打散乱序发送，接收数据时接收一端再通过streamID标识来将数据合并。</p>
<h4 id="HTTP2-0环境要求"><a href="#HTTP2-0环境要求" class="headerlink" title="HTTP2.0环境要求"></a>HTTP2.0环境要求</h4><p>HTTP2.0理论上支持明文HTTP传输，但因为其前身SPDY是在TLS上，他们的主人Google 和 Firefox 都支持TLS架构，所以需要搭建HTTP2.0 + TLS成了标准。</p>
<ol>
<li>Nginx &gt; 1.10</li>
<li>OpenSSL &gt; 1.0.2</li>
<li>CA证书</li>
</ol>
<p>参考文档</p>
<ul>
<li><a href="https://blog.csdn.net/charleslei/article/details/50621912" target="_blank" rel="external">HTTP协议头部与Keep-Alive模式详解</a></li>
<li><a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/" target="_blank" rel="external">HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事</a></li>
<li><a href="https://segmentfault.com/a/1190000005085636" target="_blank" rel="external">前端应该了解的HTTP2</a></li>
<li><a href="https://tech.upyun.com/article/227/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%20HTTP%2F2%20%E7%89%B9%E6%80%A7.html" target="_blank" rel="external">一文读懂 HTTP/2 特性</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>  本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 中 if / if...else...替换方式]]></title>
      <url>/2018/07/14/JS-%E4%B8%AD-if-if-else-%E6%9B%BF%E6%8D%A2%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-d2f5af033e9a4f64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="if/if...else...替换方式"></p>
<p>说说烂大街的<code>if/if...else...</code>，程序中用得最多的流程判断语句。</p>
<p>对着曾经满屏的<code>if/if...else...</code>，心想能不能搞点事情，折腾点浪花浪里呀浪。</p>
<p>对顶着“这个需求很简单，怎么实现我不管，明天上线”的程序猿，答案必须YES。</p>
<p><strong>“Write Less, Do More”</strong>，学习进步的本质就是为了更有效率地偷懒。</p>
<p>废话说完，直接上方法汇总，让我们来一窥究竟：</p>
<h3 id="switch改写if"><a href="#switch改写if" class="headerlink" title="switch改写if"></a>switch改写if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// if 版本</div><div class="line">var a = 1;</div><div class="line">if(a &gt; 1 &amp;&amp; a &lt; 5) &#123;</div><div class="line">    return 1</div><div class="line">&#125; else if(a &gt; 5 &amp;&amp; a &lt; 10)&#123;</div><div class="line">    return 5</div><div class="line">&#125;else&#123;</div><div class="line">    return 10</div><div class="line">&#125;</div><div class="line"></div><div class="line">// switch 改版</div><div class="line">switch(true)&#123;</div><div class="line">    case (a &gt; 1 &amp;&amp; a &lt; 5):</div><div class="line">        return 1</div><div class="line">    case (a &gt; 5 &amp;&amp; a &lt; 10):</div><div class="line">        return 5</div><div class="line">    default:</div><div class="line">        return 10</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码的<code>switch...case...</code>的用法实际使用不多，仅供参考。<br>一般case为常量时<code>switch...case...</code>用得较多。</p>
<p>选择分支较多时，建议选用<code>switch…case</code>可提高程序的效率，但<code>switch...case</code>不足的地方在于只能处理字符或者数字类型的变量，<code>if…else</code>更加灵活，可用于判断表达式是否成立，比如<code>if(a+b&gt;c)</code>,<code>if…else</code>的应用范围更广。</p>
<h3 id="三元运算符改写if"><a href="#三元运算符改写if" class="headerlink" title="三元运算符改写if"></a>三元运算符改写if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// if 版本</div><div class="line">if (bool) &#123;</div><div class="line">    value = 1;</div><div class="line">&#125; else &#123;</div><div class="line">    value = 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 三元运算符 版本</div><div class="line">value = bool ? 1 : 2;</div><div class="line">// 三元预算符 多个运算需要括号包裹 此处用了逗号表达式</div><div class="line">return typeof foo === &apos;object&apos;?(console.log(1),1):(console.log(2),2);</div></pre></td></tr></table></figure>
<p>优点：代码简化，更加清爽，write less</p>
<p>缺点：复杂的三元运算符可读性较差，需友好注释</p>
<p>TIPS:  三元运算符后面不能带return</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 错误用法，运算符号后不能带return</div><div class="line">bool ? return 1 : return 2;</div></pre></td></tr></table></figure>
<h3 id="逻辑判断-and-amp-amp-和or-改写if"><a href="#逻辑判断-and-amp-amp-和or-改写if" class="headerlink" title="逻辑判断 and(&amp;&amp;)和or(||) 改写if"></a>逻辑判断 and(&amp;&amp;)和or(||) 改写if</h3><p>原理：利用逻辑判断的短路运算来实现</p>
<blockquote>
<p>短路：<code>&amp;&amp;</code> 中第一个表达式为假就不会去处理第二个表达式，<code>||</code> 则相反</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// if为真</div><div class="line">if (bool) &#123;</div><div class="line">    value = getYes();</div><div class="line">&#125;</div><div class="line">// &amp;&amp;改版</div><div class="line">bool &amp;&amp; (value = getYes());</div><div class="line"></div><div class="line">// if为假</div><div class="line">if (!bool) &#123;</div><div class="line">    value = getNo();</div><div class="line">&#125;</div><div class="line">bool || (value = getNo());</div></pre></td></tr></table></figure>
<p>优点：代码简化，更加清爽，write less</p>
<p>缺点：适用于简单判断逻辑，复杂的判断运算可读性较差，需友好注释</p>
<p>TIPS：适用于没有else的场景, 逻辑运算符后面不能带return</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 错误用法，运算符号后不能带return</div><div class="line">boll || return true;</div></pre></td></tr></table></figure>
<hr>
<h4 id="知识点插播-——-1"><a href="#知识点插播-——-1" class="headerlink" title="知识点插播 —— (1)"></a>知识点插播 —— (1)</h4><ol>
<li><p>三元运算符和逻辑运算符都有一层return作用，但不可作用于函数return语句，所以像以下这种用法都是错误的；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 错误用法</div><div class="line">function getResult(value) &#123;</div><div class="line">    value ? &apos;yes&apos; : &apos;no&apos;;</div><div class="line">&#125;</div><div class="line">var result = getResult(true); // 并不会有值返回</div></pre></td></tr></table></figure>
</li>
<li><p>js逻辑运算中，<code>0/&quot;&quot;/null/false/undefined/NaN</code>都会判为<code>false</code>，其它都为<code>true</code>；</p>
</li>
<li>很多开源代码中可见<code>if(!!attr)</code>，为什么不直接写<code>if(attr)</code>， 其实这是一种更严谨的写法，<code>!!attr</code>会强制转化为boolean类型。<code>typeof !!attr == true</code> 比 <code>typeof attr == true</code> 更加严谨。</li>
</ol>
<hr>
<h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// if版本</div><div class="line">if (a == 1) &#123;</div><div class="line">    return &apos;one&apos;;</div><div class="line">&#125; else if (a == 2) &#123;</div><div class="line">    return &apos;two&apos;;</div><div class="line">&#125; else if (a == 3) &#123;</div><div class="line">    return &apos;three&apos;;</div><div class="line">&#125; else &#123;</div><div class="line">    return &apos;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 对象属性 改版</div><div class="line">var ret = &#123;</div><div class="line">    1: &apos;one&apos;,</div><div class="line">    2: &apos;two&apos;,</div><div class="line">    3: &apos;three&apos;</div><div class="line">&#125;;</div><div class="line">return ret[a] ? ret[a] : &apos;&apos;;</div></pre></td></tr></table></figure>
<p>TIPS：</p>
<ol>
<li>判断值需为确定值，如<code>==</code> ，其它如<code>&gt;=/&lt;=/&gt;/&lt;</code>不适用</li>
<li>条件作为对象属性，需要注意对象属性的读取方式</li>
</ol>
<hr>
<h4 id="知识点插播-——-2"><a href="#知识点插播-——-2" class="headerlink" title="知识点插播 —— (2)"></a>知识点插播 —— (2)</h4><h5 id="JS的命名规则（变量的命名规则）"><a href="#JS的命名规则（变量的命名规则）" class="headerlink" title="JS的命名规则（变量的命名规则）"></a>JS的命名规则（变量的命名规则）</h5><ul>
<li>标识符只能由字母、数字、下划线和‘$’组成</li>
<li>数字不可以作为标识符的首字符</li>
</ul>
<h5 id="对象属性的命名规则"><a href="#对象属性的命名规则" class="headerlink" title="对象属性的命名规则"></a>对象属性的命名规则</h5><ul>
<li>通过<code>[]</code>操作符为对象添加属性时，属性名可以是任何字符串（包括只包含空格的字符串和空字符串）；</li>
<li>通过<code>.</code>操作符为对象添加属性时，属性名必须是合法的标识符名称；</li>
<li>如果属性名包含非法的标识符字符，则只能采用<code>obj[“propertyName”]</code>的形式；</li>
<li>如果属性名是合法的标识符，读取时可采用<code>obj.propertyName</code>或<code>obj[“propertyName”]</code>的形式；</li>
</ul>
<hr>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote>
<p>策略模式：定义一系列的算法，把它们一个个封装起来，目的就是将算法的使用与算法的实现分离开来</p>
</blockquote>
<p>以下为常见的表单验证，用策略模式来构建，替换<code>if...else</code>的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line">&lt;form id = &quot;registerForm&quot; method=&quot;post&quot; action=&quot;http://xxxx.com/api/register&quot;&gt;</div><div class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;userName&quot;&gt;</div><div class="line">    密码：&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;</div><div class="line">    手机号码：&lt;input type=&quot;text&quot; name=&quot;phoneNumber&quot;&gt;</div><div class="line">    &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">// js</div><div class="line">// 策略对象</div><div class="line">var strategies = &#123;</div><div class="line">    isNoEmpty: function (value, errorMsg) &#123;</div><div class="line">        if (value === &apos;&apos;) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    isNoSpace: function (value, errorMsg) &#123;</div><div class="line">        if (value.trim() === &apos;&apos;) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    minLength: function (value, length, errorMsg) &#123;</div><div class="line">        if (value.trim().length &lt; length) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    maxLength: function (value, length, errorMsg) &#123;</div><div class="line">        if (value.length &gt; length) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    isMobile: function (value, errorMsg) &#123;</div><div class="line">        if (!/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[7]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$/.test(value)) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;                </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 验证类</div><div class="line">var Validator = function() &#123;</div><div class="line">    this.cache = [];</div><div class="line">&#125;</div><div class="line">Validator.prototype.add = function(dom, rules) &#123;</div><div class="line">    var self = this;</div><div class="line">    for(var i = 0, rule; rule = rules[i++];) &#123;</div><div class="line">        (function(rule) &#123;</div><div class="line">            var strategyAry = rule.strategy.split(&apos;:&apos;);</div><div class="line">            var errorMsg = rule.errorMsg;</div><div class="line">            self.cache.push(function() &#123;</div><div class="line">            var strategy = strategyAry.shift();</div><div class="line">            strategyAry.unshift(dom.value);</div><div class="line">            strategyAry.push(errorMsg);</div><div class="line">            return strategies[strategy].apply(dom, strategyAry);</div><div class="line">            &#125;)</div><div class="line">        &#125;)(rule)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Validator.prototype.start = function() &#123;</div><div class="line">    for(var i = 0, validatorFunc; validatorFunc = this.cache[i++];) &#123;</div><div class="line">        var errorMsg = validatorFunc();</div><div class="line">        if (errorMsg) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 调用代码</div><div class="line">var registerForm = document.getElementById(&apos;registerForm&apos;);</div><div class="line"></div><div class="line">var validataFunc = function() &#123;</div><div class="line">    var validator = new Validator();</div><div class="line">    validator.add(registerForm.userName, [&#123;</div><div class="line">        strategy: &apos;isNoEmpty&apos;,</div><div class="line">        errorMsg: &apos;用户名不可为空&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">        strategy: &apos;isNoSpace&apos;,</div><div class="line">        errorMsg: &apos;不允许以空白字符命名&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">        strategy: &apos;minLength:2&apos;,</div><div class="line">        errorMsg: &apos;用户名长度不能小于2位&apos;</div><div class="line">    &#125;]);</div><div class="line">    validator.add(registerForm.password, [ &#123;</div><div class="line">        strategy: &apos;minLength:6&apos;,</div><div class="line">        errorMsg: &apos;密码长度不能小于6位&apos;</div><div class="line">    &#125;]);</div><div class="line">    validator.add(registerForm.phoneNumber, [&#123;</div><div class="line">        strategy: &apos;isMobile&apos;,</div><div class="line">        errorMsg: &apos;请输入正确的手机号码格式&apos;</div><div class="line">    &#125;]);</div><div class="line">    var errorMsg = validator.start();</div><div class="line">    return errorMsg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">registerForm.onsubmit = function() &#123;</div><div class="line">    var errorMsg = validataFunc();</div><div class="line">    if (errorMsg) &#123;</div><div class="line">        alert(errorMsg);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程;</li>
<li>第二个部分是环境类Context，该Context接收客户端的请求，随后把请求委托给某一个策略类;</li>
</ul>
<p>优点： </p>
<ol>
<li>有效避免多重条件选择语句</li>
<li>提供了对外开放 - 封装原则的完美支持，将方法封装在独立的strategy中，使得它们易于切换、易于理解、易于扩展。</li>
<li>复用性</li>
</ol>
<p>缺点：</p>
<ol>
<li>增加了策略类/对象的使用</li>
<li>使用策略模式，必须先了解所有的strategy，违反了最少知识原则</li>
</ol>
<hr>
<p>参考资料</p>
<ol>
<li><a href="https://segmentfault.com/a/1190000006899198" target="_blank" rel="external">JavaScript设计模式之策略模式</a></li>
<li><a href="https://segmentfault.com/q/1010000007013419" target="_blank" rel="external">js减少if语句的技巧</a></li>
<li><a href="https://www.cnblogs.com/canger/p/6382944.html" target="_blank" rel="external">js对象属性的命名规则</a></li>
<li><a href="https://www.cnblogs.com/kester/p/6231328.html" target="_blank" rel="external">javascript中||和&amp;&amp;代替if</a></li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道JS面试题引发的血案]]></title>
      <url>/2018/04/09/%E4%B8%80%E9%81%93JS%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-2e356f337318789a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="逗号表达式"></p>
<p>刚入职新公司，属于公司萌新一枚，一天下午对着屏幕看代码架构时。<br>BI项目组长给我看了一道面试别人的JS面试题。</p>
<p>虽然答对了，但把理由说错了，照样不及格。</p>
<p>话不多说，直接上题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">switch (a) &#123;</div><div class="line">    case 2:</div><div class="line">        console.log(2)</div><div class="line">    break;</div><div class="line">    case 1, 2, 3:  // 这里case是对比几呢？</div><div class="line">        console.log(1)</div><div class="line">    break;</div><div class="line">    default: </div><div class="line">    break;</div><div class="line">&#125;</div><div class="line">// result：最后什么都不会输出</div></pre></td></tr></table></figure>
<p>看完题如果答对并且知道理由的小伙伴，仅当加深印象；如果你也像我一样不明所以，请仔细往下看。</p>
<h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表达式1，表达式2，表达式3，...... ，表达式n</div></pre></td></tr></table></figure>
<h4 id="逗号表达式的要领："><a href="#逗号表达式的要领：" class="headerlink" title="逗号表达式的要领："></a>逗号表达式的要领：</h4><ol>
<li>逗号表达式的运算过程为：从左往右逐个计算表达式</li>
<li>逗号表达式作为一个整体，它的值为最后一个表达式（也即表达式n）的值</li>
<li>逗号运算符的优先级别在所有运算符中最低</li>
</ol>
<p>有了上述的概念，再回过头来看面试题就很清晰了。</p>
<p>打铁趁热，再来一道题来加深下理解。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var i, j, k;</div><div class="line">for (i = 0, j = 0; i &lt; 10, j &lt; 6; i++, j++) &#123;</div><div class="line">    k = i+j;</div><div class="line">&#125;</div><div class="line">console.log(k); </div><div class="line"></div><div class="line">// result：10</div></pre></td></tr></table></figure>
<p>执行步骤如下表</p>
<table>
<thead>
<tr>
<th>i</th>
<th>j</th>
<th>k</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>10</td>
</tr>
</tbody>
</table>
<p>一直埋头写代码，没用到的知识总是容易忘记，刚好碰到，索性做下笔记加深印象，努力学习知识，仅为装X。</p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂谈：前端Web通信]]></title>
      <url>/2018/03/25/%E6%9D%82%E8%B0%88%EF%BC%9A%E5%89%8D%E7%AB%AFWeb%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/7324444-68e982f25aeb0a0e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端Web通信"></p>
<p>Web2.0以来，Ajax的出世，解决了传统表单提交页面跳转，闪烁白屏等问题。使得Web页面可以实现局部更新，不仅减少了网络带宽，还大大提升了用户体验。</p>
<p>但Ajax并非是一把万能的钥匙，足以打开Web通信这扇大门，当请求遇到跨域通信时，Ajax就没辙了。</p>
<p>Web的快速发展让开发走向工程化的同时，要求工作维度进行划分（前端后端分工明细），以便扩展维护日益复杂庞大的项目需求。而前后端分离的开发方式正是这种需求背景下衍生的产物。（以前混编的代码现在是再也不想看到）</p>
<p>前后端分离的开发方式，如何进行数据通信是开发人员绕不过去的问题。作为开发同学的小伙伴客户端的浏览器，有点小调皮还做了一个同源策略的限制，当我们的数据请求遇到不同源的情况下（跨域），我们就得尝试其它的通信方法，不能Ajax一条道走到黑。</p>
<h3 id="什么是同源策略及限制"><a href="#什么是同源策略及限制" class="headerlink" title="什么是同源策略及限制"></a>什么是同源策略及限制</h3><blockquote>
<p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。</p>
</blockquote>
<p><strong>同源要求协议，域名，端口(默认80)三者都相同，否则为非同源。</strong></p>
<h4 id="同源策略限制："><a href="#同源策略限制：" class="headerlink" title="同源策略限制："></a>同源策略限制：</h4><ul>
<li>Cookie， LocalStorage和IndexDB无法读取</li>
<li>Dom无法获取</li>
<li>Ajax请求不能发送</li>
</ul>
<hr>
<h3 id="前后端如何通信"><a href="#前后端如何通信" class="headerlink" title="前后端如何通信"></a>前后端如何通信</h3><ol>
<li>Ajax（仅支持同源）</li>
<li>WebSocket （不受同源限制）</li>
<li>CORS （都支持，新的W3C通信标准）</li>
</ol>
<h3 id="如何创建Ajax"><a href="#如何创建Ajax" class="headerlink" title="如何创建Ajax"></a>如何创建Ajax</h3><ul>
<li>XMLHttpRequest对象的工作流程</li>
<li>兼容性处理</li>
<li>事件的触发条件</li>
<li>事件的触发顺序</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var xhr = XMLHttpRequest ? new XMLHttpRequest() : new window.ActiveXObject(&apos;Microsoft&apos;)</div><div class="line">var data = opt.data,</div><div class="line">    url = opt.url,</div><div class="line">    type = opt.type.toUpperCase(),</div><div class="line">    dataArr = [];</div><div class="line">for (var k in data) &#123;</div><div class="line">    dataArr.push(k + &apos;=&apos; + data[k]);</div><div class="line">&#125;</div><div class="line">if (type === &apos;GET&apos;) &#123;</div><div class="line">    url = url + &apos;?&apos; + dataArr.join(&apos;&amp;&apos;);</div><div class="line">    xhr.open(type, url.replace(/\?$/g, &apos;&apos;, true);</div><div class="line">    xhr.send();</div><div class="line">&#125; </div><div class="line">if (type === &apos;POST&apos;) &#123;</div><div class="line">    xhr.open(type, url, true);</div><div class="line">    xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);</div><div class="line">    xhr.send(data.join(&apos;&amp;&apos;));</div><div class="line">&#125;</div><div class="line">xhr.onload = function() &#123;</div><div class="line">    if (xhr.status === 200 || xhr.status === 304) &#123;</div><div class="line">        var res;</div><div class="line">        if (opt.success &amp;&amp; opt.success instanceof Function) &#123;</div><div class="line">            res = xhr.responseText;</div><div class="line">            if (typeof res === &apos;string&apos;) &#123;</div><div class="line">                res = JSON.parse(res);</div><div class="line">                opt.success.call(xhr, res)</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (opt.error &amp;&amp; opt.error instanceof Function) &#123;</div><div class="line">                opt.error.call(xhr, res);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同源下，我们可以直接使用Ajax来与后端同学做数据通信，但是遇到跨域请求时，我们就得更换手中这把Ajax的钥匙，来重新配钥匙开锁</p>
<h3 id="跨域通信的几种方式"><a href="#跨域通信的几种方式" class="headerlink" title="跨域通信的几种方式"></a>跨域通信的几种方式</h3><ol>
<li>JSONP</li>
<li>Hash</li>
<li>postMessage (HTML5)</li>
<li>WebSocket</li>
<li>CORS (新的W3C通信标准)</li>
</ol>
<h4 id="1-JSONP"><a href="#1-JSONP" class="headerlink" title="1. JSONP"></a>1. JSONP</h4><p>JSONP原理：客户端通过动态创建script标签异步加载来实现，服务端callback返回客户端定义的方法名，让客户端进行调用获取数据。</p>
<p><strong>只支持Get请求</strong> (GET与POST的区别这里暂不细讲)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 客户端发送请求</div><div class="line">&lt;script src=&quot;http://www.abc.com?data=name&amp;callback=jsonpname&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">jsonpname(&#123;</div><div class="line">    data: &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="2-Hash"><a href="#2-Hash" class="headerlink" title="2. Hash"></a>2. Hash</h4><p>Hash原理：通过<code>window.onhashchange</code>事件监听来获取url中hash值来实现数据传输。与Get一样，有Url长度限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// A中代码</div><div class="line">var B = document.getElementdByTagName(&apos;iframe&apos;);</div><div class="line">B.src = B.src + &apos;#&apos; + &apos;data&apos;;</div><div class="line">// B中代码</div><div class="line">window.onhashchange = function()&#123;</div><div class="line">    var data = window.location.hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="3-postMessage"><a href="#3-postMessage" class="headerlink" title="3. postMessage"></a>3. postMessage</h4><p>postMessage是HTML5的API，可参考开发文档<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">window.postMessage</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// A.com向B.com发送信息</div><div class="line">Bwindow.postMessage(&apos;data&apos;,&apos;http://B.com&apos;)</div><div class="line">// B中监听</div><div class="line">window.addEventListener(&apos;message&apos;, function(event)&#123;</div><div class="line">    console.log(event.origin); // http://A.com</div><div class="line">    console.log(event.source); // Bwindow</div><div class="line">    console.log(event.data); // data</div><div class="line">&#125;, false)</div></pre></td></tr></table></figure></p>
<p>项目中应用场景：</p>
<ol>
<li>页面和其打开的新窗口的数据传递</li>
<li>多窗口之间消息传递</li>
<li>页面与嵌套的iframe消息传递</li>
<li>上面三个问题的跨域数据传递</li>
</ol>
<h4 id="4-WebSocket"><a href="#4-WebSocket" class="headerlink" title="4. WebSocket"></a>4. WebSocket</h4><p>WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，本身不受同源限制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// WebSocket代码示例</div><div class="line">var ws = new WebSocket(&apos;wss://echo.websocket.org&apos;);</div><div class="line"></div><div class="line">ws.onopen = function (evt) &#123;</div><div class="line">    console.log(&apos;Connection open ...&apos;);</div><div class="line">    ws.send(&apos;Hello WebSocket!&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onmessage = function (evt) &#123;</div><div class="line">    console.log(&apos;Received Message: &apos; + evt.data);</div><div class="line">    ws.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line">ws.onclose = function (evt) &#123;</div><div class="line">    console.log(&apos;Connection closed.&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="5-CORS"><a href="#5-CORS" class="headerlink" title="5. CORS"></a>5. CORS</h4><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>浏览器兼容在XHR(IE8/9)及XHR2(&gt;=IE10)下需要做兼容处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// CORS代码示例</div><div class="line">fetch(&apos;/url&apos;, &#123;</div><div class="line">    method: &apos;get&apos;，</div><div class="line">&#125;).then(function(res)&#123;</div><div class="line">    ...</div><div class="line">&#125;).catch(function(err) &#123;</div><div class="line">    // 错误</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="–-End-–"><a href="#–-End-–" class="headerlink" title="– End –"></a>– End –</h3><p>JSONP有更好的兼容性，能兼容低版本浏览器，但是基于Get传输数据，会因为浏览器Url长度限制而限制数据大小。CORS在不考虑低版本浏览器时，无疑是目前最好前后端通信方案（单向），双向选择WebSocket，而多个页面之间的数据通信，如内嵌iFrame等，则推荐postMessage。</p>
<p>每种方案有不同的应用场景，解决问题不只有一种解决方案，实际项目开发中，需根据实际需求来挑选最优的方案。</p>
<hr>
<p>参考资料</p>
<ol>
<li><a href="https://www.cnblogs.com/dolphinX/p/3464056.html" target="_blank" rel="external">html5 postMessage解决跨域、跨窗口消息传递</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDI3MjA5MQ==&amp;mid=2697266201&amp;idx=2&amp;sn=1b2ca738a21c6d899e82fa6fe769446b&amp;chksm=8376fb2db401723b8a88295bfb74f98bddc2eb52dabffe221ec2f06ed49885f3e606231796d5&amp;mpshare=1&amp;scene=1&amp;srcid=0703jbtAFe3qTgBHtxuzBfgt&amp;pass_ticket=ml9eF7+G5p9IAyQPuOX/q0esEXgr51fhWBL88VWLmzU=#rd" target="_blank" rel="external">干货 | 前端常用的通信技术</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">阮一峰 — 跨域资源共享 CORS 详解</a></li>
<li><a href="https://blog.csdn.net/jlin991/article/details/57083865" target="_blank" rel="external">CORS正确使用姿势</a></li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂谈：渐进增强与优雅降级]]></title>
      <url>/2018/03/21/%E6%9D%82%E8%B0%88%EF%BC%9A%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E4%B8%8E%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>作为一名前端开发人员，最头疼的莫过于浏览器兼容。远古时期万恶的IE6，到现在CSS3不兼容的IE7/8.为了保证不同版本浏览器都有共同或更优化的用户体验，前端搬砖的我们不得不与浏览器兼容顽强斗争。而<strong>渐进增强</strong>和<strong>优雅降级</strong>两种不同的开发流程，也是在我们项目初期做调研选型时会考虑的一个点。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/7324444-b08dbfb300a9a3fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="渐进增钱/优雅降级"></p>
<h3 id="渐进增强（Progressive-Enhancement）"><a href="#渐进增强（Progressive-Enhancement）" class="headerlink" title="渐进增强（Progressive Enhancement）"></a>渐进增强（Progressive Enhancement）</h3><p>一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p>
<h3 id="优雅降级（graceful-degradation）"><a href="#优雅降级（graceful-degradation）" class="headerlink" title="优雅降级（graceful degradation）"></a>优雅降级（graceful degradation）</h3><p>一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。</p>
<p>初一看这两个概念有点高大上，其实作为开发人员来说，多多少少已经在项目中运用只是你自己不察觉而已。换个词汇就比较好理解了，渐进增强（向上/前兼容），优雅降级（向下兼容），向上兼容高版本浏览器，向下兼容低版本浏览器。</p>
<h3 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h3><p><strong>渐进增强</strong>和<strong>优雅降级</strong>只是看待同种事物的两种观点。渐进增强和优雅降级都关注于同一网站在不同设备里不同浏览器下的表现程度。关键的区别则在于它们各自关注的着重点不同，以及这种不同的关注点如何影响项目开发的流程。</p>
<p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 Chrome，Safari，IE、FireFox等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>
<p>渐进增强观点则认为应关注于内容本身。请注意其中的差别：我甚至连“浏览器”三个字都没提。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得渐进增强成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>
<p><strong>概括：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</strong></p>
<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.transition &#123; /*渐进增强写法*/</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">          transition: all .5s;</div><div class="line">&#125;</div><div class="line">.transition &#123; /*优雅降级写法*/</div><div class="line">          transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">&#125;</div><div class="line">// -webkit- / -moz- / -o- (浏览器前缀)</div></pre></td></tr></table></figure>
<ol>
<li>很久以前：浏览器前缀CSS3和正常CSS3都不支持；</li>
<li>不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；</li>
<li>现在：浏览器既支持前缀CSS3，又支持正常CSS3；</li>
<li>未来：浏览器不支持前缀CSS3，仅支持正常CSS3.</li>
</ol>
<p>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3中前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3中前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>
<p>现实项目开发中，推荐使用渐进增强的写法（postcss的autofixer也是这种写法），因为前缀CSS3的某些属性在浏览器中的实现效果有可能与正常的CSS3实现效果不太一样，所以最终还是得以正常CSS3为准。</p>
<p>可参考张鑫旭大神的文章《<a href="http://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/" target="_blank" rel="external">需警惕CSS3属性的书写顺序</a>。</p>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul>
<li>低版本浏览器用户占比居多，优先采用渐进增强的开发流程；</li>
<li>高版本浏览器用户占比居多，优先采用优雅降级的开发流程；</li>
</ul>
<p>事实上绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。例如，淘宝，京东，新浪微博等网站前端的更新，不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。当然也有一些反例如阿里云，本身就是面向软件开发者，这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本，而且大多用的是谷歌浏览器，即使用IE浏览器，也是高版本IE浏览器，面对这种情况，优雅降级的开发流程才是更好的选择。</p>
<hr>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="http://blog.csdn.net/xiongzhengxiang/article/details/7999525" target="_blank" rel="external">渐进增强、优雅降级</a></li>
<li><a href="https://www.jianshu.com/p/d313f1108862" target="_blank" rel="external">渐进增强 VS 优雅降级</a></li>
<li><a href="https://segmentfault.com/q/1010000000264469/a-1020000005988192" target="_blank" rel="external">渐进增强和优雅降级之间的有什么不同?</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/" target="_blank" rel="external">需警惕CSS3属性的书写顺序</a></li>
<li><a href="http://www.cnblogs.com/mofish/p/3822879.html" target="_blank" rel="external">优雅降级和渐进增强的区别</a></li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[天才迈向传奇 | 《硅谷钢铁侠:埃隆·马斯克》]]></title>
      <url>/2018/02/10/%E5%A4%A9%E6%89%8D%E8%BF%88%E5%90%91%E4%BC%A0%E5%A5%87-%E7%A1%85%E8%B0%B7%E9%92%A2%E9%93%81%E4%BE%A0-%E5%9F%83%E9%9A%86%E9%A9%AC%E6%96%AF%E5%85%8B/</url>
      <content type="html"><![CDATA[<p>埃隆·马斯克的名字也许有很多人不熟知，包括未看到这本书的我。可能我们对于硅谷很多传奇名人，听得多的都是比尔盖茨，乔布斯，扎克伯格，但是好像还真没听说过埃隆·马斯克的名字。那么换个词汇，“特斯拉”，相信不少关注极客圈或者喜欢折腾新科技产品的小伙伴，或多或少听过一点吧，而“特斯拉”的创始人兼CEO，正是埃隆·马斯克。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/7324444-83cc79391d1193f7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5179mrE+WWL.jpg"></p>
<blockquote>
<p>埃隆·马斯克是一名风格独具的梦想家，也是眼光独到、一再开创新商业模式的企业家。从PayPal，到特斯拉、Space X、太阳城，他的创业历程中遭遇了无数棘手的事件，但是每一次突破都令全球惊艳。无论钟情于什么领域，他都可以展现出惊人的专注力。44岁的马斯克已经涉足颠覆互联网、 金融、汽车、航空以及能源业。他近乎疯狂的对科技的专注，使他成为目前最成功的连续创业者和科技创业家。 —— 百度百科</p>
</blockquote>
<h3 id="时间最贵"><a href="#时间最贵" class="headerlink" title="时间最贵"></a>时间最贵</h3><p>埃隆·马斯克在创立公司时要求员工节约开发成本，拒绝员工采购价格高昂的汽车零件，却可以花9万美元租一架飞机返自己的办公室。一般人看来，这不“有钱没处花么”，其实不然，处于这种职位的人，时间对他们来说更宝贵，他们可以利用时间来处理更多的事情，创造更多的财富。但对于普通人来说，心中的年头可能是“我是缺钱，但不缺时间”。我觉得背后隐藏的另一个词是效率，不管哪种工作成本，时间也是其中一种。记得曾在书中见到这么一个例子，一位高管不理解公司为何要付出额外的开销给他配置司机，他有自行驾车出行的能力，完全没有必要再付出一个人的工资来请司机。但是反过来，他每天上下班时，多出了一个小时来阅读工作汇报，项目计划，公司虽然多支出了一份薪水，但得到了高管更多的工作回报，于公司更有利。我们不可否认，人类的一生是很短暂的。不管多聪明，多优秀的人，也抵不过时间，逃不了生老病死。还在浪费时间的我们，是不是该想想自己剩下的时间，还有多少盈利呢？</p>
<h3 id="偏执狂梦想家"><a href="#偏执狂梦想家" class="headerlink" title="偏执狂梦想家"></a>偏执狂梦想家</h3><p>梦想每个人都有，就算没有，做个白日梦，还有不会的么。但是能认真思考并实现的，坚持完成的，寥寥无几。而埃隆·马斯克，从天才走向传奇。<br>当然传奇的道路上会有许多荆棘，梦想和野心没有经历挫折的洗礼，注定不够完美。埃隆·马斯克信仰自己的“武士道”精神，情愿切腹，也不愿忍受失败。最后拿柄武士刀成为一件装饰品，因为他战胜了失败。不管是PayPal、特斯拉、SpaceX、太阳城，他都赢了，亲手将自己的梦想一个一个实现。作为一名具有工业专业能力的天才，他相信科技可以改变世界，而现在，他已是硅谷的传奇。</p>
<h3 id="多核并行"><a href="#多核并行" class="headerlink" title="多核并行"></a>多核并行</h3><p>我曾试想着自己创业时的场景，诘问自己能否做好一个项目，运营好一家公司。未读这本书之前，我认为其它创业成功的人也许同我同我一样，在他们创业时，从一而终，至少是第一家公司走上正轨之前，都不会有精力去折腾第二家，第三家公司。而埃隆·马斯克，就像一个多核的CPU，并行处理不同的任务，同时兼顾着PayPal，特斯拉，SpaceX多家公司，而且还没有宕机重启过。越是压力承肩时，越能做出最好的决策，这不疑需要高度的专注力与毕其功于一役的决心。</p>
<h3 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h3><p>我自己本身很喜欢小唐尼的《钢铁侠》系列电影，读完埃隆·马斯克，确实有很多钢铁侠的影子，埃隆·马斯克并不是钢铁侠的原型，但个人自身的魅力，性格特征，偏执成狂，强硬做派等，与唐尼的钢铁侠不谋而合。<br>摒弃掉书中很多我未能理解的技术词汇，我觉得作为平凡的我们，即使没有超高的智商和不凡的能力，也不妨将梦想再放大一些，万一哪天真的见鬼实现了呢。当然圆梦的道路上，你可不一定走得顺畅，但不妨迈出脚去走走看，指不定还能得到上火星居住的机会。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不曾停歇 | “超级个体”]]></title>
      <url>/2018/01/29/%E4%B8%8D%E6%9B%BE%E5%81%9C%E6%AD%87-%E8%B6%85%E7%BA%A7%E4%B8%AA%E4%BD%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“你不努力，谁也给不了你想要的生活。欲带皇冠，必承其重。你想过上自己梦想的生活，就应该选择一条属于自己的道路，并为此付出别人无法企及的努力。”<br>——韦娜 《世界不曾亏欠每一个努力的人》</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/7324444-6365a5939d4a674c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="新知识的快感，让知识瘫痪"><a href="#新知识的快感，让知识瘫痪" class="headerlink" title="新知识的快感，让知识瘫痪"></a>新知识的快感，让知识瘫痪</h3><p>当我们尝试去学习新知识时，会有很多的新鲜感。而相比在旧有知识继续升华沉淀，你会感到越来越枯燥，甚至开始厌恶。的确，旧知识的学习遇到瓶颈，需要花费更多的时间精力来沉淀。而新知识，相当于把玩一件新式物件，调起你喜新厌旧的本性。所以很多人，包括我自己，满足于新知识的快感，学得多但不精，略懂皮毛而不深究。久而久之，知识越来越多，不规整，不成体系，根基不稳，最后受不住顶端压力，以崩塌告终。想要知识大厦牢固，逻辑清晰不混乱，合理地利用大脑储藏就是必经之路。抽出时间精力对旧有知识形成体系沉淀，打好地基，再逐步扩展汲取新知识，添砖加瓦。这样你的知识殿堂才足够牢固，又具扩展性。</p>
<h3 id="成功不是从零开始，而是在其领域中知识能力的积累"><a href="#成功不是从零开始，而是在其领域中知识能力的积累" class="headerlink" title="成功不是从零开始，而是在其领域中知识能力的积累"></a>成功不是从零开始，而是在其领域中知识能力的积累</h3><p>成功不是让你去开创一个你从未接触过的行业，从零开始去做起来，这样你成功的可能性极低。正如我们从小到大的学习生涯，数理化知识的积累，从语数英再到物理，化学，历史，政治等。没有语数英的基础，不会有后面科目的扩展学习。许多人创业当老板，程序员跑去当产品经理，产品经理跑来当投资人，都是利用自己原有的知识和经验，融入到自己新的工作上并取得成功，而不是摒弃掉你之前的果实，重新栽种一颗新的树苗，再拾起浇水驱虫的工作。</p>
<h3 id="白日梦想家"><a href="#白日梦想家" class="headerlink" title="白日梦想家"></a>白日梦想家</h3><p>乐观无疑是好事，但是过于乐观，你的大脑缺乏压力，没有紧迫感，放松了对问题的思考。居安而思危，对危机要有足够的警惕性，做好危机应对的准备，方可让你离梦想更进一步，不至于危机到来时，一脸懵逼。</p>
<h3 id="安全感的奴隶"><a href="#安全感的奴隶" class="headerlink" title="安全感的奴隶"></a>安全感的奴隶</h3><p>熟悉的工作岗位，固定的生活方式。会让我们形成一种安全感，对其依赖。不求改变，不敢尝试，不敢跳出自己的舒适圈，觉得自己的人生足够安逸，日复一日直到退休，似乎你已经看到自己退休的样子。殊不知现在企业的寿命比员工的寿命还要更短，世界500强的企业，寿命也不过30-40年左右。很明显，我们为企业工作到退休的时间可远远不止这点时间。所以只有求变，不断适应社会的步伐，不断学习挑战突破自己，提升自己的软技能，职场竞争能力，方可收获真正的安全感。</p>
<h3 id="什么时候适合陪伴父母亲"><a href="#什么时候适合陪伴父母亲" class="headerlink" title="什么时候适合陪伴父母亲"></a>什么时候适合陪伴父母亲</h3><p>我们总觉得年轻时到大城市打拼，不能常伴父母身旁，特变是中国“百行孝为先”的传统思想，让我们对父母总有一份愧疚。换个角度思考，我们二三十岁时，父母亲的身体都还健壮，生活可以自理，甚至还未到退休年龄，不至于丧失生存能力。而到父母亲七十八十岁左右，年纪比较大了，身体病痛也随之增加，这个时候，我们大概四五十岁左右，作为子女的我们在这个阶段需要花费大量的时间、精力、财力去照顾父母。那么你想在四五十岁阶段具备充裕的时间，财务自由，时间自由，靠的是什么，靠的不就是在你年轻的时候去拼搏去奋斗，到大城市去打拼换取而来，自己四五十岁时的时间及财富么。<br>所以，趁年轻，多出去浪浪。</p>
<h3 id="适者生存"><a href="#适者生存" class="headerlink" title="适者生存"></a>适者生存</h3><p>这个时代什么样的人会生存下来，智者？强者？都不是，这个时代，不是“智者生存”，也不是“强者生存”，而是“适者生存”，是能够适应自己的生存环境，才不至于被淘汰在任何一个时代的个体。</p>
<h3 id="乐高式能力组合"><a href="#乐高式能力组合" class="headerlink" title="乐高式能力组合"></a>乐高式能力组合</h3><p>单一的能力并不能使你更强大，在这个快节奏的时代，每个行业的知识都有可能被取代替换，科技带来的行业冲击，生活方式的改变，没有谁可以保证你所在的行业，你的工作不会被其它人或机器所替代。<br>所谓技不压身，多一项能力，多一种技术，就意味着你比别人多一份机会，多一份优势。不断学习将单一的能力拼接合成你自己的软实力。</p>
<h3 id="结尾-——-成为“超级个体”"><a href="#结尾-——-成为“超级个体”" class="headerlink" title="结尾 —— 成为“超级个体”"></a>结尾 —— 成为“超级个体”</h3><p>每个人都有机会依靠自己的努力和才华成功。<br>这个时代，有才而不成功的几率变小，缺的是怕你没有才华还不努力。</p>
]]></content>
      
        <categories>
            
            <category> 日更文集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日更文集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你有我的知识焦虑么？]]></title>
      <url>/2018/01/28/%E4%BD%A0%E6%9C%89%E6%88%91%E7%9A%84%E7%9F%A5%E8%AF%86%E7%84%A6%E8%99%91%E4%B9%88/</url>
      <content type="html"><![CDATA[<h3 id="”知识焦虑“"><a href="#”知识焦虑“" class="headerlink" title="”知识焦虑“"></a>”知识焦虑“</h3><blockquote>
<p>在信息爆炸时代，人们对信息的吸收是呈平方数增长，但面对如此大量的信息，人类的思维模式远没有高速到接受自如的阶段。由此造成一系列的自我强迫和紧张。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/7324444-d3c7f681ba77072a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>我相信我们现处的这个时代，很多人跟我一样，都有一份“知识焦虑”，对自己未知的信息和知识，给予了自己的自我强迫与紧张。<br>面对自己的不努力，懒惰懈怠，都会有或多或少的一份不安全感与恨其不争的无奈。<br>懒散过后，又开始信誓旦旦地制定学习计划，希望通过学习课程，读书来让自己的内心变得充实些。</p>
<p>现实中，如果你有个有钱的老爸，让你衣食无忧，光鲜亮丽，些许你会少点焦虑。<br>可惜大多数人如你我，并没有这样足以啃老的臂膀。<br>唯有步履匆匆，用兢兢业业的工作和不敢停歇的学习，来让自己拥有一份份看上去不那么不堪的安全感。<br>因为明白，不学习不努力就意味着不拼爹，不拼高考，你已经没有什么可以跟他们比拼的了。</p>
<p>但是，你的努力真的对了么？？？<br>你在背的雅思英语，你在看的MBA，你在看的成功学。真的适合你么？？？</p>
<h3 id="改变你的思维认知"><a href="#改变你的思维认知" class="headerlink" title="改变你的思维认知"></a>改变你的思维认知</h3><blockquote>
<p>“立场，体验，意见” —— “目标，方法，行动”</p>
</blockquote>
<p>思维方式的转变，我们每一个人的大脑里总会产生各种天马行空的想法或创意，每个人有不同的个人体验和对事物的意见。但是真正落实实践自己想法，行动起来的却少之又少。</p>
<p>投资界有这么个故事，投资人考核一家初创公司，不是看公司第一把手，而是看公司的第二把手。因为公司第一把手大多是公司创意想法的制造者，而公司第二把手则是执行者，如果执行者能力足够胜任，那么证明这家公司可行。因为第一把手已经成功地推销了自己的想法，并且得到其它牛人的认可，并且确保可以正确有效地执行。那么公司可以成功地运营起来。<br>初创公司空有想法创意，不能有效执行实施，终究是空谈。</p>
<p>我们的思维方式来自从小的生活环境，父母，学校，家庭的耳濡目染。<br>更多的是来自父母，“富爸爸，穷爸爸”的思维方式，把父辈的那一套思维方式传递给了我们。</p>
<p>随着“阶层危机”的到来，让社会阶层越来越固化，平民阶层与上层阶层的界限，除了资源的比拼，更深层次地是思维认知的差距。“富爸爸，穷爸爸”不是现金存款房车的比拼，而是比拼贫富的思维认知。<br>“贫穷限制了你的思维”这并不是一句调侃的话，而是鲜血淋漓的写照。</p>
<p>想改变你所处的阶层，想从平民阶层晋升到上层阶层，唯有从改变你的思维认知开始，让你的思维完成从“立场，体验，意见”到“目标，方法，行动”转变。使你的思维认知不再处于贫穷。</p>
<h3 id="“体验型消费”"><a href="#“体验型消费”" class="headerlink" title="“体验型消费”"></a>“体验型消费”</h3><p>如果你没有知识，出去旅游看见美丽的风景，你只会说“哇靠，太美了”。<br>而有知识的人，当你看到夕阳余晖… 你的脑海浮现的是：“落霞与孤鹜齐飞，秋水共长天一色。” 而不是：“卧槽，好多鸟，好多鸟，卧槽，真TM太好看了！”<br>没有文化积淀的旅行，到哪不过是在你的相机中多留几张照片而已。<br>作为一个俗人，欣赏它的美并不需要任何的门槛。但是没有文化知识的积淀，你就只是在走马观花，到此一游。</p>
<h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><p>知识量爆发式增长，知识付费的兴起，各种在线音视频课程，公众号课堂雨后春笋般增长，人们获取知识的成本越来越低。但与之对比是人们的时间却被剧烈分割，时间一点一点被碎片化。不再拥有像学校课堂里，让你整整45分钟坐在课桌前，学完一学期的课程。<br>知识量与学习时间成反比增长，传统的、系统化的学习方法已经不再有效。我们所处的时代，有太多的诱惑纷扰我们的集中力，很多人时不时地去看手机，一刷个朋友圈，一看个头条微博，大半的时间就这样不翼而飞。强迫你拿着本书从头看到尾，这样耗时，又学不牢，估计看完了也就完了，又剩下多少是你自己的。</p>
<p>因此，如何利用有限的时间来完成自己的知识储备，对当下的我们尤为重要。</p>
<h4 id="1-20-的时间学习80-的知识"><a href="#1-20-的时间学习80-的知识" class="headerlink" title="1. 20%的时间学习80%的知识"></a>1. 20%的时间学习80%的知识</h4><p>80%的知识并不难学会，但是剩下20%的进阶知识往往需要花费更多的时间精力才可并入囊中。鉴于投入与产出成正比，20%的时间换取80%的知识显然更符合当下，学习过后通过转述或者读书笔记加深自己的理解和记忆，变成自己的知识储备。</p>
<h4 id="2-找一个牛人，跟着他学"><a href="#2-找一个牛人，跟着他学" class="headerlink" title="2. 找一个牛人，跟着他学"></a>2. 找一个牛人，跟着他学</h4><p>自己摸索前行，总有很多荆棘。避免少走弯路，我们缺少一个领路人。<br>而行业/知识领域界的大牛，他就是我们想要到达的终点，也是我们学习的参考对象。跟着他学，我们将知道自己所要学习哪些知识，朝哪个方向努力，有哪些坑需要跳过。有人给你指明了前方的路，你更容易到达，这样焦虑负担相对小了些。</p>
<h4 id="3-先搭建概念大厦，再具体学习"><a href="#3-先搭建概念大厦，再具体学习" class="headerlink" title="3. 先搭建概念大厦，再具体学习"></a>3. 先搭建概念大厦，再具体学习</h4><p>我们对于未知的知识或多或少都有抗拒，如果一开始就抗拒，不利于你去接受认可它。<br>学习新知识，可以先了解新知识各种概念名词，再去细化具体每个概念的基础学习。正如我们手中拿起一本未读过的书，先翻阅目录，了解每个章节的概念名词，再去翻阅具体每个章节的知识。减少来自我们自身的抗拒，并在脑海中构建起新知识的骨架，再一点点拼积木完成学习积累。</p>
<hr>
<p>从自身做出改变，总是一件很难很难的事情。<br>但是一点点的不同，都是对自身努力的一次美好见证。<br>愿你我终有所得。</p>
]]></content>
      
        <categories>
            
            <category> 日更文集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日更文集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac终端配置，DIY你的Terminal（iTerm2 + Oh-My-Zsh）]]></title>
      <url>/2018/01/10/Mac%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE%EF%BC%8CDIY%E4%BD%A0%E7%9A%84Terminal%EF%BC%88iTerm2-Oh-My-Zsh%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>使用mac osx一年以来，自带的Terminal终端一直都是白底黑字，食之无味，越来越缺乏新鲜感，怎么也得想个法子来刺激下眼球。<br>不然花那么多大洋买你回来是要哪般，难道真是为来学习工作？？？<br>怎么可能，不装逼谁TM买苹果。。。好吧，其实为来工作学习，装逼纯属业余。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/7324444-f4cab57f73b24da9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终效果图"></p>
<p>完成配置后的终端具备功能：</p>
<ol>
<li>语法高亮</li>
<li>命令行tab补全</li>
<li>自动提示符</li>
<li>显示Git仓库状态等功能</li>
<li>⌘+r 快速清空代码面板，跟终端输入clear一样的效果</li>
</ol>
<hr>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-下载iTerm2"><a href="#1-下载iTerm2" class="headerlink" title="1. 下载iTerm2"></a>1. 下载<a href="http://www.iterm2.com/" target="_blank" rel="external">iTerm2</a></h3><h3 id="2-解压后安装iTerm2并打开"><a href="#2-解压后安装iTerm2并打开" class="headerlink" title="2. 解压后安装iTerm2并打开"></a>2. 解压后安装iTerm2并打开</h3><ol>
<li>iTerm2 -&gt; Make iTerm2 Default Term<br><img src="http://upload-images.jianshu.io/upload_images/7324444-b3898059dc0f629d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将iTerm2设置为默认终端"></li>
<li>打开偏好设置preference，选中Keys，勾选Hotkey下的Show/hide iTerm2 with a system-wide hotkey，将热键设置为 ⌘+. ，这样你就可以通过 ⌘+. 全局热键来打开或关闭iTerm2窗口，非常方便<br><img src="http://upload-images.jianshu.io/upload_images/7324444-57399044e86283ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置Hotkey"><h3 id="3-配色方案"><a href="#3-配色方案" class="headerlink" title="3. 配色方案"></a>3. 配色方案</h3>选用 <a href="http://ethanschoonover.com/solarized" target="_blank" rel="external">solarized</a>，下载解压，然后打开 iTerm2 下的偏好设置 preference ，点开 profiles 下的colors 选项，点击右下角的 Color Presets 选项，选择import ，导入解压到的 solarized 文件下的Solarized Dark.itermcolors<br><img src="http://upload-images.jianshu.io/upload_images/7324444-5790a41170cd8d57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入配色方案"></li>
</ol>
<h3 id="4-安装oh-my-zsh"><a href="#4-安装oh-my-zsh" class="headerlink" title="4. 安装oh-my-zsh"></a>4. 安装oh-my-zsh</h3><p>github：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a><br>官方提供 curl 和 wget 两种安装方式<br>curl 安装：<br><code>sh -c ``&quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code><br>wget安装：<br><code>sh -c ``&quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></p>
<h3 id="5-配置主题"><a href="#5-配置主题" class="headerlink" title="5. 配置主题"></a>5. 配置主题</h3><p>安装oh-my-zsh成功后</p>
<ol>
<li>用 vim 编辑隐藏文件 .zshrc， 终端输入<code>vi ~/.zshrc</code><br><code>ZSH_THEME=&quot;agnoster&quot;</code> 将zsh主题修改为“agnoster”</li>
<li>应用“agnoster”主题需要特殊的字体支持，否则会出现乱码情况，<br>使用 <a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf" target="_blank" rel="external">Meslo</a> 字体，点开链接点击 view raw 下载字体</li>
<li>安装字体到系统字体册</li>
<li><p>在iTerm2中应用字体 iTerm -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font）<br><img src="http://upload-images.jianshu.io/upload_images/7324444-a52417111fc3018a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iTerm2应用字体"></p>
</li>
<li><p>重新打开iTerm2窗口（或新打开一个iTerm2窗口）即可以看到字体效果</p>
</li>
</ol>
<h3 id="6-自动提示与命令补全"><a href="#6-自动提示与命令补全" class="headerlink" title="6. 自动提示与命令补全"></a>6. 自动提示与命令补全</h3><p>比iTerm2自带的更强大的命令提示与补全</p>
<ol>
<li><p>克隆仓库到本地 ~/.oh-my-zsh/custom/plugins 路径下<br><code>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></p>
</li>
<li><p>用 vim 编辑 .zshrc 文件，找到插件设置命令，默认是 <code>plugins=(git)</code> ，我们把它修改为<code>plugins=(zsh-autosuggestions git)</code></p>
</li>
</ol>
<p>PS：当你重新打开终端时可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些：</p>
<ol>
<li><code>cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code></li>
<li>用 vim 编辑 zsh-autosuggestions.zsh 文件，修改<code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=10&#39;</code></li>
</ol>
<h3 id="7-语法高亮效果"><a href="#7-语法高亮效果" class="headerlink" title="7. 语法高亮效果"></a>7. 语法高亮效果</h3><ol>
<li>使用homebrew包管理工具安装 zsh-syntax-highlighting 插件<br><code>brew install zsh-syntax-highlighting</code><br>如果电脑上还没有安装homebrew，请先安装homebrew<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>
<li>配置.zshrc文件，插入一行<br><code>source /xxx/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code><br>(注意： /xxx/ 代表.zshrc所在的路径)</li>
<li>加载.zshrc配置<br><code>source ~/.zshrc</code></li>
<li>重新打开iTerm2窗口（或新打开一个iTerm2窗口）即可以看到效果</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>iTerm2 默认使用dash改用zsh解决方法：<code>chsh -s /bin/zsh</code></li>
<li>iTerm2 zsh切换回原来的dash：<code>chsh -s /bin/bash</code></li>
<li>卸载<code>oh my zsh</code>，在命令行输入：<code>uninstall_oh_my_zsh</code></li>
<li>路径前缀的XX@XX太长，缩短问题：<br>编辑<code>~/.oh-my-zsh/themes/agnoster.zsh-theme</code>主体文件，将里面的<code>build_prompt</code>下的<code>prompt_context</code>字段在前面加<code>#</code>注释掉即可</li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 工具类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具类 </tag>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序爬坑日记]]></title>
      <url>/2017/12/08/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%88%AC%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>新公司上手小程序。<br>30天，从入门到现在，还没放弃。。。</p>
<p>虽然小程序发布出来快一年了，爬坑的兄弟们大多把坑都踩平了。而我一直停留在“Hello World”的学习阶段。<br>一来没项目，只有项目才是实践学习的根本；<br>二来刚出来，总是有很多坑。爬坑总是痛并快乐着。</p>
<p>再多的借口，产品项目需求拍在桌前，都得缴械投降。<br>不要怂撸起袖子，就是干。</p>
<p><img src="http://wx4.sinaimg.cn/mw690/72ec38a9gy1fm94qk59f7j21kw0yt42o.jpg" alt="微信小程序"></p>
<h3 id="初识小程序"><a href="#初识小程序" class="headerlink" title="初识小程序"></a>初识小程序</h3><p>微信推出小程序，想要实现即开即用，用完即走的用户体验。免去APP下载安装繁琐的流程。听起来像谷歌推出的PWA，不过PWA普及到国内还有段时间。而小程序借助于微信的用户群体，植入成本低，容易被用户接受。</p>
<p>小程序的代码风格跟Vue其实挺像，对于习惯Vue开发模式的同学，上手并没有太大的问题。</p>
<p>小程序不支持前端主流框架，如Vue，Angular，React，jQuery等，而且小程序有自己的一套视图容器(Dom)的写法，跟平常我们在web上写HTML不一样。不过CSS3那些变化不大。虽然文件名改成了(.wxss)</p>
<p>本司项目，使用webpack做打包工具，将代码编译成符合小程序的代码目录规范，采用wechat-mina-loader插件，实际开发起来跟在Vue下开发习惯一样。<br>babel完成ES6转ES5，sass编译，压缩转化等工作都放到webpack中去做。</p>
<h3 id="不支持dom操作"><a href="#不支持dom操作" class="headerlink" title="不支持dom操作"></a>不支持dom操作</h3><p>小程序脚本内不能使用window,document对象，所以无法操作dom。如果想操作节点，可用<code>wx.createSelectorQuery()</code></p>
<p>另外数据驱动的开发模式，跟Vue相同，只是写法换了（vue: v-if，小程序: wx:if）</p>
<h3 id="rpx布局"><a href="#rpx布局" class="headerlink" title="rpx布局"></a>rpx布局</h3><blockquote>
<p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p>
</blockquote>
<p>设计师做设计图以iPhone6作为设计稿基准就可以，基本上可以用rpx替换px，不过在一些表单或者提示页面，使用设计稿上的rpx会让小屏幕手机看着尺寸略小，提示页面可参照weui用px来实现</p>
<h3 id="路由层级"><a href="#路由层级" class="headerlink" title="路由层级"></a>路由层级</h3><ul>
<li><code>wx.navigateTo(OBJECT)</code><br>保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面</li>
<li><code>wx.redirctTo(OBJECT)</code><br>关闭当前页面，跳转到应用内的某个页面</li>
<li><code>wx.switchTab(OBJECT)</code><br>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</li>
<li><code>wx.reLaunch(OBJECT)</code><br>关闭所有页面，打开到应用内的某个页面</li>
</ul>
<p>小程序只能同时打开打开5个页面，当打开5个页面后，wx.navigateTo不能正常打开新页面，请避免多层级的交互方式，或者使用wx.redirctTo重定向</p>
<h3 id="tabBar底部导航栏"><a href="#tabBar底部导航栏" class="headerlink" title="tabBar底部导航栏"></a>tabBar底部导航栏</h3><p>tabBar是一个数组。配置最少2个，最多5个，tab数组按顺序排序</p>
<h3 id="页面滚动到顶部"><a href="#页面滚动到顶部" class="headerlink" title="页面滚动到顶部"></a>页面滚动到顶部</h3><p>基础库1.4.0支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wx.pageScrollTo(&#123;</div><div class="line">  scrollTop: 0   //滚动到页面的目标位置（单位px）</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="图片资源，CSS中的背景图片"><a href="#图片资源，CSS中的背景图片" class="headerlink" title="图片资源，CSS中的背景图片"></a>图片资源，CSS中的背景图片</h3><p>CSS中无法使用本地资源(开发目录中)的图片作为background-image。可以使用网络图片资源，或base64，或者使用image标签。tabBar的icon资源可使用本地资源</p>
<h3 id="unionid与openid的区别"><a href="#unionid与openid的区别" class="headerlink" title="unionid与openid的区别"></a>unionid与openid的区别</h3><p>每个用户在每个小程序里面都有唯一的openid，如果想在多个公众号，小程序里面共享用户信息，统一识别该用户，则需要用到unionid。为了获取uniond则需要注册微信开放平台，将需要共享的小程序，公众号进行绑定（不超过10个，超过10个还要申请认证称为第三发平台）。</p>
<h3 id="textarea在滚动页面中的bug"><a href="#textarea在滚动页面中的bug" class="headerlink" title="textarea在滚动页面中的bug"></a>textarea在滚动页面中的bug</h3><p>textarea,map等组件是由客户端创建的原生组件，它的层级是最高的。如果有遇到定位元素的话。永远在最上面，盖不住。</p>
<ul>
<li>请勿在 scroll-view、swiper、picker-view、movable-view 中使用 textarea 组件</li>
<li>CSS动画对textarea无效</li>
</ul>
<p>项目场景：页面底部固定了一个按钮（position:fixed), 页面滚动时，textarea总是在按钮上面，点击按钮就点到了textarea</p>
<h3 id="可以设置网络请求的超时时间"><a href="#可以设置网络请求的超时时间" class="headerlink" title="可以设置网络请求的超时时间"></a>可以设置网络请求的超时时间</h3><p>app.js中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;networkTimeout&quot;: &#123;</div><div class="line">  &quot;request&quot;: 10000 // 10秒</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="window配置"><a href="#window配置" class="headerlink" title="window配置"></a>window配置</h3><p>navigationBarTextStyle 导航栏标题颜色仅支持black/white<br>状态栏，导航条，标题，窗口背景色支持纯色，不支持渐变色</p>
<h3 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h3><ul>
<li><p>url中添加参数，<br>如<code>url?a=1&amp;b=2</code>, <code>onLoad(options) options.query.a, options.query.b</code>可获取到</p>
</li>
<li><p>扫描小程序码进页面，如果想获取小程序码url中所带的参数，可通过options.scene获取，不过需要对二维码中的scene值进行转换decodeURIComponent(options.scene), 调试阶段可以使用开发工具的条件编译自定义参数 scene=xxxx 进行模拟，开发工具模拟时的 scene 的参数值需要进行 urlencode (启动参数：scene=n%3D1001) 实际为scene=n=1001，参数n=1001</p>
</li>
</ul>
<h3 id="image标签图片"><a href="#image标签图片" class="headerlink" title="image标签图片"></a>image标签图片</h3><p>image默认width: 300px, height: 225px, lazy-load懒加载只对page与scroll-view下的image有效<br>mode缩放模式，mode=”widthFix”比较常用(宽度不变，高度自动变化，保持原图宽高比不变)</p>
<h3 id="小程序可以监听小程序的关闭后，但是无法阻断"><a href="#小程序可以监听小程序的关闭后，但是无法阻断" class="headerlink" title="小程序可以监听小程序的关闭后，但是无法阻断"></a>小程序可以监听小程序的关闭后，但是无法阻断</h3><p>场景：想在小程序退出时弹出个提示框，并阻止关闭（暂时无法实现）</p>
<h3 id="小程序码"><a href="#小程序码" class="headerlink" title="小程序码"></a>小程序码</h3><p>小程序码(葵花码)有几种方式，只有发布过小程序才可正常显示小程序码</p>
<h3 id="小程序第一次提交的审核时间较后面的长"><a href="#小程序第一次提交的审核时间较后面的长" class="headerlink" title="小程序第一次提交的审核时间较后面的长"></a>小程序第一次提交的审核时间较后面的长</h3><p>第一次提交审核一般1天到2天。所以为了能准点上线，建议先上一次临时的版本(放一个提示页面都可以)，过了第一次审核发布再说。日常提交审核，2-3小时就可以。</p>
<h3 id="频繁地setData会造成性能问题"><a href="#频繁地setData会造成性能问题" class="headerlink" title="频繁地setData会造成性能问题"></a>频繁地setData会造成性能问题</h3><p>频繁地setData操作，会出现卡顿，操作反馈延迟严重，甚至有可能闪退。</p>
<blockquote>
<p>场景：原计划用countUp做数字动画，原理就是频繁地改变数字值，setData操作，渲染到模版上。</p>
</blockquote>
<h3 id="ES6转ES5，小程序检测目录中的js文件-极少"><a href="#ES6转ES5，小程序检测目录中的js文件-极少" class="headerlink" title="ES6转ES5，小程序检测目录中的js文件(极少)"></a>ES6转ES5，小程序检测目录中的js文件(极少)</h3><p>项目中用了webpack进行ES6转ES5，所以关闭了微信小程序的ES6转ES5功能。这个坑就比较隐蔽了，测试的时候在5S真机上报js错误，发现有个js(使用了ES6，没有转ES5)文件没有使用，微信小程序会去检测目录中的js文件，如果关闭了微信自带的ES6转ES5，检测到目录中js文件不兼容ES5，就报错。这个Bug只在5S真机里出现过，5C都正常。如果开启了微信开发工具中的ES6转ES5，则会自动帮你完成转化工作，不会出现类似问题。</p>
<p>分享些小程序开发比较常用的第三方库</p>
<ul>
<li>weui-wxss(小程序版的weui样式库) Github: <a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="external">https://github.com/Tencent/weui-wxss</a></li>
<li>wepy(小程序组件化框架) Github: <a href="https://github.com/Tencent/wepy" target="_blank" rel="external">https://github.com/Tencent/wepy</a></li>
<li>skyvow/vux(小程序组件库) Github: <a href="https://github.com/skyvow/wux" target="_blank" rel="external">https://github.com/skyvow/wux</a></li>
<li>xiaolin3303/wx-charts(小程序图标) Github: <a href="https://github.com/xiaolin3303/wx-charts" target="_blank" rel="external">https://github.com/xiaolin3303/wx-charts</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>  本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm常用命令整理]]></title>
      <url>/2017/10/04/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>npm是一个NodeJS包管理跟分发工具，已经成为了非官方的发布node模块（包）的标准。<br>它可以帮助我们解决代码部署上的一些问题，将开发者从繁琐的包管理工作中(版本、依赖等)解放出来，更加专注于功能上的开发，大大提升我们的工作效率。</p>
<p>以下为日常应用中收集整理的npm常用命令:</p>
<h4 id="初始化-引导你创建一个package-json文件"><a href="#初始化-引导你创建一个package-json文件" class="headerlink" title="初始化 引导你创建一个package.json文件"></a>初始化 引导你创建一个package.json文件</h4><p><code>npm init</code></p>
<h4 id="查看package-json文件内容格式"><a href="#查看package-json文件内容格式" class="headerlink" title="查看package.json文件内容格式"></a>查看package.json文件内容格式</h4><p><code>npm help json</code></p>
<h4 id="安装模块-install-可简写为-i"><a href="#安装模块-install-可简写为-i" class="headerlink" title="安装模块 (install 可简写为 i)"></a>安装模块 (install 可简写为 i)</h4><p><code>npm install moduleName</code><br>(安装到当前目录，仅在当前目录可用)</p>
<h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p><code>npm install moduleName -g</code><br>(全局安装，可在所有目录下使用)</p>
<h4 id="安装package-json中的模块"><a href="#安装package-json中的模块" class="headerlink" title="安装package.json中的模块"></a>安装package.json中的模块</h4><p><code>npm install</code><br>(目录中存在package.json，将安装package.json配置号的版本模块，install后面可不带模块名)</p>
<h4 id="安装到开发环境依赖"><a href="#安装到开发环境依赖" class="headerlink" title="安装到开发环境依赖"></a>安装到开发环境依赖</h4><p><code>npm install moduleName --save-dev</code><br>(例如一些预编译包，如sass-loader,less-loader等，仅在开发环境中会用到)</p>
<h4 id="安装到生成环境依赖"><a href="#安装到生成环境依赖" class="headerlink" title="安装到生成环境依赖"></a>安装到生成环境依赖</h4><p><code>npm install moduleName --save</code></p>
<h4 id="卸载模块-uninstall-可简写-un"><a href="#卸载模块-uninstall-可简写-un" class="headerlink" title="卸载模块 (uninstall 可简写 un)"></a>卸载模块 (uninstall 可简写 un)</h4><p><code>npm uninstall moduleName</code></p>
<h4 id="重新安装模块"><a href="#重新安装模块" class="headerlink" title="重新安装模块"></a>重新安装模块</h4><p><code>npm rebuild moduleName</code></p>
<h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><p><code>npm help</code></p>
<h4 id="检查模块是否已经过时"><a href="#检查模块是否已经过时" class="headerlink" title="检查模块是否已经过时"></a>检查模块是否已经过时</h4><p><code>npm outdated</code><br>（列出所有有新版本的模块，方便对包的更新）</p>
<h4 id="检查npm线上是否存在该模块"><a href="#检查npm线上是否存在该模块" class="headerlink" title="检查npm线上是否存在该模块"></a>检查npm线上是否存在该模块</h4><p><code>npm search moduleName</code><br>（当你想要发布自己写的包时，需查看线上是否有同名的已发布的包）</p>
<h4 id="查看当前目录模块的安装路径"><a href="#查看当前目录模块的安装路径" class="headerlink" title="查看当前目录模块的安装路径"></a>查看当前目录模块的安装路径</h4><p><code>npm root</code></p>
<h4 id="查看全局安装模块的安装路径"><a href="#查看全局安装模块的安装路径" class="headerlink" title="查看全局安装模块的安装路径"></a>查看全局安装模块的安装路径</h4><p><code>npm root -g</code></p>
<h4 id="查看npm安装的版本"><a href="#查看npm安装的版本" class="headerlink" title="查看npm安装的版本"></a>查看npm安装的版本</h4><p><code>npm -v</code></p>
<h4 id="更新本机npm的版本"><a href="#更新本机npm的版本" class="headerlink" title="更新本机npm的版本"></a>更新本机npm的版本</h4><p><code>npm install -g</code></p>
<p>更多npm命令请查看<a href="https://docs.npmjs.com/" target="_blank" rel="external">NPM官方文档</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[preventDefault,stopPropagation,return false三者的区别]]></title>
      <url>/2017/08/31/preventDefault-stopPropagation-return-false%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>逛帖子的时候看到道友发的前端面试题，</p>
<blockquote>
<p>preventDefault(), stopPropagation(), return false三者的区别</p>
</blockquote>
<p>这三者的使用想必大家并不陌生，但是细想之下还是有可究之处。</p>
<h3 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault()"></a>preventDefault()</h3><p>阻止元素在浏览器中的默认行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a id=&quot;link&quot; href=&quot;http://wuliv.com&quot;&gt;网站&lt;/a&gt;</div><div class="line">$(&apos;#link&apos;).click(function(event)&#123;</div><div class="line">    event.preventDefault(); // 阻止了a链接href的访问或跳转</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="stopPropagation"><a href="#stopPropagation" class="headerlink" title="stopPropagation()"></a>stopPropagation()</h3><p>事件冒泡：当一个元素上的事件被触发时，比如鼠标点击了一个按钮，同样的事件将会在该按钮元素的所有父级／祖先元素上触发。这一个过程就被称为事件冒泡。它是由子级元素先触发，父级元素后触发，由内而外（由下往上）的一个流程。与之顺序相反的是事件捕获。  </p>
<blockquote>
<p>事件捕获：父级元素先触发，子级元素后触发，在此仅做了解。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;inner&quot;&gt;</div><div class="line">    &lt;p&gt;事件冒泡例子&lt;/p&gt;</div><div class="line">    &lt;button id=&quot;btn&quot;&gt;我要弹个框&lt;/button&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">$(&apos;#btn&apos;).click(function(event)&#123;</div><div class="line">  event.stopPropagation(); // 阻止了事件冒泡，不会触发&quot;#inner, body&quot;的点击事件  </div><div class="line">  console.log(&apos;#btn&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;#inner&apos;).click(function(event)&#123;</div><div class="line">    // #btn 阻止了冒泡，这里不会执行</div><div class="line">    // 如果不使用stopPropagation, 当#btn点击时，这里也会执行</div><div class="line">    console.log(&apos;#inner&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;body&apos;).click(function(event)&#123;</div><div class="line">    // #btn 阻止了冒泡，.btn点击不会影响到我</div><div class="line">    // 如果不使用stopPropagation, 当#btn点击时，这里也会执行</div><div class="line">    console.log(&apos;body&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 使用了stopPropagation()输出</div><div class="line">&apos;#btn&apos;</div><div class="line"></div><div class="line">// 不使用stopPropagation()输出</div><div class="line">&apos;#btn&apos;</div><div class="line">&apos;#inner&apos;</div><div class="line">&apos;body&apos;</div></pre></td></tr></table></figure>
<h3 id="stopImmediatePropagation"><a href="#stopImmediatePropagation" class="headerlink" title="stopImmediatePropagation()"></a>stopImmediatePropagation()</h3><p>阻止对象绑定的剩余的事件处理函数方法的执行，并阻止当前事件的冒泡。<br>可以理解为stopImmediatePropagation是stopPropagation的升级版，除了阻止冒泡，还能阻止结束掉当前对象未执行的其它绑定事件方法。  </p>
<blockquote>
<p>jQuery中一个对象可以绑定多个事件方法，执行顺序会按照绑定的先后顺序来执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;inner&quot;&gt;</div><div class="line">        &lt;p&gt;stopImmediatePropagation()例子&lt;/p&gt;</div><div class="line">        &lt;button id=&quot;btn&quot;&gt;按钮&lt;/btn&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">$(&apos;body&apos;).click(function(event)&#123;</div><div class="line">    // body 点击</div><div class="line">    console.log(&apos;body&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(&apos;#inner&apos;).click(function(event)&#123;</div><div class="line">    // #inner 点击</div><div class="line">    console.log(&apos;#inner&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;#btn&apos;).click(function(event)&#123;</div><div class="line">    // 第一个#btn点击</div><div class="line">    e.stopImmediatePropagation();</div><div class="line">    console.log(&apos;#btn 1&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;#btn&apos;).click(function(event)&#123;</div><div class="line">    // 第二个#btn点击</div><div class="line">    console.log(&apos;#btn 2&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 最终输出</div><div class="line">&apos;#btn 1&apos; // (因为stopImmediatePropagation阻止了#btn绑定的剩余未执行的事件方法，并且阻止了冒泡)</div><div class="line"></div><div class="line">// 如果不使用stopImmediatePropagation， 将输出</div><div class="line">&apos;#btn 1&apos;</div><div class="line">&apos;#btn 2&apos;</div><div class="line">&apos;#inner&apos;</div><div class="line">&apos;body&apos;</div><div class="line">同个对象执行顺序按绑定顺序执行，冒泡则由内向外执行</div></pre></td></tr></table></figure>
<h3 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h3><p>“return false” 相信不少同学会用来阻止元素在浏览器中的默认行为，<br>拿它当preventDefault()使用，但其实“return false”做的事情不仅仅只是阻止默认行为</p>
<p>当调用“return false”时，它执行了以下三件事情</p>
<blockquote>
<ol>
<li>event.preventDefault()</li>
<li>event.stopPropagation()</li>
<li>停止回调函数执行并立即返回</li>
</ol>
</blockquote>
<p>1，2点还好理解，那么第3点是怎么回事？<br>return语句会终止函数的执行并返回函数的值。所以不管是否返回false或是其它值，return语句后面的代码都不会执行。而返回false，使它具备了preventDefault和stropPropagation的功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&apos;a&apos;).click(function()&#123;</div><div class="line">    return false; // return false直接返回了，并不会执行alert</div><div class="line">    alert(&apos;我没有被弹出来&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// preventDefault 和 stopPropagation 并不会阻止回调函数的执行</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很多jQuery教程在代码演示中用“return false”来阻止执行浏览器的默认行为。<br>久而久之，很多同学习惯滥用“return false”来代替preventDefault</p>
<p>大多数情况下，我们仅仅是想要它执行跟preventDefault的功能而已，但它却自作主张地帮你执行了另外两步操作。<br>比较好的编程习惯是，需要用到该事件方法再去调用，否则应该避免冗余事件的执行。<br>就像prevnetDefault完成它该有的工作，并不会阻止父节点继续处理事件，使得代码更加灵活，更易于维护。</p>
<p>日常开发中还是要慎用“return false”，除非你同时需要preventDefault和stopPropagation，并且确定你的回调函数执行完成后调用，那么你可以使用“return false”，否则还是用preventDefault 或 stopPropagation 更好些。</p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
<p>参考文章：<a href="http://www.cnblogs.com/dannyxie/p/5642727.html" target="_blank" rel="external">《preventDefault()、stopPropagation()、return false 之间的区别》</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP中GET与POST的区别 99%的错误认识]]></title>
      <url>/2017/08/27/HTTP%E4%B8%ADGET%E4%B8%8EPOST%E7%9A%84%E5%8C%BA%E5%88%AB-99-%E7%9A%84%E9%94%99%E8%AF%AF%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>本篇文章分两部分，第一部分可以列为初为新人的装逼失败模式，第二部分列为修炼低调模式。<br>装逼失败模式：99%的人对GET和POST的认识<br>修炼低调模式：1%不知道的进阶认识</p>
<p>GET和POST，在我们日常WEB开发中，是最常用的数据传输方式。面试中我们也经常会遇到。<br>一般我们在浏览器输入一个网址URL访问网站都是GET方式请求；<br>在HTML FROM表单中，可以通过设置method指定提交方式为GET或者POST方式，默认为GET提交方式</p>
<p>HTTP定义了与服务器交互的不同方法，其中最基本的四种：GET，POST，PUT，DELETE，HEAD；<br>其中GET和HEAD被称为安全方法，因为使用GET和HEAD的HTTP请求不会产生什么动作。不会产生动作意味着GET和HEAD的HTTP请求不会在服务器上产生任何结果。但是安全方法并不是什么动作都不产生，这里的安全方法仅指不会修改信息。</p>
<p>GET和POST我们比较常用，其它几种实际应用比较少用到，在此仅作了解。</p>
<hr>
<h3 id="99-的人所认为的GET和POST"><a href="#99-的人所认为的GET和POST" class="headerlink" title="99%的人所认为的GET和POST"></a>99%的人所认为的GET和POST</h3><h4 id="1-传输方式（自我理解“显示方式”）"><a href="#1-传输方式（自我理解“显示方式”）" class="headerlink" title="1. 传输方式（自我理解“显示方式”）"></a>1. 传输方式（自我理解“显示方式”）</h4><p>GET请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数之间以&amp;连接，<br>如<code>&quot;http://www.xxx.com/product?type=shoe&amp;price=100&amp;sex=male&quot;</code><br>数据格式有以下注意点：</p>
<ol>
<li>如果数据是英文字母/数字，原样发送；</li>
<li>如果是空格，转换为+；</li>
<li>如果是中文或其他字符，则把数据用Base64加密，<br>如<code>&quot;%E4%BD%A0%E5%A5%BD&quot;</code>其中<code>％XX</code>中的<code>XX</code>为该符号以16进制表示的ASCII码。</li>
</ol>
<p>POST请求会把请求的数据放置在HTTP请求包的包体中，GET传输的数据会直接暴露在URL中，而POST请求则不会。</p>
<h4 id="2-传输数据大小"><a href="#2-传输数据大小" class="headerlink" title="2. 传输数据大小"></a>2. 传输数据大小</h4><p>GET方式传输的数据最多只能是1024字节，<br>因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系，URL本身不存在参数上限的问题，HTTP协议规范也没有对URL长度进行限制。<br>这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p>
<p><em>注意：限制是针对整个URL长度，不单是传输的数据长度。</em></p>
<p>POST方式理论上没有限制，可传较大的数据。起限制作用的是服务器的处理程序的处理能力。Apache, Nigx, IIS服务器自身可配置限制传输大小。</p>
<h4 id="3-GET在浏览器回退是无害的，而POST会再次提交请求"><a href="#3-GET在浏览器回退是无害的，而POST会再次提交请求" class="headerlink" title="3. GET在浏览器回退是无害的，而POST会再次提交请求"></a>3. GET在浏览器回退是无害的，而POST会再次提交请求</h4><h4 id="4-GET产生的URL可以作为标签或存于历史记录中，而POST不可以"><a href="#4-GET产生的URL可以作为标签或存于历史记录中，而POST不可以" class="headerlink" title="4. GET产生的URL可以作为标签或存于历史记录中，而POST不可以"></a>4. GET产生的URL可以作为标签或存于历史记录中，而POST不可以</h4><h4 id="5-GET请求会被浏览器主动cahe，而POST不会，除非手动设置"><a href="#5-GET请求会被浏览器主动cahe，而POST不会，除非手动设置" class="headerlink" title="5. GET请求会被浏览器主动cahe，而POST不会，除非手动设置"></a>5. GET请求会被浏览器主动cahe，而POST不会，除非手动设置</h4><h4 id="6-安全性"><a href="#6-安全性" class="headerlink" title="6. 安全性"></a>6. 安全性</h4><p>GET传输的数据直接暴露在URL中，如果我们在做用户登录时，需要传输登录帐号及密码到后端做验证，如果用GET方式，那么账户密码直接暴露在URL里面，是极其危险的。<br>而且浏览器缓存的机制，访问过的网站URL会被保存在浏览器历史记录里，其他人可通过历史记录查看访问网站URL，直接获取到传输的数据。<br>很可能受到 “Cross-site request forgery”(中文名称：跨站请求伪造) 攻击。<br>不过POST的数据也是可以被拦截的。</p>
<p>总结：</p>
<ol>
<li>GET请求是用来向服务器发送索取数据的一种请求，实际应用中数据不涉及到安全性，可用GET方式来向后端请求数据，<br>如分页或搜索关键词 <code>&quot;http://www.xxx.com/product?keywords=xxx&amp;page=2&quot;</code>;</li>
<li>POST请求是向服务器提交数据的一种请求，涉及到安全性的数据，用POST的方式来传输较GET更安全。</li>
</ol>
<hr>
<p>曾经的曾经，我也是那99%的一员，还把自己归纳的文章发给新人同事看，然后装逼失败，被老大引导练成最后的这1%。</p>
<hr>
<h3 id="1-的人所拥有的"><a href="#1-的人所拥有的" class="headerlink" title="1%的人所拥有的"></a>1%的人所拥有的</h3><p>GET和POST本质上是没有区别的，它们是HTTP协议中的两种发送请求的方式。<br>HTTP是基于TCP/IP的关于数据如何在万维网中通信的协议，即HTTP的底层是TCP/IP，所以GET和POST的底层也是TCP/IP，也就是说：GET/POST都是TCP链接。<br>给POST带上url参数，给GET加上request body，技术上是可以实现的。</p>
<p>为了更方便的管理，避免混乱，HTTP给这些请求定义GET，POST，PUT，DELETE。<br>而数据大小，则是因为浏览器的限制造成的。</p>
<p>所以GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同</p>
<h4 id="隐藏的Buff"><a href="#隐藏的Buff" class="headerlink" title="隐藏的Buff"></a>隐藏的Buff</h4><p>GET产生一个TCP数据包，而POST产生两个TCP数据包</p>
<p>GET的请求，浏览器会把http header和data一并发送出去，服务器返回200（返回数据）<br>POST的请求，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200（返回数据）</p>
<p>因为POST需要两步，时间上消耗的多一点，<br>不过网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。<br>网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点</p>
<p>并不是所有浏览器POST发送两次包，Fiefox就发送一次。</p>
<p>最后的最后，当你以后被别人问到的时候，你就可以。。。。。。请开始你的表演</p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
<p>参考文章：<a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="external">《99%的人都理解错了HTTP中GET与POST的区别》</a></p>
]]></content>
      
        <categories>
            
            <category> HTTP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
