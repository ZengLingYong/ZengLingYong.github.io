<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript设计模式（二）：策略模式]]></title>
    <url>%2F2019%2F06%2F24%2FJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[策略模式：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换 生活小栗子：诸葛锦囊 诸葛给刘备的锦囊妙计，遇到任何困难都有应对计策。策略模式实现的也是类似的场景。 再来一栗：给喜欢的女生买冰淇淋，事先不了解其喜好，只能集齐各种味道，总会命种。就是比较 “费钱”，这也是策略模式的缺点，需事先考虑所有应对场景。 模式特点 策略类：算法封装成独立的函数/对象 环境类：根据不同参数调用对应的策略函数/对象执行 模式实现 实现方式：一个基于策略模式的程序至少由两部分组成，第一个部分是一组策略类 Strategies（可变），策略类封装类具体的算法，并负责具体的计算过程。第二个部分是环境类 Context（不变）， Context 接收客户的请求，随后把请求委托给某一个策略类。 假设我们一个开发团队，人员组成包括（开发组长，后端，前端，测试）。开发组长领取开发任务（不变），但具体的任务执行人员可根据类型划分（可变）。 比如开发任务有以下几项： 优化服务器缓存（后端任务） 优化首屏加载速度（前端任务） 完成系统并发测试（测试任务） 开发组长会根据任务类型，分发到对应的开发人员头上，组长不承担具体开发任务。所以每一个开发人员就承担 Strategy 的作用（独立的任务执行），而组长拥有并可支配所有开发人员的资源，充当 Context 的角色。团队每一个开发人员“组合”起来就是一个 Strategies 类（执行开发任务）。 这个 Strategies 是可变的，如果说后续开发任务需要安卓的、IOS的支持，只要添加安卓、IOS开发人员配置即可（可扩展）。 123456789101112131415161718192021// 策略类（开发人员）var Strategies = &#123; &quot;backend&quot;: function(task) &#123; console.log(&apos;进行后端任务：&apos;, task); &#125;, &quot;frontend&quot;: function(task) &#123; console.log(&apos;进行前端任务：&apos;, task); &#125;, &quot;testend&quot;: function(task) &#123; console.log(&apos;进行测试任务：&apos;, task); &#125;&#125;;// 环境类（开发组长）var Context = function(type, task) &#123; typeof Strategies[type] === &apos;function&apos; &amp;&amp; Strategies[type](task);&#125;Context(&apos;backend&apos;, &apos;优化服务器缓存&apos;);Context(&apos;frontend&apos;, &apos;优化首页加载速度&apos;);Context(&apos;testend&apos;, &apos;完成系统并发测试&apos;); 上述代码带来的好处： 算法独立封装，任务分发； 开发组长不承担具体开发任务（只做顶层设计，不跟年轻人抢饭碗） 复用性更好，不局限于 Context 调用； 开发人员不愁下家（去哪写代码都是写代码） 策略模式的另一个好处就是，消除了大部分的 if...else / switch...case 条件分支语句，代码阅读性提高。 12345678910// 没有使用策略模式的组长...var Context = function(type, task) &#123; if (type === &apos;backend&apos;) &#123; // 把后端给我叫来 &#125; else if (type === &apos;frontend&apos;) &#123; // 把前端给我叫来 &#125; else if (type === &apos;testend&apos;) &#123; // 把测试给我叫来 &#125;&#125; JavaScript 中，函数作为“一等公民“，也称“一等对象”。JavaScript 中 ”高阶函数“ 应用中，函数可被作为变量或参数进行传递或调用。因此在 JavaScript 中，我们可将算法封装成独立的函数，并将它作为参数传递给另一个函数调用。 12345678910111213141516171819// 封装独立的函数var backend = function(task) &#123; console.log(&apos;进行后端任务：&apos;, task);&#125;;var frontend = function(task) &#123; console.log(&apos;进行前端任务：&apos;, task);&#125;;var testend = function(task) &#123; console.log(&apos;进行测试任务：&apos;, task);&#125;;// 环境类（开发组长）var Context = function(func, task) &#123; typeof func === &apos;function&apos; &amp;&amp; func(task);&#125;Context(backend, &apos;优化服务器缓存&apos;);Context(frontend, &apos;优化首页加载速度&apos;);Context(testend, &apos;完成系统并发测试&apos;); 少了 Strategies 策略类的外层包裹，函数更加独立，并不妨碍其调用。使用函数替代策略类方式，正是我们日常开发中经常用到的 “隐形” 策略模式。 适用场景 多重条件语句判断，执行对应的算法场景 表单校验（validator) 优缺点 优点： 利用组合、委托、多态的技术和思想，避免多重条件选择语句 if...else/switch...case； 复用性更高，算法函数可在系统其它地方使用； 支持设计模式 “开发-封闭原则“ ，算法封装在独立的 Strategy 中，易于维护和扩展； 策略模式使用 “组合和委托” 来让 Context 拥有执行算法的能力，一种替换对象继承的可行方案 缺点： 增加了许多策略类或对象（开发人员职能划分明确，人员成本有所增加）； 必须了解各个 Strategy 的不同点，违反 “最少知识原则”（组长手底下有对应的开发人员，才不用自己那么苦逼） 参考文章 《JavaScript 设计模式》 《JavaScript 设计模式与开发实践》 《JavaScript 设计模式系统讲解与应用》 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
  </entry>
  <entry>
    <title><![CDATA[JavaScript设计模式（一）：单例模式]]></title>
    <url>%2F2019%2F06%2F20%2FJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式：限制类实例化次数只能一次，一个类只有一个实例，并提供一个访问它的全局访问点。 单例模式是创建型设计模式的一种。针对全局仅需一个对象的场景，如线程池、全局缓存、window 对象等。 模式特点 类只有一个实例 全局可访问该实例 自行实例化（主动实例化） 可推迟初始化，即延迟执行（与静态类/对象的区别） JavaScript 是一门非正规面向对象的语言，并没有类的定义。而单例模式要求一个 “唯一” 和 “全局访问” 的对象，在 JavaScript 中类似全局对象，刚好满足单例模式的两个特点：“唯一” 和 “可全局访问”。虽然它不是正规的单例模式，但不可否认确实具备类单例模式的特点。 12// 全局对象var globaObj = &#123;&#125;; 使用全局变量会有以下问题： 命名空间污染（变量名冲突） 维护时不方便管控（容易不小心覆盖） 全局变量问题折中的应对方案： 使用命名空间 闭包封装私有变量（利用函数作用域） ES6的 const/symbol 虽然全局变量可以实现单例，但因其自身的问题，不建议在实际项目中将其作为单例模式的应用，特别是中大型项目的应用中，全局变量的维护该是考虑的成本。 模式实现 实现方式：使用一个变量存储类实例对象（值初始为 null/undefined ）。进行类实例化时，判断类实例对象是否存在，存在则返回该实例，不存在则创建类实例后返回。多次调用类生成实例方法，返回同一个实例对象。 “简单版” 单例模式：123456789101112131415161718let Singleton = function(name) &#123; this.name = name; this.instance = null;&#125;Singleton.getInstance = function(name) &#123; if (this.instance) &#123; return this.instance; &#125; return this.instance = new Singleton(name);&#125;var Winner = Singleton.getInstance('Winner');var Looser = Singleton.getInstance('Looser');console.log(Winner === Looser); // trueconsole.log(Winner.getName()); // 'Winner'console.log(Looser.getName()); // 'Winner' 代码中定义了一个 Singleton 函数，函数在 JavaScript 中是“一等公民“，可以为其定义属性方法。因此我们可以在函数 Singleton 中定义一个 getInstance() 方法来管控单例，并创建返回类实例对象，而不是通过传统的 new 操作符来创建类实例对象。 this.instance 存储创建的实例对象，每次接收到创建实例对象时，判断 this.instance 是否有实例对象，有则返回，没有则创建并更新 this.instance 值，因此无论调用多少次 getInstance()，最终都只会返回同一个 Singleton 类实例对象。 存在问题： 不够“透明”，无法使用 new 来进行类实例化，需约束该类实例化的调用方式： Singleton.getInstance(...); 管理单例的操作，与对象创建的操作，功能代码耦合在一起，不符合 “单一职责原则” “透明版” 单例模式：实现 “透明版” 单例模式，意图解决：统一使用 new 操作符来获取单例对象， 而不是 Singleton.getInstance(...)。 1234567891011121314151617181920let CreateSingleton = (function()&#123; let instance; return function(name) &#123; if (instance) &#123; return instance; &#125; this.name = name; return instance = this; &#125;&#125;)();CreateSingleton.prototype.getName = function() &#123; console.log(this.name);&#125;var Winner = new CreateSingleton('Winner');var Looser = new CreateSingleton('Looser');console.log(Winner === Looser); // trueconsole.log(Winner.getName()); // 'Winner'console.log(Looser.getName()); // 'Winner' “透明版”单例模式解决了不够“透明”的问题，我们又可以使用 new 操作符来创建实例对象。 “代理版“ 单例模式：通过“代理”的形式，意图解决：将管理单例操作，与对象创建操作进行拆分，实现更小的粒度划分，符合“单一职责原则” 12345678910111213141516171819202122232425let ProxyCreateSingleton = (function()&#123; let instance; return function(name) &#123; // 代理函数仅作管控单例 if (instance) &#123; return instance; &#125; return instance = new Singleton(name); &#125;&#125;)();// 独立的Singleton类，处理对象实例let Singleton = function(name) &#123; this.name = name;&#125;Singleton.prototype.getName = function() &#123; console.log(this.name);&#125;var Winner = new PeozyCreateSingleton('Winner');var Looser = new PeozyCreateSingleton('Looser');console.log(Winner === Looser); // trueconsole.log(Winner.getName()); // 'Winner'console.log(Looser.getName()); // 'Winner' 惰性单例模式惰性单例，意图解决：需要时才创建类实例对象。对于懒加载的性能优化，想必前端开发者并不陌生。惰性单例也是解决 “按需加载” 的问题。 需求：页面弹窗提示，多次调用，都只有一个弹窗对象，只是展示信息内容不同。 开发这样一个全局弹窗对象，我们可以应用单例模式。为了提升它的性能，我们可以让它在我们需要调用时再去生成实例，创建 DOM 节点。 1234567891011121314151617181920let getSingleton = function(fn) &#123; var result; return function() &#123; return result || (result = fn.apply(this, arguments)); // 确定this上下文并传递参数 &#125;&#125;let createAlertMessage = function(html) &#123; var div = document.createElement('div'); div.innerHTML = html; div.style.display = 'none'; document.body.appendChild(div); return div;&#125;var createSingleAlertMessage = getSingleton(createAlertMessage);document.body.addEventListener('click', function()&#123; // 多次点击只会产生一个弹窗 let alertMessage = createSingleAlertMessage('您的知识需要付费充值！'); alertMessage.style.display = 'block';&#125;) 代码中演示是一个通用的 “惰性单例” 的创建方式，如果还需要 createLoginLayer 登录框, createFrame Frame框, 都可以调用 getSingleton(...) 生成对应实例对象的方法。 适用场景“单例模式的特点，意图解决：维护一个全局实例对象。” 引用第三方库（多次引用只会使用一个库引用，如 jQuery） 弹窗（登录框，信息提升框） 购物车 (一个用户只有一个购物车) 全局态管理 store (Vuex / Redux) 项目中引入第三方库时，重复多次加载库文件时，全局只会实例化一个库对象，如 jQuery，lodash，moment …, 其实它们的实现理念也是单例模式应用的一种： 123456// 引入代码库 libs(库别名）if (window.libs != null) &#123; return window.libs; // 直接返回&#125; else &#123; window.libs = '...'; // 初始化&#125; 优缺点 优点：适用于单一对象，只生成一个对象实例，避免频繁创建和销毁实例，减少内存占用。 缺点：不适用动态扩展对象，或需创建多个相似对象的场景。 TIPS: 多线程编程语言中，单例模式会涉及同步锁的问题。而 JavaScript 是单线程的编程语言，暂可忽略该问题。 参考文章 《JavaScript 设计模式》 《JavaScript 设计模式与开发实践》 《JavaScript 设计模式系统讲解与应用》 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（八）：浅谈函数防抖与节流]]></title>
    <url>%2F2019%2F03%2F04%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%B5%85%E8%B0%88%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81%2F</url>
    <content type="text"><![CDATA[本篇课题，或许早已是烂大街的解读文章。不过春招系列面试下来，不少伙伴们还是似懂非懂地栽倒在（～面试官～）深意的笑容之下，权当温故知新。 JavaScript的执行过程，是基于栈来进行的。复杂的程序代码被封装到函数中，程序执行时，函数不断被推入执行栈中。所以 “执行栈” 也称 “函数执行栈”。 函数中封装的代码块，一般都有相对复杂的逻辑处理（计算/判断），例如函数中可能会涉及到 DOM 的渲染更新，复杂的计算与验证， Ajax 数据请求等等。 前端页面的操作权，大部分都是属于浏览端的客户爸爸们（单身三十年的手速，惹不起惹不起！！！）。如果函数被频繁调用，造成的性能开销绝对不只一点点。 前： DOM 频繁重绘的卡顿让客户爸爸们想把你揪出来一顿大招。。。 后： 后端同学正在提刀赶来的路上：“为什么我的接口被你玩挂了”。。。 既要提升用户体验，又要减少后端服务开销，可见我们大前端的使命不只一页PPT。说好前因，接着就是后果了。既然有优化的需求，必然就要有相应的解决方案。隆重请出主角： “防抖” 与 “节流”。 防抖（debounce) 在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时延迟时间。 生活化理解：英雄的技能条，技能条读完才能使用技能（R大招60s） 防抖的实现方式分两种 “立即执行” 和 “非立即执行”，区别在于第一次触发时，是否立即执行回调函数。 非立即执行 ”非立即执行防抖“ 指事件触发后，回调函数不会立即执行，会在延迟时间 n 秒后执行，如果 n 秒内被调用多次，则重新计时延迟时间 1234567891011121314151617181920// e.g. 防抖 - 非立即执行function debounce(func, delay) &#123; var timeout; return function() &#123; var context = this; var args = arguments; // &amp;&amp; 短路运算 == if(timeout) else &#123;...&#125; timeout &amp;&amp; clearTimeout(timeout); timeout = setTimeout(function()&#123; func.apply(context, args); &#125;, delay); &#125;&#125;// 调用var printUserName = debounce(function()&#123; console.log(this.value);&#125;, 800);document.getElementById('username') .addEventListener('keyup', printUserName); 立即执行 “立即执行防抖” 指事件触发后，回调函数会立即执行，之后要想触发执行回调函数，需等待 n 秒延迟 12345678910111213// e.g. 防抖 - 立即执行function debounce(func, delay) &#123; var timeout; return function() &#123; var context = this; var args = arguments; callNow = !timeout; timeout = setTimeout(function() &#123; timeout = null; &#125;, delay); callNow &amp;&amp; func.apply(context, args); &#125;&#125; 函数防抖原理：通过维护一个定时器，其延迟计时以最后一次触发为计时起点，到达延迟时间后才会触发函数执行。 节流（throttle) 规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效（间隔执行） 生活化理解： FPS射击游戏子弹射速（即使按住鼠标左键，射出子弹的速度也是限定的） 水龙头的滴水（水滴攒到一定重量才会下落） 函数节流实现的方式有 “时间戳” 和 “定时器” 两种。 时间戳12345678910111213// e.g. 节流 - 时间戳function throttle(func, delay) &#123; var lastTime = 0; return function() &#123; var context = this; var args = arguments; var nowTime = +new Date(); if (nowTime &gt; lastTime + delay) &#123; func.apply(context, args) lastTime = nowTime; &#125; &#125;&#125; “时间戳” 的方式，函数在时间段开始时执行。 缺点：假定函数间隔1s执行，如果最后一次停止触发，卡在4.2s，则不会再执行。 定时器1234567891011121314// e.g. 节流 - 定时器function throttle(func, delay) &#123; var timeout; return function() &#123; var context = this; var args = arguments; if (!timeout) &#123; setTimeout(function()&#123; func.apply(context, args); timeout = null; &#125;, delay) &#125; &#125;&#125; “定时器” 的方式，函数在时间段结束时执行。可理解为函数并不会立即执行，而是等待延迟计时完成才执行。（由于定时器延时，最后一次触发后，可能会再执行一次回调函数） 时间戳 + 定时器（互补优化）12345678910111213141516171819// e.g. 节流 - 时间戳 + 定时器function throttle(func, delay) &#123; let lastTime, timeout; return function() &#123; let context = this; let args = arguments; let nowTime = +new Date(); if (lastTime &amp;&amp; nowTime &lt; lastTime + delay) &#123; timeout &amp;&amp; clearTimeout(timeout); timeout = setTimeout(function()&#123; lastTime = nowTime; func.apply(context, args); &#125;, delay); &#125; else &#123; lastTime = nowTime; func.apply(context, args); &#125; &#125;&#125; 合并优化的原理：“时间戳”方式让函数在时间段开始时执行（第一次触发立即执行），“定时器”方式让函数在最后一次事件触发后（如4.2s）也能触发。 函数节流原理：一定时间内只触发一次，间隔执行。通过判断是否到达指定触发时间，间隔时间固定。 “防抖” 与 “节流” 的异同相同：都是防止某一时间段内，函数被频繁调用执行，通过时间频率控制，减少回调函数执行次数，来实现相关性能优化。 区别：“防抖”是某一时间内只执行一次，最后一次触发后过段时间执行，而“节流”则是间隔时间执行，间隔时间固定。 “防抖” 与 “节流” 的应用场景防抖 文本输入搜索联想 文本输入验证（包括 Ajax 后端验证） 节流 鼠标点击 监听滚动 scroll 窗口 resize mousemove 拖拽 应用场景还有很多，具体场景需具体分析。只要涉及高频的函数调用，都可参考函数防抖节流的优化方案。 鼓起勇气写在结尾：以上代码都不是 “完美” 的 “防抖 / 节流” 实现代码！！！仅就实现方式和基本原理，浅谈分解一二。 实际代码开发中，一般会引入lodash 相对 “靠谱” 的第三方库，帮我们去实现防抖节流的工具函数。有兴趣的伙伴们可阅读 lodash 相关源码，加深印象理解可再读以下参考文章。 参考文章 7分钟理解JS的节流、防抖及使用场景 函数防抖和节流]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（七）：走进面向对象，原型与原型链，继承方式]]></title>
    <url>%2F2019%2F02%2F18%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%B5%B0%E8%BF%9B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8C%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[“面向对象” 是以 “对象” 为中心的编程思想，它的思维方式是构造。 “面向对象” 编程的三大特点：“封装、继承、多态”： 封装：属性方法的抽象 继承：一个类继承（复制）另一个类的属性/方法 多态：方法（接口）重写 “面向对象” 编程的核心，离不开 “类” 的概念。简单地理解下 “类”，它是一种抽象方法。通过 “类” 的方式，可以创建出多个具有相同属性和方法的对象。 但是！但是！但是JavaScript中并没有 “类” 的概念，对的，没有。 ES6 新增的 class 语法，只是一种模拟 “类” 的语法糖，底层机制依旧不能算是标准 “类” 的实现方式。 在理解JavaScript中如何实现 “面向对象” 编程之前，有必要对JavaScript中的对象先作进一步地了解。 什么是对象对象是“无序属性”的集合，表现为“键/值对”的形式。属性值可包含任何类型值（基本类型、引用类型：对象/函数/数组）。 有些文章指出“JS中一切都是对象”，略有偏颇，修正为：“JS中一切引用类型都是对象”更为稳妥些。 函数 / 数组都属于对象，数组就是对象的一种子类型，不过函数稍微复杂点，它跟对象的关系，有点”鸡生蛋，蛋生鸡”的关系，可先记住：“对象由函数创建”。 简单对象的创建 字面量声明（常用） new 操作符调用 Object 函数12345678// 字面量let person = &#123; name: '以乐之名'&#125;;// new Object()let person = new Object();person.name = '以乐之名'; 以上两种创建对象的方式，并不具备创建多个具有相同属性的对象。 TIPS：new 操作符会对所有函数进行劫持，将函数变成构造函数（对函数的构造调用）。 对象属性的访问方式 . 操作符访问 (也称 “键访问”） [] 操作符访问（也称 “属性访问”） . 操作符 VS [] 操作符： . 访问属性时，属性名需遵循标识符规范，兼容性比 [] 略差； [] 接受任意UTF-8/Unicode字符串作为属性名； [] 支持动态属性名（变量）； [] 支持表达式计算（字符串连接 / ES6的Symbol） TIPS: 标识符命名规范 —— 数字/英文字母/下划线组成，开头不能是数字。1234567891011// 任意UTF-8/Unicode字符串作为属性名person[&apos;$my-name&apos;];// 动态属性名（变量）let attrName = &apos;name&apos;;person[attrName]; // 表达式计算let attrPrefix = &apos;my_&apos;;person[attrPrefix + &apos;name&apos;]; // person[&apos;my_name&apos;]person[Symbol.name]; // Symbol在属性名的应用 属性描述符ES5新增 “属性描述符”，可针对对象属性的特性进行配置。 属性特性的类型1. 数据属性 Configurable 可配置（可删除）？[true|false] Enumerable 可枚举 [true|false] Writable 可写？ [true|false] Value 值？默认undefined2. 访问器属性 Get [[Getter]] 读取方法 Set [[Setter]] 设置方法 访问器属性优先级高于数据属性 访问器属性会优于 writeable/value 获取属性值时，如果对象属性存在 get()，会忽略其 value 值，直接调用 get()； 设置属性值时，如果对象属性存在 set()，会忽略 writable 的设置，直接调用 set(); 访问器属性日常应用： 属性值联动修改（一个属性值修改，会触发另外属性值修改）； 属性值保护（只能通过 set() 制定逻辑修改属性值） 定义属性特性 Object.defineProperty() 定义单个属性 Object.defineProperties() 定义多个属性12345678let Person = &#123;&#125;;Object.defineProperty(Person, 'name', &#123; writable: true, enumerable: true, configurable: true, value: '以乐之名'&#125;);Person.name; // 以乐之名 TIPS：使用 Object.defineProperty/defineProperties 定义属性时，属性特性 configurable/enumerable/writable 值默认为 false，value 默认为 undefined。其它方式创建对象属性时，前三者值都为 true。 可使用Object.getOwnPropertyDescriptor() 来获取对象属性的特性描述。 原型JavaScript中模拟 “面向对象” 中 “类” 的实现方式，是利用了JavaScript中函数的一个特性（属性）——prototype（本身是一个对象）。 每个函数默认都有一个 prototype 属性，它就是我们所说的 “原型”，或称 “原型对象”。每个实例化创建的对象都有一个 __proto__ 属性（隐式原型），它指向创建它的构造函数的 prototype 属性。 new + 函数（实现”原型关联”）12345678let Person = function(name, age) &#123; this.name = name; this.age = age;&#125;;Person.prototype.say = function() &#123;&#125;;let father = new Person(&apos;David&apos;, 48);let mother = new Person(&apos;Kelly&apos;, 46); new操作符的执行过程，会对实例对象进行 “原型关联”，或称 “原型链接”。 new的执行过程 创建（构造）一个全新的空对象 “这个新对象会被执行”原型”链接（新对象的__proto__会指向函数的prototype)” 构造函数的this会指向这个新对象，并对this属性进行赋值 如果函数没有返回其他对象，则返回这个新对象（注意构造函数的return，一般不会有return) 原型链“对象由函数创建”，既然 prototype 也是对象，那么它的 __proto__ 原型链上应该还有属性。Person.prototype.__proto__ 指向 Function.prototype，而Function.prototype.__proto__ 最终指向 Object.prototype。 TIPS：Object.prototype.__proto__ 指向 null（特例）。 日常调用对象的 toString()/valueOf() 方法，虽然没有去定义它们，但却能正常使用。实际上这些方法来自 Object.prototype，所有普通对象的原型链最终都会指向 Object.prototype，而对象通过原型链关联（继承）的方式，使得实例对象可以调用 Object.prototype 上的属性 / 方法。 访问一个对象的属性时，会先在其基础属性上查找，找到则返回值；如果没有，会沿着其原型链上进行查找，整条原型链查找不到则返回 undefined。这就是原型链查找。 基础属性与原型属性hasOwnProperty()判断对象基础属性中是否有该属性，基础属性返回 true。 涉及 in 操作都是所有属性（基础 + 原型） for...in... 遍历对象所有可枚举属性 in 判断对象是否拥有该属性 Object.keys(…)与Object.getOwnPropertyNames(…) Object.keys(...) 返回所有可枚举属性 Object.getOwnPropertyNames(...) 返回所有属性 屏蔽属性修改对象属性时，如果属性名与原型链上属性重名，则在实例对象上创建新的属性，屏蔽对象对原型属性的使用（发生屏蔽属性）。屏蔽属性的前提是，对象基础属性名与原型链上属性名存在重名。 创建对象属性时，属性特性对屏蔽属性的影响 对象原型链上有同名属性，且可写，在对象上创建新属性（屏蔽原型属性）； 对象原型链上有同名属性，且只读，忽略； 对象原型链上有同名属性，存在访问器属性 set()，调用 set() 批量创建对象的方式创建多个具有相同属性的对象 1. 工厂模式12345678910111213function createPersonFactory(name, age) &#123; var obj = new Object(); obj.name = name; obj.age = age; obj.say = function() &#123; console.log(`My name is $&#123;this.name&#125;, i am $&#123;this.age&#125;`); &#125;&#125;var father = createPersonFactory('David', 48);var mother = createPersonFactory('Kelly', 46);father.say(); // 'My name is David, i am 48'mother.say(); // 'My name is Kelly, i am 46' 缺点： 无法解决对象识别问题 属性值为函数时无法共用，不同实例对象的 say 方法没有共用内存空间 obj.say = function(){...} 实例化一个对象时都会开辟新的内存空间，去存储function(){...}，造成不必要的内存开销。 1father.say == mother.say; // false 2. 构造函数（new)123456789function Person(name, age) &#123; this.name = name; this.age = age; this.say = function() &#123; console.log(`My name is $&#123;this.name&#125;, i am $&#123;this.age&#125;`); &#125;&#125;let father = new Person('David', 48); 缺点：属性值为引用类型（say方法）时无法共用，不同实例对象的 say 方法没有共用内存空间（与工厂模式一样）。 3. 原型模式12345678function Person() &#123;&#125;Person.prototype.name = 'David';Person.prototype.age = 48;Person.prototype.say = function() &#123; console.log(`My name is $&#123;this.name&#125;, i am $&#123;this.age&#125;`);&#125;;let father = new Person(); 优点：解决公共方法内存占用问题（所有实例属性的 say 方法共用内存）缺点：属性值为引用类型时，因内存共用，一个对象修改属性会造成其它对象使用属性发生改变。 12345678Person.prototype.like = ['sing', 'dance'];let father = new Person();let mother = new Person();father.like.push('travel');// 引用类型共用内存，一个对象修改属性，会影响其它对象father.like; // ['sing', 'dance', 'travel']mother.like; // ['sing', 'dance', 'travel'] 4. 构造函数 + 原型（经典组合）1234567function Person(name, age) &#123; this.name = name; this.age = age;&#125;Person.prototype.say = function() &#123; console.log(`My name is $&#123;this.name&#125;, i am $&#123;this.age&#125;`);&#125; 原理：结合构造函数和原型的优点，“构造函数初始化属性，原型定义公共方法”。 5. 动态原型构造函数 + 原型的组合方式，区别于其它 “面向对象” 语言的声明方式。属性方法的定义并没有统一在构造函数中。因此动态原型创建对象的方式，则是在 “构造函数 + 原型组合” 基础上，优化了定义方式（区域）。123456789101112function Person(name, age) &#123; this.name = name; this.age = age; // 判断原型是否有方法，没有则添加； // 原型上的属性在构造函数内定义，仅执行一次 if (!Person.prototype.say) &#123; Person.prototype.say = function() &#123; console.log(`My name is $&#123;this.name&#125;, i am $&#123;this.age&#125;`); &#125; &#125;&#125; 优点：属性方法统一在构造函数中定义。 除了以上介绍的几种对象创建方式，此外还有”寄生构造函数模式”、”稳妥构造函数模式”。日常开发较少使用，感兴趣的伙伴们可自行了解。 “类” 的继承传统的面向对象语言中，”类” 继承的原理是 “类” 的复制。但JavaScript模拟 “类” 继承则是通过 “原型关联” 来实现，并不是 “类” 的复制。正如《你不知道的JavaScript》中提出的观点，这种模拟 “类” 继承的方式，更像是 “委托”，而不是 “继承”。 以下列举JavaScript中常用的继承方式，预先定义两个类： “Person” 父类（超类） “Student” 子类（用来继承父类） 123456789// 父类统一定义function Person(name, age) &#123; // 构造函数定义初始化属性 this.name = name; this.age = age;&#125;// 原型定义公共方法Person.prototype.eat = function() &#123;&#125;;Person.prototype.sleep = function() &#123;&#125;; 原型继承1234567// 原型继承function Student(name, age, grade) &#123; this.grade = grade;&#125;;Student.prototype = new Person(); // Student原型指向Person实例对象Student.prototype.constructor = Student; // 原型对象修改，需要修复constructor属性let pupil = new Student(name, age, grade); 原理：子类的原型对象为父类的实例对象，因此子类原型对象中拥有父类的所有属性 缺点： 无法向父类构造函数传参，初始化属性值 属性值是引用类型时，存在内存共用的情况 无法实现多继承（只能为子类指定一个原型对象） 构造函数继承12345// 构造函数继承function Student(name, age, grade) &#123; Person.call(this, name, age); this.grade = grade;&#125; 原理：调用父类构造函数，传入子类的上下文对象，实现子类参数初始化赋值。仅实现部分继承，无法继承父类原型上的属性。可 call 多个父类构造函数，实现多继承。 缺点：属性值为引用类型时，需开辟多个内存空间，多个实例对象无法共享公共方法的存储，造成不必要的内存占用。 原型 + 构造函数继承（经典）1234567// 原型 + 构造函数继承function Student(name, age, grade) &#123; Person.call(this, name, age); // 第一次调用父类构造函数 this.grade = grade;&#125;Student.prototype = new Person(); // 第二次调用父类构造函数Student.prototype.constructor = Student; // 修复constructor属性 原理：结合原型继承 + 构造函数继承两者的优点，“构造函数继承并初始化属性，原型继承公共方法”。 缺点：父类构造函数被调用了两次。 待优化：父类构造函数第一次调用时，已经完成父类构造函数中 “属性的继承和初始化”，第二次调用时只需要 “继承父类原型属性” 即可，无须再执行父类构造函数。 寄生组合式继承（理想）12345678910// 寄生组合式继承function Student(name, age, grade) &#123; Person.call(this, name, age); this.grade = grade;&#125;Student.prototype = Object.create(Person.prototype); // Object.create() 会创建一个新对象，该对象的__proto__指向Person.prototypeStudent.prototype.constructor = Student;let pupil = new Student('小明', 10, '二年级'); 原理：创建一个新对象，将该对象原型关联至父类的原型对象，子类 Student 已使用 call 来调用父类构造函数完成初始化，所以只需再继承父类原型属性即可，避免了经典组合继承调用两次父类构造函数。（较完美的继承方案） ES6的class语法123456789101112131415161718class Person &#123; constructor(name, age) &#123; this.name = name; this.grade = grade; &#125; eat () &#123; //... &#125; sleep () &#123; //... &#125;&#125;class Student extends Person &#123; constructor (name, age, grade) &#123; super(name, age); this.grade = grade; &#125; play () &#123; //... &#125;&#125; 优点：ES6提供的 class 语法使得类继承代码语法更加简洁。 Object.create(…) Object.create()方法会创建一个新对象，使用现有对象来提供新创建的对象的__proto__ Object.create 实现的其实是”对象关联”，直接上代码更有助于理解：12345678910let person = &#123; eat: function() &#123;&#125;; sleep: function() &#123;&#125;;&#125;let father = Object.create(person); // father.__proto__ -&gt; person, 因此father上有eat/sleep/talk等属性father.eat();father.sleep(); 上述代码中，我们并没有使用构造函数 / 类继承的方式，但 father 却可以使用来自 person 对象的属性方法，底层原理依赖于原型和原型链的魔力。 123456// Object.create实现原理/模拟Object.create = function(o) &#123; function F() &#123;&#125; F.prototype = o; return new F();&#125; Object.create(...) 实现的 “对象关联” 的设计模式与 “面向对象” 模式不同，它并没有父类，子类的概念，甚至没有 “类” 的概念，只有对象。它倡导的是 “委托” 的设计模式，是基于 “面向委托” 的一种编程模式。 文章篇幅有限，仅作浅显了解，后续可另开一章讲讲 “面向对象” VS “面向委托”，孰优孰劣，说一道二。 对象识别（检查 “类” 关系）instanceofinstanceof 只能处理对象与函数的关系判断。instanceof 左边是对象，右边是函数。判断规则：沿着对象的 __proto__ 进行查找，沿着函数的 prototype 进行查找，如果有关联引用则返回 true，否则返回 false。 123let pupil = new Student();pupil instanceof Student; // truepupil instanceof Person; // true Student继承了Person Object.prototype.isPrototypeOf(…)Object.prototype.isPrototyepOf(...) 可以识别对象与对象，也可以是对象与函数。 12let pupil = new Student();Student.prototype.isPrototypeOf(pupil); // true 判断规则：在对象 pupil 原型链上是否出现过 Student.prototype , 如果有则返回 true， 否则返回 false ES6新增修改对象原型的方法：Object.setPrototypeOf(obj, prototype)，存在有性能问题，仅作了解，更推荐使用 Object.create(...)。123Student.prototype = Object.create(Person.prototype);// setPrototypeOf改写上行代码Object.setPrototypeOf(Student.prototype, Person.prototype); 后语“面向对象” 是程序编程的一种设计模式，具备 “封装，继承，多态” 的特点，在ES6的 class 语法未出来之前，原型继承确实是JavaScript入门的一个难点，特别是对新入门的朋友，理解起来并不友好，模拟继承的代码写的冗余又难懂。好在ES6有了 class 语法糖，不必写冗余的类继承代码，代码写少了，眼镜片都亮堂了。 老话说的好，“会者不难”。深入理解面向对象，原型，继承，对日后代码能力的提升及编码方式优化都有益处。好的方案不只有一种，明白个中缘由，带你走进新世界大门。 参考文档： 《你不知道的JavaScript（上卷）》 《JavaScript高级程序设计》 JavaScript常见的六种继承方式 深入理解javascript原型和闭包 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（六）：知否知否，须知this]]></title>
    <url>%2F2019%2F01%2F29%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E7%9F%A5%E5%90%A6%E7%9F%A5%E5%90%A6%EF%BC%8C%E9%A1%BB%E7%9F%A5this%2F</url>
    <content type="text"><![CDATA[常见this的误解 指向函数自身（源于this英文意思的误解） 指向函数的词法作用域（部分情况） this的应用环境1. 全局环境无论是否在严格模式下，全局执行环境中（任何函数体外部）this都指向全局对象12var name = &apos;以乐之名&apos;;this.name; // 以乐之名 2. 函数（运行内）环境函数内部，this的值取决于函数被调用的方式（被谁调用）1234567891011var name = &apos;无名氏&apos;;function getName() &#123; console.log(this.name);&#125;getName(); // 无名氏 调用者是全局对象var myInfo = &#123; name: &apos;以乐之名&apos;, getName: getName&#125;;myInfo.getName(); // 以乐之名 调用者是myInfo对象 this的正解“this的指向是在运行时进行绑定的，而不是代码书写（函数声明）时确定！！！” “看谁用”，this的指向取决于调用者，这也是很多文章提到过的观点。“谁调用，this指向谁”，只是这句话稍有偏颇，某些情况不见得都适用。 生活栗子：你的钱并不一定是你的钱，只有当你使用消费了才是你的钱 。（“看谁用”），借出去的钱就不是你的了。。。 回到正文，我们先通过栈，来理解什么是调用位置？ JavaScript中函数的调用是以栈的方式来存储，栈顶是正在运行的函数，函数调用时入栈，执行完成后出栈。12345678910111213141516function foo() &#123; // 此时的栈：全局 -&gt; foo，调用位置在foo bar();&#125;function bar() &#123; // 此时的栈：全局 -&gt; foo -&gt; bar，调用位置在bar baz();&#125;function baz() &#123; // 此时的栈：全局 -&gt; foo -&gt; bar -&gt; baz，调用位置在baz // ...&#125;foo(); 代码中虽然函数存在多层嵌套使用，但处于栈顶的只有正在执行的函数，也即调用者只有顶层的那一个（或最后一个），理清调用位置（调用者）有助于我们理解this。 this的绑定规则 默认绑定（函数单独调用） 隐式绑定（作为对象的属性方法调用，带有执行上下文） 显示绑定（call/apply/bind） new绑定（new创建实例） 箭头函数绑定（ES6新增，基于词法作用域） 默认绑定下（函数单独调用）区分严格模式 非严格模式，this会指向全局对象（浏览器全局对象是window，NodeJS全局对象是global）； 严格模式，this指向undefined 123456789101112// 非严格模式function getName() &#123; console.log(this.name); // this指向全局对象&#125;getName(); // &quot;&quot;，并不会报错，如果外部有全局变量name，则会输出对应值// 严格模式function getName() &#123; &quot;use strict&quot; console.log(this.name); // this指向undefined&#125;getName(); // TypeError: Cannot read property &apos;name&apos; of undefined TIPS: 严格模式中，对函数中this的影响，只在函数内声明了严格模式才会存在，如果是调用时声明严格模式则不会影响。 1234567function getName() &#123; console.log(this.name);&#125;// 调用时声明严格模式&quot;use strict&quot;;getName(); // &quot;&quot; 隐式绑定隐式绑定中，函数一般作为对象的属性调用，带有调用者的执行上下文。因此this值取决于调用者的上下文环境。如果存在多层级属性引用，只有对象属性引用链中最顶层（最后一层）会影响调用位置，而this的值取决于调用位置。文章开头以栈来理解调用者的例子。 123456789101112131415function getName() &#123; return this.name;&#125;var myInfo = &#123; name: &apos;以乐之名&apos;, getName: getName&#125;;var leader = &#123; name: &apos;大神组长&apos; man: myInfo&#125;;leader.man.getName(); // &apos;以乐之名&apos;// man 指向 myInfo，最顶层（最后一层）对象为 myInfo apply/call的区别apply/call方法两者类似，都可以显示绑定this，两者的区别是参数传递的方式不同。apply/call第一个参数都为要指定this的对象，不同的是apply第二个参数接受的是一个参数数组，而call从第二个参数开始接受的是参数列表。 apply语法：func.apply(thisArg, [argsArray]) call语法：func.call(thisArg, arg1, arg2, …) 123456789var numbers = [5, 6, 2, 3, 7];// 求numbers的最大值// applyvar max = Math.max.apply(null, numbers);// callvar max = Math.max.call(null, ...numbers); // ...展开运算符 TIPS: 如果thisArg为原始值（数字，字符串，布尔值），this会指向该原始值的自动包装对象，如Number, String, Boolean等 12func.apply(1);// func中的this -&gt; Number对象; bind的特别（柯里化的应用）bind是ES5新增的方法，跟apply/call功能一样，可以显示绑定this。 bind语法：function.bind(thisArg[, arg1[, arg2[, …]]]) bind()方法创建一个新的函数，在调用时设置this关键字为提供的值，并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。 – 《Function.prototype.bind() | MDN》 “bind与apply/call的区别：apply/call传入this并立即执行函数，而bind传入this则返回一个函数，并不会立即执行，只有调用返回的函数才会执行原始函数”。 bind方法是函数柯里化的一种应用，看过上篇《前端进击的巨人（五）：学会函数柯里化（curry) 》的小伙伴，应该还记得“函数柯里化的特点：延迟执行，部分传参，返回一个可处理剩余参数的函数”。 bind相较apply/call的优点，可以通过部分传参提前对this进行一次”永久绑定”，也就是说this只需绑定一次，省却每次执行都要进行this绑定的操作。 1234567891011121314function getName() &#123; return this.name;&#125;var myInfo = &#123; name: &apos;以乐之名&apos;, job: &apos;前端工程师&apos;&#125;;var getName = getName.bind(myInfo);getName(); // &apos;以乐之名&apos;;getName(); // &apos;以乐之名&apos;;// 一次性绑定，之后调用无需再修改this TIPS: 函数柯里化可以用于参数预设，像一次性操作（判断/绑定）等。 有关函数柯里化的详解，请回阅：《前端进击的巨人（五）：学会函数柯里化（curry) 》。 构造函数中的this通过new操作符可以实现对函数的构造调用。JavaScript中本身并没有”构造函数”，一个函数如果没有使用new操作符调用，那么它就是个普通函数，new Func()实际上是对函数Func的”构造调用”。 在了解构造函数中的this前，有必要先了解下new实例化对象的过程。 new实例过程 创建（构造）一个全新的空对象 这个新对象会被执行”原型”链接（新对象的__proto__会指向函数的prototype) 构造函数的this会指向这个新对象，并对this属性进行赋值 如果函数没有返回其他对象，则返回这个新对象（注意构造函数的return，一般不会有return) 123456789// 正常不带return的构造函数function People(name, sex) &#123; this.name = name; this.sex = sex;&#125;var man = new People(&apos;亚当&apos;, &apos;男&apos;);var woman = new People(&apos;夏娃&apos;, &apos;女&apos;);// 实例化对象成功 1234567891011121314// 构造函数带了returnfunction People(name, sex) &#123; return 1; // 返回的是Number对象&#125;function People(name, sex) &#123; return &apos;hello world&apos;; // 返回的是String对象&#125;function People(name, sex) &#123; return function() &#123;&#125;&#125;function People(name, sex) &#123; return &#123;&#125;;&#125;// 以上并未正确实例化对象 构造函数自定义return，会造成new无法完成正确的实例化操作。如果返回值为基本类型，则返回其包装对象Number/String/Bollean。 TIPS: 原型链中的this指向其实例化的对象123456People.prototype.say = function() &#123; console.log(`我的名字：$&#123;this.name&#125;`);&#125;;var man = new People(&apos;亚当&apos;, &apos;男&apos;);man.say(); // 我的名字：亚当 this绑定规则的优先级显示绑定 / new绑定 &gt; 隐式绑定 &gt; 默认绑定 TIPS: new无法跟apply/call同时使用 this判定步骤 函数被new操作符使用（new绑定）？ YES –&gt; this绑定的是new创建的新对象 函数通过call/apply/bind（显示绑定）？ YES –&gt; this绑定的是指定的对象 函数在某个上下文对象中调用（隐式绑定）？ YES –&gt; this绑定的是那个上下文对象 默认绑定，严格模式指向undefined，否则指向全局对象 ES6的箭头函数（词法作用域的this机制，规则之外）箭头函数的this机制不同于传统的this机制，它采取的是另外一种机制，词法作用域的this判定规则。 1234567891011121314151617181920212223242526272829303132333435363738// 例子一var name = &apos;无名氏&apos;;var myInfo = &#123; name: &apos;以乐之名&apos;, getName: () =&gt; &#123; console.log(this.name); &#125;&#125;;var getName = myInfo.getName;window.getName(); // 无名氏myInfo.getName(); // 无名氏// myInfo是在全局环境定义的，因此根据词法作用域，this指向全局对象// 例子二var name = &apos;无名氏&apos;;var myInfo = &#123; name: &apos;以乐之名&apos;, say: () =&gt; &#123; setTimeout(() =&gt; &#123; console.log(this.name); &#125;) &#125;&#125;;myInfo.say(); // 无名氏// 箭头函数通过作用域链来逐层查找this，最终找到全局变量myInfo，this指向全局对象// 例子三var name = &apos;无名氏&apos;;var myInfo = &#123; name: &apos;以乐之名&apos;, say: function() &#123; setTimeout(() =&gt; &#123; console.log(this.name); &#125;) &#125;&#125;;myInfo.say(); // 以乐之名// 箭头函数找到say: function()&#123;&#125;，因此this的作用域来自myInfo TIPS: setTimeout/setInterval/alert的调用者都是全局对象 “箭头函数的this始终指向函数定义时的this，而非执行（调用）时的this。箭头函数中的this必须通过作用域链一层一层向外查找，来确定this指向。” 扩展：箭头函数的书写规则1. 箭头函数只能用函数表达式，不能用函数声明式写法（不包括匿名函数）1234567// 函数表达式const getName = (name) =&gt; &#123; return &apos;myName: &apos; + name &#125;;// 匿名函数setTimeout((name) =&gt; &#123; console.log(name);&#125;, 1000) 2. 如果参数只有一个，可不加括号()；如果没有参数或多个参数需加括号()1234567891011121314// 只有一个参数const getName = name =&gt; &#123; return `myName: $&#123;name&#125;`;&#125;// 无参数const getName = () =&gt; &#123; return &apos;myName: &quot;以乐之名&quot;&apos;;&#125;// 多参数const getName = (firstName, lastName) =&gt; &#123; return `myName: $&#123;firstName&#125; $&#123;lastName&#125;`;&#125; 3. 函数体只有一个可不加花括号{}1const getName = name =&gt; return `myName: $&#123;name&#125;`; 4. 函数体没有花括号{}，可不写return，会自动返回1const getName = name =&gt; `myName: $&#123;name&#125;`; 参考文档： 你不知道的JavaScript（上卷） 彻底理解js中this的指向，不必硬背。 this|MDN 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（五）：学会函数柯里化（curry)]]></title>
    <url>%2F2019%2F01%2F22%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%AD%A6%E4%BC%9A%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%EF%BC%88curry%2F</url>
    <content type="text"><![CDATA[柯里化（Curring, 以逻辑学家Haskell Curry命名) 写在开头柯里化理解的基础来源于我们前几篇文章构建的知识，如果还未能掌握闭包，建议回阅前文。 代码例子会用到 apply/call ，一般用来实现对象冒充，例如字符串冒充数组对象，让字符串拥有数组的方法。待对象讲解篇会细分解析。在此先了解，两者功能相同，区别在于参数传递方式的不同， apply 参数以数组方式传递，call 多个参数则是逗号隔开。 12apply(context, [arguments]);call(context, arg1, arg2, arg3, ....); 代码例子中使用到了ES6语法，对ES6还不熟悉的话，可学习社区这篇文章：《30分钟掌握ES6/ES2015核心内容（上）》 函数柯里化函数柯里化在JavaScript中其实是高阶函数的一种应用，上篇文章我们简略介绍了高阶函数（可以作为参数传递，或作为返回值）。 理论知识太枯燥，来个生活小例子，”存款买房”（富二代绕道）。假设买房是我们存钱的终极目标。那么在买房前，存在卡里的钱（老婆本）就不能动。等到够钱买房了，钱从银行卡取出来，开始买买买。。。 函数柯里化就像我们往卡里存钱，存够了，才能执行买房操作，存不够，接着存。 函数柯里化公式先上几个公式（左边是普通函数，右边就是转化后柯里化函数支持的调用方式）： 12345678// 公式类型一fn(a,b,c,d) =&gt; fn(a)(b)(c)(d);fn(a,b,c,d) =&gt; fn(a, b)(c)(d);fn(a,b,c,d) =&gt; fn(a)(b,c,d);// 公式类型二fn(a,b,c,d) =&gt; fn(a)(b)(c)(d)();fn(a,b,c,d) =&gt; fn(a);fn(b);fn(c);fn(d);fn(); 两种公式类型的区别 —— 函数触发执行的机制不同： 公式一当传入参数等于函数参数数量时开始执行 公式二当没有参数传入时（且参数数量满足）开始执行 通过公式，我们先来理解这行代码 fn(a)(b)(c)(d), 执行 fn(a) 时返回的是一个函数，并且支持传参。何时返回的是值而不是函数的触发机制控制权在我们手里，我们可以为函数制定不同的触发机制。 普通的函数调用，一次性传入参数就执行。而通过柯里化，它可以帮我们实现函数部分参数传入执行（并未立即执行原始函数，钱没存够接着存），这就是函数柯里化的特点：“延迟执行和部分求值” “函数柯里化：指封装一个函数，接收原始函数作为参数传入，并返回一个能够接收并处理剩余参数的函数” 函数柯里化的例子1234// 等待我们柯里化实现的方法addfunction add(a, b, c, d) &#123; return a + b + c + d;&#125;; 1234567891011// 最简单地实现函数add的柯里化// 有点low，有助于理解function add(a, b, c, d) &#123; return function(a) &#123; return function(b) &#123; return function(c) &#123; return a + b + c + d; &#125; &#125; &#125;&#125; 分析代码知识点： 函数作为返回值返回，闭包形成，外部环境可访问函数内部作用域 子函数可访问父函数的作用域，作用域由内而外的作用域链查找规则，作用域嵌套形成 在函数参数数量不满足时，返回一个函数（该函数可接收并处理剩余参数） 当函数数量满足我们的触发机制（可自由制定），触发原始函数执行 前几篇文章的知识点此时刚好。可见基础知识的重要性，高阶的东西始终要靠小砖头堆砌出来。 弄清原理后，接下来就是将代码写得更通用些（高大上些）。 1234567891011121314151617181920212223// 公式类型一: 参数数量满足函数参数要求，触发执行// fn(a,b,c,d) =&gt; fn(a)(b)(c)(d);const createCurry = (fn, ...args) &#123; let _args = args || []; let length = fn.length; // fn.length代码函数参数数量 return (...rest) =&gt; &#123; let _allArgs = _args.slice(0); // 深拷贝闭包共用对象_args，避免后续操作影响（引用类型） _allArgs.push(...rest); if (_allArgs.length &lt; length) &#123; // 参数数量不满足原始函数数量，返回curry函数 return createCurry.call(this, fn, ..._allArgs); &#125; else &#123; // 参数数量满足原始函数数量，触发执行 return fn.apply(this, _allArgs); &#125; &#125;&#125;const curryAdd = createCurry(2);let sum = curryAdd(3)(4)(5); // 14 12345678910111213141516171819202122// 公式类型二: 无参数传入时并且参数数量已经满足函数要求// fn(a, b, c, d) =&gt; fn(a)(b)(c)(d)();// fn(a, b, c, d) =&gt; fn(a);fn(b);fn(c);fn(d);fn();const createCurry = (fn, ...args) =&gt; &#123; let all = args || []; let length = fn.length; return (...rest) =&gt; &#123; let _allArgs = all.slice(0); _allArgs.push(...rest); if (rest.length &gt; 0 || _allArgs.length &lt; length) &#123; // 调用时参数不为空或存储的参数不满足原始函数参数数量时，返回curry函数 return createCurry.call(this, fn, ..._allArgs); &#125; else &#123; // 调用参数为空(),且参数数量满足时，触发执行 return fn.apply(this, _allArgs); &#125; &#125;&#125;const curryAdd = createCurry(2);let sum = curryAdd(3)(4)(5)(); // 14 为实现公式中不同的两种调用公式，两个createCurry方法制定了两种不同的触发机制。记住一个点，函数触发机制可根据需求自行制定。 偏函数与柯里化的区别先上个公式看对比： 1234567// 函数柯里化：参数数量完整fn(a,b,c,d) =&gt; fn(a)(b)(c)(d);fn(a,b,c,d) =&gt; fn(a,b)(c)(d);// 偏函数：只执行了部分参数fn(a,b,c,d) =&gt; fn(a);fn(a,b,c,d) =&gt; fn(a, b); “函数柯里化中，当你传入部分参数时，返回的并不是原始函数的执行结果，而是一个可以继续支持后续参数的函数。而偏函数的调用方式更像是普通函数的调用方式，只调用一次，它通过原始函数内部来实现不定参数的支持。” 如果已经看懂上述柯里化的代码例子，那么改写支持偏函数的代码，并不难。 12345678910// 公式：// fn(a, b, c, d) =&gt; fn(a);// fn(a, b, c, d) =&gt; fn(a,b,c);const partialAdd = (a = 0, b = 0, c = 0, d = 0) =&gt; &#123; return a + b + c +d;&#125;partialAdd(6); // 6partialAdd(2, 3); // 5 使用ES6函数参数默认值，为没有传入参数，指定默认值为0，支持无参数或不定参数传入。 柯里化的特点： 参数复用（固定易变因素） 延迟执行 提前返回 柯里化的缺点柯里化是牺牲了部分性能来实现的，可能带来的性能损耗： 存取 arguments 对象要比存取命名参数要慢一些 老版本浏览器在 arguments.lengths 的实现相当慢(新版本浏览器忽略) fn.apply() 和 fn.call() 要比直接调用 fn() 慢 大量嵌套的作用域和闭包会带来开销，影响内存占用和作用域链查找速度 柯里化的应用 利用柯里化制定约束条件，管控触发机制 处理浏览器兼容（参数复用实现一次性判断） 函数节流防抖（延迟执行） ES5前bind方法的实现 一个应用例子：浏览器事件绑定的兼容处理123456789101112131415161718192021222324// 普通事件绑定函数var addEvent = function(ele, type, fn, isCapture) &#123; if(window.addEventListener) &#123; ele.addEventListener(type, fn, isCapture) &#125; else if(window.attachEvent) &#123; ele.attachEvent(&quot;on&quot; + type, fn) &#125;&#125;// 弊端：每次调用addEvent都会进行判断// 柯里化事件绑定函数var addEvent = (function() &#123; if(window.addEventListener) &#123; return function(ele, type, fn, isCapture) &#123; ele.addEventListener(type, fn, isCapture) &#125; &#125; else if(window.attachEvent) &#123; return function(ele, type, fn) &#123; ele.attachEvent(&quot;on&quot; + type, fn) &#125; &#125;&#125;)()// 优势：判断只执行一次，通过闭包保留了父级作用域的判断结果 秒懂反柯里化先上公式，从来没有这么喜欢写公式，简明易懂。123// 反柯里化公式：curryFn(a)(b)(c)(d) = fn(a, b, c, d);curryFn(a) = fn(a); 看完公式，是不是似曾相识，这不就是我们日常敲码的普通函数么？没错的，函数柯里化就是把普通函数变成成一个复杂的函数，而反柯里化其就是柯里化的逆反，把复杂变得简单。 函数柯里化是把支持多个参数的函数变成接收单一参数的函数，并返回一个函数能接收处理剩余参数：fn(a,b,c,d) =&gt; fn(a)(b)(c)(d)，而反柯里化就是把参数全部释放出来：fn(a)(b)(c)(d) =&gt; fn(a,b,c,d)。 1234// 反柯里化：最简单的反柯里化（普通函数）function add(a, b, c, d) &#123; return a + b + c + d;&#125; 反思：为何要使用柯里化函数柯里化是函数编程中的一个重要的基础，它为我们提供了一种编程的思维方式。显然，它让我们的函数处理变得复杂，代码调用方式并不直观，还加入了闭包，多层作用域嵌套，会有一些性能上的影响。 但在一些复杂的业务逻辑封装中，函数柯里化能够为我们提供更好的应对方案，让我们的函数更具自由度和灵活性。 实际开发中，如果你的逻辑处理相对复杂，不妨换个思维，用函数柯里化来实现，技能包不嫌多。说到底，程序员就是解决问题的那群人。 写在结尾本篇函数柯里化知识点的理解确实存在难度，暂时跳过这章也无妨，可以先了解再深入。耐得主寂寞的小伙伴回头多啃几遍，没准春季面试就遇到了。 参考文档： js高阶函数应用—函数柯里化和反柯里化 前端基础进阶（八）：深入详解函数的柯里化 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（四）：略知函数式编程]]></title>
    <url>%2F2019%2F01%2F21%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%95%A5%E7%9F%A5%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[系列更文前三篇文章，围绕了一个重要的知识点：“函数”。函数调用栈、函数执行上下文、函数作用域到闭包。可见不理解函数式编程，代码都撸不好。 函数是一等公民函数与其它数据类型一样，可以作为值赋给变量，作为参数传递或返回值返回，也可以像对象一样给函数创建属性（不推荐给函数加属性，虽然可用）。 函数在实际开发中应用： 函数声明 函数表达式 匿名函数 自执行函数 12345678910111213141516171819// 函数声明function getName() &#123; //... &#125;// 函数表达式var getName = function() &#123; //...&#125;// 匿名函数setTimeout(function()&#123; //...&#125;, 1000);// 自执行函数(function()&#123; //...&#125;)(); 何为一等：优先级函数声明在“执行上下文创建阶段”就会进行声明并赋值，而var声明变量会初始化为undefined，实际赋值会等到“执行上下文执行阶段”。函数表达式使用var来声明，因此它遵循的是变量声明的规则。（ 如果函数名与变量重名，函数优先赋值） “函数声明优先级高于变量声明，函数表达式，自称一等公民。” 12345678910111213141516171819// 代码书写:console.log(getName);getName();var getName;getName = '我的名字';function getName()&#123; //...&#125;console.log(getName);// 实际执行var getName; // 变量名与函数名重名，函数优先赋值function getName() &#123; //...&#125;console.log(getName);getName();getName = '我的名字';console.log(getName); 函数式编程函数式编程是一种编程思维方式，它建议我们在程序编写时，对复用性高的功能代码进行函数封装，实现代码的高复用性。 新手朋友往往是一块代码多次出现在不同的地方，常见的例子就是ajax请求方法运用，在需要请求后端数据时多次出现一串ajax请求代码。 如果想要对ajax请求统一做异常处理，或管理后端返回状态码，是不是每处代码都要修改？？？但是如果把ajax请求代码封装成一个函数，接口url和数据data通过参数传递到函数内部处理，后期扩展维护都方便修改，复用性扩展性都更加优秀。 所以实际敲代码过程中，要经常提醒自己运用函数式编程的思维方式，只要有可能出现多次的业务逻辑代码，那么就要考虑是否封装成函数，以便后续统一调用。 12345678910function sumScore(list) &#123; var totalScore = 0 for (var i = 0; i &lt; list.length; i++) &#123; totalScore += list[i]; &#125; return totalScore; &#125;var list = [10, 8, 9, 7];var totalScore = sumScore(list); // 计算总分 TIPS: 函数名建议使用动词，如addUser()，sumScore()，getUser()… 纯函数 纯函数：相同的输入对应相同的输出，稳定没有副作用（不改变外部变量的值） 相同的输入，相同的输出相同的参数传入调用，要有相同的结果输出，概念有点绕，上代码栗子： 123456function getDate() &#123; return new Date();&#125;var dateOne = getDate();var dateTwo = getDate();var dateThr = getDate(); 上述代码中调用了三次getDate()，三次返回的值都不一样。相同的输入并没有相同的输出，所以getDate()并不是一个纯函数。 TIPS：函数中使用new Date(),Math.random(), 异步等都可能造成函数不稳定。 没有副作用（不改变外部环境的值）部分小伙伴的代码，在函数里面直接修改参数的值，这是一种非常不推荐的做法，这样做会造成代码环境不可控制，污染外部变量环境，一旦出现错误排查起来：心累，三个字心好累。 函数有自己的局部作用域，因此函数中，对需要使用到的变量，管控在自身的作用域下。如果需要修改外部参数的值，通过函数返回值返回给函数调用者。修改外部参数值的操作不在函数内进行，确保对外部环境没有副作用。 TIPS：参数为引用类型时，参数复制的是地址指针，避免修改了引用类型中属性值污染外部环境，如需使用建议手动深拷贝赋值。 12345678910111213141516171819function getGirlGift(list) &#123; // 避免污染参数为引用类型的list，对list深拷贝 var newList = JSON.parse(JSON.stringify(list)); newList.map(girl =&gt; &#123; girl.gift = girl.age &gt; 18 ? 'lipstick' : 'chocolates'; &#125;); return newList; // 返回新值&#125;var girlList = [ &#123;name: 'Kelly', age: 20&#125;, &#123;name: 'Alic', age: 16&#125;, &#123;name: 'Moon', age: 23&#125;, &#123;name: 'Nana', age: 17&#125;];var girlGiftList = getGirlGift(girlList);girlList // 原用girlList不变girlGiftList // 每个girl多了gift属性 Array对象的函数（纯与不纯）12345678910111213// 不纯的函数array.push(); // 数组尾部插入array.pop(); // 删除并返回数组最后一个元素array.unshift(); // 数组头部插入array.shift(); // 删除并返回数组第一元素array.splice(); // 删除元素，并向数组添加元素array.reverse(); // 颠倒数组元素的顺序array.sort(); // 排序数组元素// 纯函数array.slice(); // 数组中返回选定的元素array.concat(); // 连接数组，并发挥新数组array.join(); // 按分隔符连接数组，返回字符串 &gt;&gt;更多Array对象方法，参考W3C 纯函数的应用：状态管理Redux，Vuex流行框架中状态管理就是纯函数的实践应用，引用redux的应用，reducer中返回新的状态数据state，但不能去直接去修改state数据，以下为redux中reducer的例子代码： 12345678910111213141516171819202122export default (state = defaultState, action) =&gt; &#123; let newState = JSON.parse(JSON.stringify(state)); switch (action.type) &#123; case DELETE_TODO_ITEM: newState.list.splice(action.value, 1); break; case ADD_TODO_ITEM: if (newState.inputValue.trim().length) &#123; newState.list.push(newState.inputValue); &#125; newState.inputValue = ''; break; case INIT_LIST_ACTION: newState = action.data break; default: break; &#125; return newState;&#125; “自执行函数 + 闭包” 实现模块化模块化包括： 私有变量 私有方法 公有变量 公有方法 上篇中《前端进击的巨人（三）：从作用域走进闭包》我们讲解了作用域、闭包的原理机制。 “自执行函数可实现块级作用域，而闭包则可实现外部环境对函数作用域内部数据的访问。” 12345678910111213141516171819202122// 自执行函数 + 闭包实现模块化(function MakeModule(window) &#123; var name = '以乐之名'; var age = 28; var job = '程序员'; function changeJob(newJob) &#123; job = newJob; &#125; function getName() &#123; return name; &#125; window.modulePublic = &#123; changeJob: changeJob, getName: getName &#125;&#125;)(window);window.modulePublic.getName();window.modulePublic.changeJob('产品经理'); 对作用域，以及闭包知识还没掌握的小伙伴，可回阅《前端进击的巨人（三）：从作用域走进闭包》。 高阶函数 高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回 JavaScript中常用的高阶函数： Array.prototype.map （映射遍历） Array.prototype.filter （过滤） Array.prototype.reducer（累计） 除了内置的高阶函数，我们实际开放中，高阶函数应用的最多就是回调函数了。12345function getOrder(url, datas, callBack) &#123; return $.post(url, datas, callBack(orderInfo));&#125;// getOrder就是一个高阶函数，接收callBack函数作为参数 高阶函数的概念很简单，“本身是函数，参数是函数，或返回值是函数”。 参考文档： JavaScript利用闭包实现模块化 [翻译]浅谈JavaScript中的高阶函数 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（三）：从作用域走进闭包]]></title>
    <url>%2F2019%2F01%2F19%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BB%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%B5%B0%E8%BF%9B%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[进击的巨人第三篇，本篇就作用域、作用域链、闭包等知识点，一一击破。 作用域 作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符（变量）的访问权限 ——《你不知道的JavaScript上卷》 作用域有点像圈地盘，大家划好区域，然后各自经营管理，井水不犯河水。 1234567891011var globaValue = &apos;我是全局作用域&apos;;function foo() &#123; var fooValue = &apos;我是foo作用域&apos;; function bar() &#123; var barValue = &apos;我是bar作用域&apos;; &#125;&#125;function other() &#123; var otherValue = &apos;我是other作用域&apos;;&#125; 作用域的变量声明不同作用域下命名相同的变量不会发生冲突，“就近原则”选取。 123456var name = &apos;任何名字&apos;;function getName() &#123; var name = &apos;以乐之名&apos;; console.log(name); // &apos;以乐之名&apos;&#125;console.log(name); // &apos;任何名字&apos; 作用域的类型执行上下文环境有：全局、函数、eval。那么作用域也有三种，ES6新增了块级作用域。 全局作用域 函数作用域 eval作用域（不推荐使用eval，暂时忽略） 块级作用域（ES6新增） 全局作用域JavaScript中全局环境只有一个，对应的全局作用域也只有一个。没有用var/let/const声明的变量默认都会成为全局变量。 12345function foo() &#123; a = 10;&#125;;foo();console.log(a); // 10 变全局变量（意外由此发生） 函数作用域ES6之前，想要实现局部作用域的方式，都是是通过在函数中声明变量来实现的，所以也称函数作用域，支持嵌套多个。 123456var a = 20;function foo() &#123; var a = 10; console.log(a); // 10;&#125;foo(); 函数中声明变量时，建议在函数起始部分声明所有变量，方便查看，切记要用var/let/const声明，防止手抖将局部变量变成成全局变量。 12345function getClient() &#123; var name; var phone; var sex;&#125; 块级作用域我们先来理解什么是块？所谓块，其实就是被大括号{}包裹的代码部分。123if (true) &#123; // 这里就是块了，也可称代码块&#125; ES6前没有块级作用域的概念，所以{}中并没有自己的作用域。如果我们想在ES5的环境下构建块级作用域，一般都是是通过立即执行函数来实现的。 123456var name = &apos;任何名字&apos;;(function(window) &#123; var name = &apos;以乐之名&apos;; console.log(name); // &apos;以乐之名&apos;&#125;(window));console.log(name); // &apos;任何名字&apos; ES5借助函数作用域来实现块级作用域的方式，会让我们的代码充斥大量的立即执行函数(IIFE)，不便于代码的阅读。好的代码的就跟好的文章一样，让阅读的人读来舒畅明了。 为此，ES6新增块级作用域的概念，使用let/const声明变量的方式，即可将其作用域指定在代码块中，跟函数作用域一样支持嵌套。 12345let i = 0;for (let i = 0; i &lt; 10; i++)&#123; console.log(i);&#125;i; // 0 let/const不允许变量提升，必须“先声明再使用”。这种限制，称为“暂时性死区”。这也能让我们在代码编写阶段变得更加规范化，执行跟书写顺序保持一致。 作用域链（变量查询规则）变量被作用域所管理，那么变量在作用域中的查找规则，就是所谓的作用域链。 作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问 ——《JavaScript高级程序涉及》 “在当前执行环境开始查找使用到的变量，如果找到，则返回其值。如果找不到，会逐层往上级（父作用域）查找，直到全局作用域”。 12345678var money = 100;function foo() &#123; function bar() &#123; console.log(money); &#125; bar();&#125;foo(); 自由变量变量我们见的不少，但”自由变量”听着是不是挺唬人的。其实对它，我们并不陌生。 “自由变量：当前执行环境使用到，但并未在当前执行环境声明的变量（函数参数arguments排除）” 函数调用时，进入执行上下文创建阶段，会对argument进行隐式的变量声明。 123456var outer = &apos;我是外面变量&apos;;function foo() &#123; var inner = &apos;我是里面变量，不是自由变量&apos;; console.log(outer); // 这里用到了outer，但outer并不在函数foo中声明，所以outer就是foo中的自由变量&#125; “自由变量的作用域由词法环境决定，也就是它的作用域在代码书写阶段就已经确定了，而不是在代码编译执行阶段确定。” “自由变量的值是在代码执行时确定的，变量变量变量，值肯定要变，所以自由变量的值只有在程序运行阶段才能确定。” 闭包开篇第一文我们就执行环境，执行栈做出了详解，有所遗忘的可再温习。执行栈是我们理解闭包原理基础中的基础。 函数调用栈过程的图再晒出来，顺便温习下。 1234567function foo () &#123; function bar () &#123; return &apos;I am bar&apos;; &#125; return bar();&#125;foo(); 函数调用时入栈，调用结束出栈。执行函数时，会创建一个变量对象去存储函数中的变量，方法，参数arguments等，结束调用时，该变量对象就会被销毁。(理想的情况下，不理想的情况就是出现“闭包”调用了)。 什么是闭包？ 闭包是指有权访问另外一个函数作用域的变量的函数。 ——《JavaScript高级程序设计》 闭包是指那些能够访问自由变量的函数。 ——MDN 闭包的特点首先是函数，其次是它可以访问到父级作用域的变量对象，即使父级函数完成调用后“理应出栈销毁”。 判定闭包出现 函数作为参数传递 函数作为返回值传递 12345678910function foo() &#123; var fooVal = &apos;2019&apos;; var bar = function() &#123; console.log(fooVal); // bar中使用到了自由变量fooVal &#125; return bar; // 函数作为参数返回&#125;var getValue = foo();getValue(); // 2019 对函数中谁是闭包，各文档解释不一。在此我们遵照Chrome的方式，暂且称foo是闭包。 因为作用域和作用域链规则的限定，子环境的自由变量只能逐层向上到父环境查找。 但是通过闭包，我们在外部环境也可以获取到变量fooVal，虽然foo()函数执行完成了，但它并没从函数调用栈中销毁，其变量对象存储仍然能被访问到。 实际执行过程请看图： 把上述代码改以下，接着看：12345678910function foo() &#123; var fooVal = &apos;2019&apos;; var bar = function() &#123; console.log(fooVal); // bar中使用到了自由变量fooVal &#125; return bar; // 函数作为参数返回&#125;var getValue = foo();var fooVal = &apos;2018&apos;; // 这里的fooVal是全局作用域的变量getValue(); // 2019 答案与结果不符的小伙伴要回头理解下自由变量了。“自由变量的作用域在代码书写时（函数创建时）就确定了”，所以函数中getValue()使用的fooVal在foo的作用域下，而不是在全局作用域下。 答对的小伙伴们再来一道题，加深你的记忆 12345678910111213function fn() &#123; var max = 10; function bar(x) &#123; if (x &gt; max) &#123; console.log(x) &#125; &#125; return bar;&#125;var f1 = fn();var max = 100;f1(20); // 输出20 题目解析：max作为函数bar中的自由变量，它的作用域在函数bar创建的时候就确定了，就是函数fn中的max，所以它的作用域链查找到fn中已经结束并返回了，不会再向上找到全局作用域。 注意：栈中存储的不只是闭包中使用到的自由变量，而是父级函数的整个变量对象（父级函数作用域中声明的方法，变量，参数等） 闭包的应用场景上文中已经阐述了闭包的特点，就是能够让我们跨作用域取值（不局限于父子作用域）。列举两个实际开放中常用的栗子： 封装回调保存作用域 12345678for(var i = 1; i &lt; 5; i++) &#123; setTimeout((function(i)&#123; return function() &#123; console.log(i); &#125; &#125;)(i), i * 1000)&#125;// 原理：通过自执行函数传参i，然后返回一个函数（闭包）中使用i，使父函数的变量对象一直存在 私有变量和方法实现模块化 1234567891011121314151617181920var makePeople = function () &#123; var _name = &apos;以乐之名&apos;; return &#123; getName: function () &#123; console.log(_name); &#125;, setName: function (name) &#123; if (name != &apos;Hello world&apos;) &#123; _name = name; &#125; &#125; &#125;&#125;var me = makePeople();me.getName(); // &apos;以乐之名&apos;me.setName(&apos;KenTsang&apos;); me.getName(); // &apos;KenTsang&apos;// 原理：私有变量_name没有对外访问权限，但通过闭包使其一直保留在内存中，可以被外部调用 闭包的应用场景还有很多，具体实际情况还需具体分析。 闭包造成的内存泄露闭包的使用，破坏了函数的出栈过程。解释执行栈的时候，讲到同个函数即使调用自身，创建的变量对象也并非同一个，其内存存储是各自独立的。 栈中只入不出，函数的变量对象没有被有效回收，就会造成浏览器内存占用逐步增加，内存占用过高的情况下，就会导致页面卡顿，甚至浏览器崩溃。这就是我们常说的闭包造成的“内存泄露”。 所以，一名合格的前端，除了会用闭包，还要正确的解除闭包引用。垃圾回收机制讲解时，通过设置变量值为null时可已解除变量的引用，以便下一次垃圾回收销毁它。 1234567891011function foo() &#123; var fooVal = &apos;2019&apos;; var bar = function() &#123; console.log(fooVal); &#125; return bar; &#125;var getValue = foo();var fooVal = &apos;2018&apos;; getValue();getValue = null; // 解除引用，下一次垃圾回收就会回收了 写在结尾闭包算是前端初学者的一个难点，能解释清楚并不容易，涉及到作用域，执行上下文环境、变量对象等等。 零散知识的内聚汇总，正是是系列更文的初衷所在。 知识不是小段子，听完笑过就忘，唯有形成体系，达成闭环，才能深植入记忆中。 参考文档： 深入理解javascript原型和闭包 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（二）：栈、堆、队列、内存空间]]></title>
    <url>%2F2019%2F01%2F15%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%A0%88%E3%80%81%E5%A0%86%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[面试经常遇到的深浅拷贝，事件轮询，函数调用栈，闭包等容易出错的题目，究其原因，都是跟JavaScript基础知识不牢固有关，下层地基没打好，上层就是豆腐渣工程，新人小白，踏实踩土才是关键。 打地基第二篇：本篇我们将对JavaScript数据结构的知识点详解一二。 JavaScript中有三种数据结构： 栈（stack) 、堆（heap)、 队列（queue)。 栈（stack）栈的特点是“LIFO，即后进先出（Last in, first out）”。数据存储时只能从顶部逐个存入，取出时也需从顶部逐个取出。《前端进击的巨人（一）：执行上下文与执行栈，变量对象》中解释执行栈时，举了一个乒乓球盒子的例子，来演示栈的存取方式，这里再举个栗子搭积木。 举个栗子：乒乓球盒子/搭建积木 JavaScript中Array数组模拟栈：1234var arr = [1, 2, 3, 4, 5];arr.push(6); // 存入数据 arr -&gt; [1, 2, 3, 4, 5, 6]arr.pop(); // 取出数据 arr -&gt; [1, 2, 3, 4, 5] 堆（heap)堆的特点是“无序”的key-value“键值对”存储方式。 举个栗子：书架存书 我们想要在书架上找到想要的书，最直接的方式就是通过查找书名，书名就是我们的key。拿着这把key，就可以轻松检索到对应的书籍。 “堆的存取方式跟顺序没有关系，不局限出入口”。 队列 （queue)队列的特点是是“FIFO，即先进先出（First in, first out）” 。数据存取时“从队尾插入，从队头取出”。 “与栈的区别：栈的存入取出都在顶部一个出入口，而队列分两个，一个出口，一个入口”。 举个栗子：排队取餐 JavaScript中Array数组模拟队列：123456var arr = [1, 2, 3, 4, 5];// 队尾inarr.push(6); // 存入 arr -&gt; [1, 2, 3, 4, 5, 6]// 队头outarr.shift(); // 取出 arr -&gt; [2, 3, 4, 5, 6] 栈、堆、队列在JavaScript中的应用1. 代码运行方式（栈应用/函数调用栈）《前端进击的巨人（一）：执行上下文与执行栈，变量对象》详解了JavaScript运行时的函数调用过程，而其中执行栈（函数调用栈）就是用到栈的数据结构。 JavaScript中函数的执行过程，其实就是一个入栈出栈的过程: 当脚本要调用一个函数时，JS解析器把该函数推入栈中（push）并执行 当函数运行结束后，JS解释器将它从堆栈中推出（pop） 具体执行过程可翻阅上篇文章《前端进击的巨人（一）：执行上下文与执行栈，变量对象》，这里不再赘述。 2. 内存存储（栈、堆）JavaScript中变量类型有两种： 基础类型（Undefined, Null, Boolean, Number, String, Symbol）一共6种 引用类型（Object) 基础类型的值保存在栈中，这些类型的值有固定大小，“按值来访问”； 引用类型的值保存在堆中，栈中存储的是引用类型的引用地址（地址指针），“按引用访问”，引用类型的值没有固定大小，可扩展（一个对象我们可以添加多个属性）。 3. 事件轮询（队列）JavaScript中事件轮询（Event Loop）的执行机制，就是采用队列的存取方式，因事件轮询（Event Loop）也是JS基础中的一个比较难理解的知识点，后续另开一篇章再作详细探究。 深浅拷贝将一个变量的值赋值给另一个变量，相当于在栈内存中创建了一个新的内存空间，然后从栈中复制值，存储到这个新空间中。对于基本类型，栈中存储的就是它自身的值，所以新内存空间存储的也是一个值。直接改变新变量的值，不会影响到旧变量的值，因为他们值存储的内存空间不同。 1234567// 基本类型复制变量var a = 10;var b = a;b = 20;a // 10b // 20 而对于引用类型来说，同样是复制栈中存储的值。但是栈存储的只是其引用地址，其具体的值存储在堆中。变量复制仅复制栈中存储的值，不会复制堆中存储的值，所以新变量在栈中的值是一个地址指针。123456// 引用类型复制变量var a = &#123; age: 27 &#125;;var b = a;b.age = 29;a.age == b.age; // 29 可见，变量复制赋值，都属于栈存储拷贝，因此深浅拷贝可以这样区分分： “浅拷贝：栈存储拷贝” “深拷贝：栈堆存储拷贝” 深拷贝会同时开辟新的栈内存，堆内存空间。 1234567// 利用JSON对象方法实现深拷贝var a = &#123; age: 27 &#125;;var b = JSON.parse(JSON.stringify(a));b.age = 29;a.age // 27b.age // 29 函数传参数是按值传递？按引用传递？12345678var person = &#123; age: 27&#125;;function foo (person) &#123; person.age = 29;&#125;foo(person);person.age // 29; 函数调用时，会对参数赋值。而参数传递过程其实同样是变量复制的过程，所以它是按值传递。var person = person，因为传递参数是对象时，变量复制仅复制的栈存储（浅拷贝），所以修改对象属性会造成外部变量对象的修改。 至此，当我们理清栈、堆数据结构，以及JS中数据类型存取方式。深浅拷贝问题也就通顺了。 内存空间管理JavaScript执行过程中内存分配： 为变量对象分配需要的内存 在分配到的内存中进行读/写操作 不再使用时将其销毁，释放内存 内存管理不善，会出现内存泄露，造成浏览器内存占用过多，页面卡顿等问题。（后续性能优化篇章续讲） 垃圾回收机制JavaScript中有自动垃圾回收机制，会通过标记清除的算法识别哪些变量对象不再使用，对其进行销毁。开发者也可在代码中手动设置变量值为null（a = null）进行标记清除，让其失去引用，以便下一次垃圾回收时进行有效回收。 局部环境中，函数执行完成后，函数局部环境声明的变量不再需要时，就会被垃圾回收销毁（理想的情况下，闭包会阻止这一过程）。 全局环境只有页面退出时才会出栈，解除变量引用。所以开发者应尽量避免在全局环境中创建全局变量，如需使用，也要在不需要时手动标记清除，将其内存释放掉。 垃圾回收算法除了“标记清除”，还有一种“引用计数”，不常用，仅作了解。 参考文档： stack的三种含义 内存空间详细图解 JavaScript变量——栈内存or堆内存 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端进击的巨人（一）：执行上下文与执行栈，变量对象]]></title>
    <url>%2F2019%2F01%2F15%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%A0%88%EF%BC%8C%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[写在开篇已经不敢自称前端小白，曾经吹过的牛逼总要一点点去实现。 正如前领导说的，自己喝酒吹过的牛皮，跪着都得含着泪去实现。 那么没有年终完美总结，来个新年莽撞开始可好。 进击巨人系列开篇，不忘初心，砥砺前行。 本文首发Github，期待Star！https://github.com/ZengLingYong/blog 理解执行上下文 执行上下文(Execution Context): 函数执行前进行的准备工作（也称执行上下文环境） 运行JavaScript代码时，当代码执行进入一个环境时，就会为该环境创建一个执行上下文，它会在你运行代码前做一些准备工作，如确定作用域，创建局部变量对象等。 具体做了什么先按下不表，先来看下JavaScript执行环境有哪些？ JavaScript中执行环境 全局环境 函数环境 eval函数环境 （已不推荐使用） 那么与之对应的执行上下文类型同样有3种： 执行上下文的类型 全局执行上下文 函数执行上下文 eval函数执行上下文 JavaScript运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么调用函数，就会进入函数执行环境，对应就会生成该函数的执行上下文。 先插播一个知识点：“JS是单线程”! “单线程”! “单线程”! 简单理解下单线程，就是同个时间段只能做一件任务，完成之后才可以继续下一个任务。正如女朋友只有一个，各位面向对象的小伙伴们你们说对不对？有女票的必须说没毛病。 既然是这样，必须要有一个排队机制，不然就会出现几个流氓霸着车道不让过，”还有王法么？” JS中管理多个执行上下文函数编程中，代码中会声明多个函数，对应的执行上下文也会存在多个。在JavaScript中，通过栈的存取方式来管理执行上下文，我们可称其为执行栈，或函数调用栈(Call Stack)。 在说明执行栈前，先来补下“栈数据结构”知识点。 栈数据结构借助前端大神的例子，用乒乓球盒子来理解栈的存取方式。（这个例子让我彻底记住了栈数据结构） 栈遵循“先进后出，后进先出”的规则，或称LIFO (“Last In First Out”) 规则。 如图所示，我们只能从栈顶取出或放入乒乓球，最先放进盒子的总是最后才能取出。栈中“放入/取出”，也可称为“入栈/出栈”。 总结栈数据结构的特点： 后进先出，先进后出 出口在顶部，且仅有一个 执行栈（函数调用栈）理解完栈的存取方式，我们接着分析JavaScript中如何通过栈来管理多个执行上下文。 程序执行进入一个执行环境时，它的执行上下文就会被创建，并被推入执行栈中(入栈)；程序执行完成时，它的执行上下文就会被销毁，并从栈顶被推出(出栈)，控制权交由下一个执行上下文。 因为JS执行中最先进入全局环境，所以处于“栈底的永远是全局环境的执行上下文”。而处于“栈顶的是当前正在执行函数的执行上下文”，当函数调用完成后，它就会从栈顶被推出（理想的情况下，闭包会阻止该操作，闭包后续文章深入详解）。 “全局环境只有一个，对应的全局执行上下文也只有一个，只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底” 文字太多不如上代码系列 ——》代码 + 图，一览无遗：1234567function foo () &#123; function bar () &#123; return &apos;I am bar&apos;; &#125; return bar();&#125;foo(); 执行上下文的生命周期执行上下文的生命周期有两个阶段： 创建阶段（进入执行上下文） 执行阶段（代码执行） 创建阶段：函数被调用时，进入函数环境，为其创建一个执行上下文，此时进入创建阶段 执行阶段：执行函数中代码时，此时执行上下文进入执行阶段 创建阶段的操作 创建变量对象 函数环境会初始化创建Arguments对象（并赋值） 函数声明（并赋值） 变量声明，函数表达式声明（未赋值） 确定this指向（this由调用者确定） 确定作用域（词法环境决定，哪里声明定义，就在哪里确定） 执行阶段的操作 变量对象赋值 变量赋值 函数表达式赋值 调用函数 顺序执行其它代码 看到这里，我们不经会问变量对象是什么鬼，它与代码中常见的函数声明，变量声明有神马关系？？？ 变量对象和活动对象的区别：当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象(AO)，这时候活动对象上的各种属性才能被访问。 “创建阶段对函数声明做赋值，变量及函数表达式仅做声明，真正的赋值操作要等到执行上下文代码执行阶段”。 代码例子1：变量提升123456789101112function foo() &#123; console.log(a); // 输出undefined var a = 'I am here'; // 赋值&#125;foo();// 实际执行过程function foo() &#123; var a; // 变量声明，var初始化undefined console.log(a); a = 'I am here'; // 变量重新赋值&#125; 代码例子2：函数声明优先级1234567891011function foo() &#123; console.log(bar); var bar = 20; function bar() &#123; return 10; &#125; var bar = function() &#123; return 30; &#125;&#125;foo(); // 输出bar()整个函数声明 函数声明，变量声明，函数表达式的优先级 函数声明，如果有同名属性，会替换掉 变量，函数表达式 函数声明优先 &gt; 变量，函数表达式 执行上下文的数量限制（堆栈溢出）执行上下文可存在多个，虽然没有明确的数量限制，但如果超出栈分配的空间，会造成堆栈溢出。常见于递归调用，没有终止条件造成死循环的场景。 1234567// 递归调用自身function foo() &#123; foo();&#125;foo();// 报错： Uncaught RangeError: Maximum call stack size exceeded 文末总结 JavaScript是单线程 栈顶的执行上下文处于执行中，其它需要排队 全局上下文只有一个处于栈底，页面关闭时出栈 函数执行上下文可存在多个，但应避免递归时堆栈溢出 函数调用时就会创建新的上下文，即使调用自身，也会创建不同的执行上下文 参考文档： 执行上下文详细图解 理解JavaScript 中的执行上下文和执行栈 这一次，彻底弄懂 JavaScript 执行机制 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端进击的巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记(06) - 语法基础 - JavaScript高级程序设计]]></title>
    <url>%2F2018%2F12%2F26%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-06-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[写在开头本篇是小红书笔记的第六篇，也许你会奇怪第六篇笔记才写语法基础，笔者是不是穿越了。 答案当然是没有，笔者在此分享自己的阅读心得，不少人翻书都是从头开始，结果永远就只在前几章。对此，笔者换了随机阅读的方式，哪章感兴趣了或者想补知识点，再去翻阅对应的章节。当然目录还是要翻的。 工作生活节奏太快，知识太多，时间与知识的增长成反比，求全不如求专，也许不能看完全书，但至少掌握所需知识点。 思维导图是个好东西，一图流。 语法标识符 由字母，下划线_，美元符号$，数字组成 第一个字符不能是数字 注意不要使用关键字作标识符 对象属性[]号写法可不遵循标识符规则 obj[123] = 123 数据类型数据类型共有10个，ES5有7个，3个为ES6新增1number/boolean/string/undefined/object/null/function/symbol/set/map 判断类型可用typeof 判断对象为何种引用类型可用instanceof undefined与null undefined (使用var声明但未初始化) null (空对象指针) 1undefined == null // true NaNNaN表示本来应返回一个数值，结果未正确返回 NaN不等于任何值，且不等于自身 用isNaN()可判断是否为NaN 数值转换Number() 转型函数 参数值 结果 true 1 false 0 null 0 undefined NaN ‘’ 0 ‘168’ 168 ‘168hello’ NaN ‘hello’ NaN TIPS：参数值为一个对象，则先调用valueOf(), 没有再调用toString(), 然后遵循上述规则 parseInt() 第一个参数为转换的值 第二个参数为转换的进制 会尝试解析字符串前面的数字（不同于Number()) 1parseInt(&apos;168hello&apos;) -&gt; 168 parseFloat() 第一个小数点有效，忽略后面小数点的解析 会尝试解析字符串前面的数字 忽略前导0，只支持10进制，没有第二个参数 (不同于parseInt()) 1parseFloat(&apos;520.13.14&apos;) -&gt; 520.14 字符串转换toString() 方法 大多数数据类型拥有toString()方法，可在参数中指定转换进制 null/undefined 没有toString()方法 String() 转型函数 如果参数值有toString()方法，则调用toString()方法 null 转为 &quot;null&quot; undefined 转为 &quot;undefined&quot; 函数 function 不支持重载 后定义的函数会覆盖之前 参数数组对象：arguments 语句 if...else... do...while... 后测试循环，不同于while/for前测试循环 while for for...in... 遍历对象属性 label 与 break/continue 合用 switch...case... case 全等判断 with 将代码作用域设置到特定的对象中 switch…case case 判断时是全等判断，不会进行类型转换 case 值不一定是常量，可以是变量，甚至是表达式 12case &apos;hello&apos; + &apos;word&apos;;case num &lt; 10; labellabel语句允许在代码中添加标签，label与break/continue联合使用，可返回代码指定位置123456789101112var num = 0;outermost:for (var i = 0; i &lt; 10; i++) &#123; for (var j = 0; j &lt; 10; j++) &#123; if ( i== 5 &amp;&amp; j == 5) &#123; break outermost; // 退出循环（因为outermost定义的位置在最外层) // 普通的break只能跳出一层循环 &#125; &#125;&#125; withwith语句的作用是将代码的作用域设置到一个特定的对象1234// window.location 对象为例子with(location) &#123; var url = href; // location.href&#125; 操作符 一元操作符 布尔运算符 算数运算符 关系运算符 条件运算符 赋值预算符 逗号运算符 一元操作一元操作符指的是只能操作一个值的操作符 递增++ 递减-- 后置：语句被求值后执行自身赋值 123var a = 2;var b = 20;var c = a-- + 20; // 后置运算 c: 22, a: 1 布尔运算符逻辑非!!! 功能等于 Boolean() 转型函数 逻辑与 &amp;&amp; 第一参数是对象，返回第二个参数 第一个参数为null/NaN/undefined, 则直接返回第一个参数 逻辑或 ||规则与逻辑与相同，不同的是只要第一个参数成立则不会进行后续运算 TIPS：逻辑与或都属于短路运算，并不一定返回true/false，参数未声明可能会报错或赋值不成功 算数运算符1+, -, *, /, % 关系运算符1&lt;, &gt;, &lt;=, &gt;=, ==, ===, !=, !=== 两个参数都是数值，进行值比较 两个参数都是字符串，进行字符编码比较（大写字母的字符编码小于小写字母) 一个参数是数值，则转为数值比较 一个参数是对象，则先调用其valueOf()，没有valueOf()再调用toString() === 全等会进行值与类型的比较 null == undefined // true 条件运算符三元表达式12var score = 90;var achie = score &gt; 90 ? &apos;优秀&apos; : &apos;再接再厉&apos;; 逗号操作符逗号操作符可以在一条语句执行多个操作，常用于变量初始化 TIPS: 用于赋值时，逗号操作符会返回表达式最后一项的值 1var name = &apos;KenTsang&apos;, age = 28, job = &apos;Developer&apos;; 详解逗号表达式，可移步笔者的文章:《一道JS面试题引发的血案》。 if-else/switch-case/?:/&amp;&amp;/||可移步笔者的文章: 《JS中 if/ if…else替换方式》 参考文档 《JavaScript高级程序设计》 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim 利剑常磨，见血封喉]]></title>
    <url>%2F2018%2F12%2F25%2FVim-%E5%88%A9%E5%89%91%E5%B8%B8%E7%A3%A8%EF%BC%8C%E8%A7%81%E8%A1%80%E5%B0%81%E5%96%89%2F</url>
    <content type="text"><![CDATA[年底了，故事总是会有很多。 刚了一波通宵加班，趁着有时间，过了一遍Vim教程，顺便汇总下常用命令。 对于以 OSX / Linux为开发环境的伙伴们，应该并不陌生。因其轻便，扩展性，可定制化，一直很受开发者追捧。高阶大神，袖中必有深藏。 Vim编辑器简洁易用，在终端上可用来快速查看修改文档。虽然与其他编辑器如WebStrom, VScode相比，功能扩展相对欠缺，对新手朋友不太友好。但胜在多数Linux系统已附带，开箱即用，终端直接使用，无需再多开一个应用窗口。 作为一名前端开发工程师，如果你想秀操作用Vim来写HTML/CSS/JavaScript，我只想说一句，“小伙子，你很6啊！”。 Vim学习的过程不是两三天即可入境，懒惰如笔者，几天不敲，命令忘了七八。时不时还得翻出来看看，至今仍以新手自居。 前言 vi/vim的区别vim 是 vi 的升级版本，它不仅兼容vi的所有指令，还有新增了一些新的特性。123vi filenamevim filename// 两者同样的功能，能少敲一个字母，所以我们就用vi吧 “工具总须多磨，方才用的趁手。” Mac 终端键入 vimtutor 即可进入Vim入门教程，30分钟足以让你应对Vim日常操作。 常规操作 命令 说明 x 删除光标下的字符 X 删除光标左边的字符 s 修改一个字符(与r的区别，修改后直接进入Insert模式) i 光标前插入字符 a 光标后插入字符 A 行尾插入字符 o 光标下方新建一行并进入Insert模式 O (字母) 光标上方新建一行并进入Insert模式 r 替换字符(单个) R 替换字符(多个) cw 替换文本直到单词末尾(ce也可) c$ 替换文本直到行尾 dw 删除单词 (de, d2w) d$ 删除到行尾 D 删除到行尾 S 删除到行为，并进入Insert模式 dd 删除整行 y 复制 yy 复制整行 （yw, ye) p 粘贴到光标之后 P 粘贴到光标之前 u 撤销 . 重复上一次操作 :! 执行外部名 (:!dir/:ls) % 查找配对的括号 ), }, ] v motion :w 选择性保存 Ctrl + D 查看可能的补全 光标移动 命令 说明 h 左 l 右 k 上 j 下 0 (数字) 行首 $ 行尾 w 下一个单词起始处 nw (2w) n可为数字，表示移动两个单词 e 单词末尾（与w的区别） gg 文件起始处 G 文件末尾处 退出 命令 说明 :wq 保存并退出 ZZ 保存并退出 :q! 丢弃修改并退出 (q退出，有修改的话q不能退出) :e! 丢弃修改并打开原文件 查找并替换 命令 说明 :s/old/new/g 查找old并替换为new，g代表整行匹配 :#, #s/old/new #, #代表首尾行号 :%s/old/new/g 全文匹配替换 :%s/old/new/gc 全文匹配替换，并每次替换会弹出确认提示 翻页 命令 说明 Ctrl + e 向下滚动一行 Ctrl + y 向上滚动一行 Ctrl + f 向下翻一页 Ctrl + b 向上翻一页 Ctrl + u 向上翻半页 Ctrl + d 向下翻半页 文件操作 命令 说明 :e + filename 打开新文件 :r + filename 读取文件并插入到当前文件 选项设置 命令 说明 :set ic 忽略大小写 :set is 部分匹配（like) :set hls 高亮匹配 :set nu 显示行号 分屏启动vim 命令 说明 vim -on file1 file2… 水平分屏 vim -On file1 file2… 垂直分屏 关闭分屏 命令 说明 Ctrl + w c 关闭当前窗口（如果是最后一个，无法关闭） Ctrl + w q 关闭当前窗口（如果是最后一个，则退出vim) 分屏 命令 说明 Ctrl + w s 上下分屏 Ctrl + w v 左右分屏 :sp filename 左右分屏，且打开一个新的文件 :vsp filename 上下分屏，且打开一个新的文件 切换分屏（光标切换） 命令 说明 Ctrl + w l 右边 Ctrl + w h 左边 Ctrl + w j 上边 Ctrl + w k 下边 分屏尺寸调整TIPS: (上下分屏生效) 命令 说明 Ctrl + w = 所有屏一样高度 Ctrl + w + 增加高度 Ctrl + w - 减少高度 写在结尾这么多命令要记，想对Vim说喜欢真不容易，按耐不住就新开VScode。少年莫慌，很多事情，难在开头，当你学会了，才会感谢当初的付出。 本文仅对常用的一些命令做了汇总，Vim的玩法还有很多。在此推荐易水博客的《Vim使用进阶》系列，干货满满。 寒梅飘香，这个寒冬，与诸君互勉。 参考文档： vi和vim的区别 vim常用命令总结 vi/vim使用进阶 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>工具类</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记(05) - 事件 - JavaScript高级程序设计]]></title>
    <url>%2F2018%2F12%2F10%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-05-%E4%BA%8B%E4%BB%B6-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[HTML依托于JavaScript来实现用户与WEB网页之间的动态交互，接收用户操作并做出相应的反馈，而事件在此间则充当桥梁的重要角色。 日常开发中，经常会为某个元素绑定一个事件，编写相应的业务逻辑，在元素被点击时执行，并反馈到用户操作界面。 这个过程中，事件就像一个侦听器，当点击动作发生时，才会执行对应的程序。这种模式可称之为观察员模式。 接下来就讲讲DOM事件相关知识。 何为事件 事件就是用户或浏览器自身执行的某种动作 常用的DOM事件有click/mouseover/mouseout/keyup/keydown等。 事件流 事件流描述的是从页面中接收事件的顺序 HTML描述的是一个DOM文档结构，而事件流所描述的是DOM文档节点接收事件顺序。 而事件流有两种事件模式，捕获/冒泡，两者所描述的事件传递顺序对立相反。 事件模式：捕获与冒泡冒泡 事件冒泡：事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档） 规范要求事件冒泡到document对象，而浏览器则会将事件一直冒泡到window对象。 所有浏览器都支持事件冒泡（包括IE9以下）。 捕获 事件捕获：（与事件冒泡相反）事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件 与冒泡一样，虽然规定事件应该从document对象开始传播，但浏览器普遍都是从window对象开始捕获。 IE9以下不支持事件捕获 DOM 事件流 “DOM2级事件”规定事件流包括三个阶段，顺序进行 事件捕获阶段 处于目标阶段 事件冒泡阶段 TIPS: 实际的目标元素在捕获阶段不会接收到事件，在处于目标阶段时接收事件发生处理，并被看成是冒泡阶段的一部分。 尽管”DOM2级事件”规范明确要求捕获阶段不会涉及事件目标，但浏览器会在捕获阶段触发事件对象上的事件。 事件处理程序 响应某个事件的函数方法，我们称之为事件处理程序（或事件侦听器） 1234window.onclick = function() &#123; //...&#125;// 这里的function()&#123;&#125;就是事件处理程序 HTML事件处理程序HTML中元素支持的事件，可以使用一个同名的HTML特性来指定，而这个特性的值就是js能执行的代码或表达式。写法上可以看出类似HTML中id/type/class等属性的写法，都是on+&#39;...&#39; 12 缺点：HTML是结构层（显示层），而JavaScript是行为层（业务层）。在显示层上去编写业务逻辑代码处理，会使得HTML与JavaScript代码耦合过于紧密，不好维护。 DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。 而DOM事件分为3个级别：DOM 0级事件处理程序，DOM 2级事件处理程序和DOM 3级事件处理程序。DOM 1级中没有规范事件的相关内容，所以没有DOM 1级事件处理。 DOM0 级事件处理程序每个元素(HTML元素)都有自己的事件处理程序属性，属性名通常以on开头，例如onclick/onmouseover。为这个属性的值设置一个函数，就可以指定事件处理程序。而将其属性值赋值为null，则完成解绑。(同个元素无法绑定多个同名事件) 123456789var myBtn = document.getElementById(&apos;myBtn&apos;);// 为myBtn绑定事件处理程序, 只能绑定一个myBtn.onclick = function() &#123; alert(&apos;Hello world!&apos;);&#125;// 解绑myBtn.onclick = null; DOM2 级事件处理程序“DOM2级事件”定义了两个方法，addEventListener()/removeEventListener()，用于为元素绑定和解绑事件。 （可绑定多个事件，区别于DOM0级/HTML仅能绑定一个）。 el.addEventListener(eventName, callBack, useCapture) eventName: 事件名称 callBack: 回调函数，当事件触发时，函数会传入一个参数event，为当前的事件对象 useCapture: 默认是false，代表事件句柄在冒泡阶段执行， true则代表在捕获阶段执行 12345678910var myBtn = document.getElementById(&apos;myBtn&apos;);var handleClick = function() &#123; alert(&apos;Hello world!&apos;);&#125;// 绑定事件处理程序myBtn.addEventListener(&apos;click&apos;, handleClick, false);// 解绑myBtn.removeEventListener(&apos;click&apos;, handleClick); TIPS：DOM2级事件处理程序，解绑时function必须与传入addEventListener相同 1234567891011// 绑定myBtn.addEventListener(&apos;click&apos;, function() &#123; // 匿名函数&#125;);// 解绑myBtn.removeEventListener(&apos;click&apos;,function() &#123; // 匿名函数&#125;);// add/remove 分别绑定了两个匿名函数（函数为引用类型），所以两个函数并不相同，所以无法成功解绑 TIPS：绑定多个事件处理程序时，执行顺序按绑定顺序执行 12345678myBtn.addEventListener(&apos;click&apos;, function() &#123; // step1...&#125;)myBtn.addEventListener(&apos;click&apos;, function() &#123; // step2...&#125;)// 执行顺序：step1 -&gt; step2 浏览器支持情况：IE9以下不支持DOM2级事件处理程序 IE 事件处理程序IE9以下不支持DOM2级事件，但IE提供了与DOM2级事件类似的两个方法，attachEvent()/detachEvent，IE9以下不支持事件捕获，所以attachEvent仅支持冒泡阶段触发，只接收两个参数（eventName, function)。 12345// 绑定myBtn.attachEvent(&apos;onclick&apos;, handleClick);// 解绑myBtn.detachEvent(&apos;onclick&apos;, handleClick); TIPS： 解绑时function必须与传入attachEvent相同，这点与DOM2级事件相同 与DOM0级的区别，DOM0级事件处理在元素的作用域运行，而attachEvent事件处理在全局，this指向window 绑定多个事件处理程序时，执行顺序按绑定顺序逆反执行（与DOM2级相反） 1234567myBtn.attachEvent(&apos;click&apos;, function() &#123; // step1...&#125;)myBtn.attachEvent(&apos;click&apos;, function() &#123; // step2...&#125;)// 执行顺序：step2 -&gt; step1 Event 事件对象常见应用event.preventDefault()阻止默认事件 event.stopPropagation()阻止事件流发生传递（冒泡/捕获） event.stopImmediatePropagation()阻止剩余事件处理函数的执行，并阻止当前事件在事件流上传递 event.currentTarget当前绑定事件的元素 event.target当前触发事件的元素 event.stopPropagation()与.stopImmediatePropagation()的区别同个元素绑定多个同名事件时，stopImmediatePropagation不仅阻止了冒泡，而且会阻止后续事件的执行，可以理解为加强版的stopPropagation 123456789myBtn.addEventListener(&apos;click&apos;, function(event) &#123; // step1; event.stopImmediatePropagation();&#125;)myBtn.addEventListener(&apos;click&apos;, function(event) &#123; // step2; // 我被stopImmediatePropagation阻止掉了！！！&#125;) currantTarget与target的区别事件处理程序内部，this等于currentTarget（当前绑定事件的元素），而target（当前触发事件的元素） 1234567891011// currentTarget == targetmyBtn.addEventListener(&apos;click&apos;, function(event) &#123; event.target == event.currentTarget; // true -&gt; myBtn&#125;)// currentTarget != target 捕获/冒泡document.body.addEventListener(&apos;click&apos;, function(event)&#123; event.target == event.currentTarget; // false // event.target -&gt; myBtn // event.currentTarget -&gt; body&#125;) 内存与性能WEB网页是运行在浏览器客户端的，而计算机分配给浏览器的内存及CPU占用是有限制的。虽说浏览器引擎不断地发展优化，但是内存占用多了， 性能不免会损耗。 内存为元素指定事件绑定程序，事实上是赋值了一个函数方法，而函数在javaScript中是一种引用类型的数据格式，既然是数据那就需要用到内存储存。函数创建多了，消耗掉内存。 性能为元素指定事件绑定程序，首先需要对DOM进行查询，找出要绑定事件的元素。而这也会造成DOM元素的访问次数增加。DOM的操作一直是网页性能的一个优化点。 了解完事件绑定带来内存跟性能的原理，我们来看一个例子，例如我们有一个ul&gt;li的列表，要监听每一个li的点击事件，并触发事件处理程序。 单独绑定的话，10个li就要对DOM元素查询10次，创建的匿名函数就有10个（当然可以共同创建同个函数引用），如果还有20个，30个，100个，那么这种为每个li元素单独绑定事件的方法，绝对不是最优解。 这就引出下面的优化方案：“事件委托”。 事件委托（事件代理）对”事件处理程序绑定过多”的问题，最好的解决方案就是“事件委托”。它的原理是利用了事件流的“冒泡”机制，事件目标元素会把事件向上层传递，直到document（浏览器会传到window)，所以父级节点是可以接收子节点的事件传递。 以刚刚ul&gt;li的例子，li有很多个， 但它们有一个共同的父节点ul。li的点击事件会冒泡到ul，因此我们可以在ul上绑定一个事件处理程序，处理所有li的点击事件，然后通过event.target可以确定触发事件的元素。 1234var ulParent = document.getElementById(&apos;parent&apos;);ulParent.addEventListener(&apos;click&apos;, function(event) &#123; var taget = event.target; &#125;) 通过“事件委托”减少了DOM元素的查询，以及多个函数的内存占用，而且还有一个好处，当我们的li是动态的，增加和移除时，都无需再做绑定和解绑事件操作，因为它都会冒泡到父级节点。 移除多余的事件绑定文档中移除了绑定了事件的DOM元素，如innerHTML/removeChild()/replaceChild()等可以对DOM进行替换，而移除的DOM元素原先所绑定的事件处理程序，并不能有效被浏览器垃圾回收，所以占用一直存在。 所以建议在移除某个DOM元素时，如果其绑定了事件处理程序，需手动解除绑定，释放内存。 自定义事件除了为元素绑定支持的事件以外，我们还可以通过Event/CustomEvent来创建开发者自定义事件。 两者不同的是CustomEvent可传递一个Object对象来传输数据。 123456789101112131415161718// Eventvar eve = new Event(&apos;custome&apos;);// CustomeEvent 可传参数var eve = new CustomeEvent(&apos;custome&apos;, &#123; detail: &#123; name: &apos;KenTsang&apos;, age: 28 &#125;&#125;);// 为DOM元素添加事件监听ele.addEventListener(&apos;custome&apos;, function(event) &#123; console.log(event.detail);&#125;)// 触发ele绑定的自定义事件ele.dispatch(eve); 事件这块还剩下一部分知识点，后续文章会再就模拟事件这块知识点进行拆分详解。 天冷了，更文不易，望大家多多点赞。 《JavaScript高级程序设计》 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记(04) - 错误监控 - JavaScript高级程序设计]]></title>
    <url>%2F2018%2F12%2F06%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-04-%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[错误类型 即时运行错误 (代码错误) 资源加载错误 常见的错误1. 类型转换错误建议使用全等===操作符 2.数据类型错误建议加强类型判断 123456789// 数组倒序function reverseSort(value) &#123; if (value instanceof Array) &#123; // 使用instanceof验证数据类型 // (基础类型用typeof, 引用类型用instanceof) value.sort(); value.revere() &#125;&#125; 3. 通信错误url参数编码错误造成，建议使用encodeURIComponent()对url参数数据进行编码 123456789101112131415// 错误的url参数// http://www.xxx.com/?redir=http://www.xxx.com?a=b&amp;c=d// 针对redir后面的参数字符串进行编码// 封装一个处理方法（摘自书中代码）function addQueryStringArg(url, name, value) &#123; if (url.indexOf(&apos;?&apos;) &lt; 0) &#123; url += &apos;?&apos;; &#125; else &#123; url += &apos;&amp;&apos;; &#125; url += encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(value); return url;&#125; 错误的捕获方式针对即时运行错误 try-catch（代码可疑区域可增加try-catch） window.onerror (全局监控js错误异常) 1. try-catch12345678try &#123; // 可能会导致错误的代码&#125; catch (error) &#123; // 错误发生时处理 console.log(error.message);&#125; finally &#123; // 一定会执行(无论是否发生错误)&#125; TIPS: 使用了finally，try跟catch的return语句都会被忽略 1234567891011function testFinally() &#123; try &#123; return 2; &#125; catch (error) &#123; return 1; &#125; finally &#123; return 0; &#125;&#125;// testFinally 最终返回 0 TIPS: try-catch只能捕获同步运行的代码错误，无法检测语法和异步错误 （语法可借助ESlint工具在开发阶段提示解决） 2. window.onerror遵循DOM0级事件，window.onerror事件处理程序不会创建event对象，但可以接收三个参数message(错误信息), url(错误文件url), line(行号) 123window.onerror = function(message, url, line)&#123; console.log(message, ulr, line);&#125;; 在事件处理程序中返回false，可以阻止浏览器报告错误的默认行为 123window.onerror = function(message, url, line) &#123; return false;&#125; 针对资源加载错误 object.onerror performance.getEntries() Error事件捕获 （全局监控静态资源异常） 1. object.onerror如script，image等标签src引用，会返回一个event对象 TIPS: object.onerror不会冒泡到window对象，所以window.onerror无法监控资源加载错误 12345var img = new Image();img.src = &apos;http://xxx.com/xxx.jpg&apos;;img.onerror = function(event) &#123; console.log(event);&#125; 2. window.performance.getEntires()适用高版本浏览器，返回已成功加载的资源列表，然后自行做比对差集运算，核实哪些文件没有加载成功 12345678910var result = [];window.performance.getEntries().forEach(function (perf) &#123; result.push(&#123; &apos;url&apos;: perf.name, &apos;entryType&apos;: perf.entryType, &apos;type&apos;: perf.initiatorType, &apos;duration(ms)&apos;: perf.duration &#125;);&#125;);console.log(result); 3. Error事件捕获1234window.addEventListener(&apos;error&apos;, function(error)&#123; //...（全局监控静态资源异常） console.log(error);&#125;, true); // 默认false为冒泡阶段触发，true为捕获阶段触发 跨域的js错误捕获一般涉及跨域的js运行错误时会抛出错误提示script error，但没有具体信息（如出错文件，行列号提示等）, 可利用资源共享策略来捕获跨域js错误 客户端：在script标签增加crossorigin属性（客户端） 服务端：js资源响应头Access-Control-Allow-Origin: * 错误上报 Ajax请求 (会有跨域问题) 动态创建Image标签 (兼容完美，代码简洁，需要注意浏览器url长度限制) Image标签1(new Image()).src= &apos;http://xxx.com/error?code=1002&apos; 上报频率错误信息频繁发送上报请求，会对后端服务器造成压力。项目中我们可通过设置采集率，或对规定时间内数据汇总再上报，减少请求数量，从而缓解服务端压力。 1234567// 借鉴别人的一个例子Reporter.send=function(data) &#123; // 只采集30% if（Math.random() &lt; 0.3) &#123; send(data); // 上报错误 &#125;&#125; 参考文档 《JavaScript高级程序设计》 《如何优雅处理前端异常》 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记(03) - 性能 - JavaScript高级程序设计]]></title>
    <url>%2F2018%2F12%2F04%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-03-%E6%80%A7%E8%83%BD-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[作用域链查找作用域链的查找是逐层向上查找。查找的层次越多，速度越慢。随着硬件性能的提升和浏览器引擎的优化，这个慢我们基本可以忽略。 除了层级查找损耗的问题，变量的修改应只在局部环境进行，尽量避免在局部环境下去操作修改父级变量的值。（react/vue 单向数据流的数据传输方式） 优化方法：声明一个变量存储引用（该方法应用甚多） 不必要的属性查找1234567// 未优化（window.location.href 3*2 6次）var query = window.location.href.substring(window.location.href.indexOf(&apos;?&apos;));// 优化后（3次，以后多次调用url，查询次数不会增加）var url = window.location.href;var query = url.substring(url.indexOf(&apos;?&apos;));url = null; 函数里面声明的变量，在函数调用栈执行后退出时，会自动清除引用。而全局变量和闭包则会与之相反，继续保存，所以使用用后需手动标记清除，以免造成内存泄漏。 优化循环 减值迭代 简化终止条件 简化循环体 使用后测试循环 减值迭代日常应用不多，与增值迭代的区别，就在i存储的值。减值迭代i的值不断在变小，存储的空间也在变小。 但在前端极少需要遍历上万次上亿次的数据，上千上百都很少，所以这个优化可忽略。而且我们遍历的顺序一般都是从数组头部开始，所以增值迭代应用的更多。 123456789// 增值迭代（用的较多）for(var i = 0; i &lt; len; i++) &#123; //...&#125;// 减值迭代for(var i = len - 1; i &gt;= 0 ; i--) &#123; //...&#125; 简化终止条件 (常用)终止条件应该是一个固定值判断，应避免在终止条件上做其他运算（属性查找等）。1234567891011// 未优化，每次循环都会去计算数组长度var arr = [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JavaScript&apos;];for (var i = 0; i &lt; arr.length; i++) &#123; //...&#125;// 优化后for (var i = 0, len = arr.length; i &lt; len; i++) &#123; //...&#125;// 声明了一个变量len用于储存数组长度，只会计算一次 简化循环体循环体的代码应该着重于只需要遍历处理的代码，其他无关代码应放置到循环体外面。 后测试循环 最常用的for循环和while循环都是前测试循环。而do-while这种后测试循环，可以避免最初终止条件的计算，因此运行更快。 前测试循环（for/while），可能一次都不会执行循环体 后测试循环（do…while），至少执行一次 用确定索引值更快12345678910// for循环遍历var arr = [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JavaScript&apos;];for (let i = 0, len = arr.length; i &lt; len; i++) &#123; arr[i];&#125;// 确定索引值arr[0]; arr[1]; arr[2]; 其他 原生方法较快（Math) switch语句较快 (多个if情况下) 位运算符较快 TIPS: 判断优化，最可能的到最不可能的顺序组织（if/switch) 最小语句数符合 write less, do more 的代码追求 多个变量声明合并123456789// 多个var声明var name = &apos;KenTsang&apos;;var age = 28;var job = &apos;Developer&apos;;// 合并一个var声明var name = &apos;KenTsang&apos;, age = 27, job = &apos;Developer&apos;; 插入迭代值123456// 优化前var name = value[i];i++;// 优化后var name = value[i++]; 数组/对象字面量创建引用类型可以使用构造函数和字面量两种方式，不过日常习惯都使用字面量，因为语句更简洁，写起来更像数据封装。12345678910// 字面量var arr = [1, 2, 3, 4];var obj = &#123; name: &apos;KenTsang&apos;&#125;// 构造函数var arr = new Array(1, 2, 3, 4);var obj = new Object();obj.name = &apos;KenTsang&apos;; DOM优化交互最小现场更新 现场更新：一旦你需要访问的 DOM 部分是已经显示的页面的一部分，那么你就是在进行一个现场更新 文档片段文档片段相当一个临时的占位符，只有片段中的内容会被添加到DOM上，片段本身并不会被添加。 1234567891011121314// 代码片段标签var ele = document.getElementById(&apos;ul&apos;);var fragment = document.createDocumentFragment();var browsers = [&apos;Firefox&apos;, &apos;Chrome&apos;, &apos;Opera&apos;, &apos;Safari&apos;, &apos;IE&apos;];browsers.forEach(function(browser) &#123; var li = document.createElement(&apos;li&apos;); li.textContent = browser; fragment.appendChild(li);&#125;);// 只会操作一次DOMele.appendChild(fragment); innerHTML合并插入代码一次性设置innerHTML。 123456789101112// 优化前：操作多次DOMvar list = document.getElementById(&quot;myList&quot;);for (var i=0; i &lt; 10; i++) &#123; list.innerHTML += &quot;&lt;li&gt;Item &quot; + i + &quot;&lt;/li&gt;&quot;;&#125;// 优化后：操作一次DOMvar innerHtml = &apos;&apos;;for (var i = 0; i &lt; 10; i++) &#123; innerHtml += &apos;&lt;li&gt;Item&apos; + i + &apos;&lt;/li&gt;&apos;;&#125;list.innerHTML = innerHtml; 事件代理（事件委托）通过事件流——冒泡机制实现代理，子元素事件触发冒泡到父元素，由父元素绑定一个事件进行统一处理，避免多个事件绑定影响性能。 123456789101112131415161718&lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item&quot;&gt;HTML&lt;/li&gt; &lt;li class=&quot;item&quot;&gt;CSS&lt;/li&gt; &lt;li class=&quot;item&quot;&gt;JavaScript&lt;/li&gt;&lt;/ul&gt;var listEle = document.getElementById(&apos;list&apos;);listEle.addEventListener(&apos;click&apos;, function(event) &#123; if (event.target.className.indexOf(&apos;item&apos;) &gt; -1) &#123; console.log(event.target.innerHTML); &#125;&#125;)// jquery$(&apos;#list&apos;).on(&apos;click&apos;, &apos;.item&apos;, function(event)&#123; console.log($(this).html());&#125;) 注意HTMLCollection 任何时候要访问 HTMLCollection，不管它是一个属性还是一个方法，都是在文档上进行一个查询，这个查询开销很昂贵。 12345678910// 一个死循环例子&lt;a href=&quot;&quot;&gt;link&lt;/a&gt; var existLinkEle = document.getElementsByTagName(&apos;a&apos;);for (var i = 0; i &lt; existLinkEle.length; i++) &#123; console.log(i); var linkEle = document.createElement(&apos;a&apos;); document.body.appendChild(linkEle);&#125;// body会不断地插入a标签 因为existLinkEle.length每次循环都会重新计算页面a节点的数量，而得到的值一直递增。 12345// 优化（一个变量存储引用）var len = existLinkEle.length;for (var i = 0; i &lt; len; i++) &#123; //...&#125; 返回HTMLCollection对象情况有： document.getElementByTagName()。 获取元素的childNodes属性 获取元素的attributes属性 document.forms,document.images等 参考文档 《JavaScript高级程序设计》 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记(02) - 可维护性 - JavaScript高级程序设计]]></title>
    <url>%2F2018%2F12%2F03%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-02-%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[编写可维护性代码可维护的代码遵循原则： 可理解性 （方便他人理解） 直观性 （一眼明了） 可适应性 （数据变化无需重写方法） 可扩展性 （应对未来需求扩展，要求较高） 可调试性 （错误处理方便定位） 命名方式变量取名多为为名词，方法取名多为为动词12345// 变量名car, person;// 方法名getName, isEnable; 解耦功能过于依赖，代码耦合过紧，不利于维护。而通过解耦能让我们更专一地处理特定功能业务的开发，也方便我们开发中调试，从复杂的耦合依赖中抽离出来。 解耦优势：代码复用，单元测试。 解耦原则： HTML/JavaScript解耦（结构层/行为层的解耦） CSS/JavaScript解耦 （样式层/行为层的解耦） 应用逻辑/事件处理程序解耦 应用逻辑/事件处理程序解耦合的原则： 勿将event对象传给其他方法；只传来自event对象中所&gt; 需的数据 任何可以在应用层面的动作都应该可以在不执行任何事&gt; 件处理程序的情况下进行； 任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑 123456789101112131415161718192021// 一个事件解耦的例子var pwdInput = document.getElementById(&apos;password&apos;);// 回车事件pwdInput.addEventListener(&apos;keyup&apos;, function(event)&#123; if (event.keyCode == 13) &#123; validatePassword(event.target.value); &#125;&#125;)// 失焦事件pwdInput.addEventListener(&apos;blur&apos;, function(event) &#123; validatePassword(event.target.value);&#125;)// 业务应用单独封装到一个方法里面，多处复用/单元测试皆可function validatePassword(pwd) &#123; if (!pwd) &#123; alert(&apos;密码不能为空!&apos;); &#125; &#125; 对象所有权JavaScript中是通过原型链来实现继承，而原型继承的一个特点就是原型上定义的属性方法，可以被多个实例共享使用。 对象维护原则： 不要为实例或原型添加属性 不要为实例或原型添加方法 不要重定义已存在的方法 需要修改对象时： 创建包含所需功能的新对象，并用它与相关对象进行交互 创建自定义类型，继承需要进行修改的类型，然后可以自定义类型添加额外功能 全局变量引申命名空间123456789101112131415161718var name = &apos;KenTsang&apos;;function sayName () &#123; console.log(name);&#125;var MyApp = &#123; name: &apos;KenTsang&apos;, sayName: function() &#123; console.log(this.name); &#125; skill: &#123; html: 80, css: 80, js: 80 &#125;&#125;MyApp.skill.js // 80 虽然减少程序员输错代码造成修改全局变量的几率，但依旧可以修改到全局变量，而且增加了代码量。 常用null比较误区TIPS: null可同时判断null/undefined，可用来判断对象属性是否存在。 使用null作判断无法进行充分的类型检查。123456789101112// 错误用法function sortArrays(values) &#123; if (values != null) &#123; // 非数组类型就会报错，因为sort方法只有Array才具备 values.sort(); &#125;&#125; // 正确用法if (values instanceof Array) &#123; value.sort();&#125; 使用null比较的代码，替换原则： 如果值应为一个引用类型，使用instanceof操作符检查其构造函数 如果值应为一个基本类型(值类型)，使用typeof检查其类型 如果是希望对象包含某个特点的方法名，则使用typeof操作符确保指定名字的方法存在于对象上 12345678// 值类型 (Number, String, Boolean)typeof value == &apos;string&apos;;// 引用类型 (Array, Object, Function)value instanceof Array;// 对象方法 (Object.property)typeof person.getName == &apos;function&apos; 常量应用123456var CONSTANS = &#123; INVALID_VALUES_MSG: &quot;Invalid value!&quot;, INVALID_VALUE_URL: &quot;/erros/invalid.php&quot;&#125;CONSTANS.INVALID_VALUES_MSG // &quot;Invalid value!&quot; 常量应用原则： 重复值——多处地方引用的值 (CSS类名/后端返回的状态码)。 用户界面字符串——显示给用户的字符串 (国际化, 替换为对应的语言包文件) URLs——公共地方存放所有的URL (测试API的URL/上线API的URL) 任何可能会更改的值 (通常是环境/语言配置上的修改) redux/vuex的actionType判断的应用，也是常量应用常见的场景。好处就是引用时拼写错误会直接抛出变量引用错误，而直接用字符串值判断，则不会抛出错误，不利于调试。 12345678910111213141516171819202122232425262728// redux-reducer.js文件中应用常量import &#123; ADD_TODO_ITEM, DELETE_TODO_ITEM&#125; from &apos;./actionTypes&apos;const defaultState = &#123; inputValue: &apos;&apos;, list: []&#125;;export default (state = defaultState, action) =&gt; &#123; let newState = JSON.parse(JSON.stringify(state)); switch (action.type) &#123; case DELETE_TODO_ITEM: newState.list.splice(action.value, 1); break; case ADD_TODO_ITEM: if (newState.inputValue.trim().length) &#123; newState.list.push(newState.inputValue); &#125; newState.inputValue = &apos;&apos;; break; &#125; return newState;&#125; 参考文档 《JavaScript高级程序设计》 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记(01) - JSON - JavaScript高级程序设计]]></title>
    <url>%2F2018%2F12%2F02%2F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-01-JSON-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[JSON与JavaScript对象JSON是一种表示结构化数据的存储格式，语法格式上与JavasScript对象有些类似。 TIPS: 与JavaScript对象的格式区别 不支持变量、函数或对象实例 字符串，属性名必须使用双引号 无需定义变量存储引用 12345678910111213// JSON对象&#123; &quot;name&quot;: &quot;KenTsang&quot;, &quot;age&quot;: 27, &quot;job&quot;: &quot;Developer&quot;&#125;// js对象(该对象将作在后续例子引用)let person = &#123; name: &apos;KenTsang&apos;, age: 27, job: &apos;Developer&apos;&#125; ES5定义了一个全局对象JSON，IE8+以上支持，该对象提供来stringify和parse两个方法用于JSON数据解析和序列化。 stringify()stringify用于把JavaScript对象序列化JSON字符串， 在序列化JavaScript对象时，所有函数及原型成员都会被有意忽略，不体现在结果中。此外，值为undefined的任何属性也都会被跳过。 12345JSON.stringify( value: Object, replace: Array | function(key,value) &#123;&#125;, space: number | string) 该方法接受三个参数 参数：接收传入的js对象 参数：过滤器（数组/函数） 参数：字符串缩进（数值/字符串） 参数2 - 过滤器TIPS1: 过滤器是一个数组时，序列化结果只包含数组中列出的属性1234let result = JSON.stringify(person, [&quot;name&quot;, &quot;job&quot;]);// 输出结果// &#123;&quot;name&quot;:&quot;KenTsang&quot;,&quot;job&quot;:&quot;Developer&quot;&#125; TIPS2: 过滤器是一个函数时（替换函数）12345678910var jsonStr = JSON.stringify(Person, function(key, value)&#123; if (key == &apos;age&apos;) &#123; return &apos;secret&apos;; &#125; else &#123; return value; &#125;&#125;)// 输出结果// &#123;&quot;name&quot;:&quot;KenTsang&quot;,&quot;age&quot;:&quot;secret&quot;,&quot;job&quot;:&quot;Developer&quot;&#125; 如果替换函数返回的是undefined，则该属性不会被包含在序列化结果中。 参数3 - 字符串缩进用于控制序列化结果中的缩进和空白符，输出序列结果带缩进格式，方便预览查看。实际应用开发不多。 为数值时，表示每个级别缩进的空格数（最大10） 为字符串时，则作为缩进字符（替换默认的空格，最大10个字符）12345678910let result = JSON.stringify(person, null, &apos;--&apos;);// 输出结果/*&#123;--&quot;name&quot;: &quot;KenTsang&quot;,--&quot;age&quot;: 27,--&quot;job&quot;: &quot;Developer&quot;&#125;*/ toJSON()方法应对更复杂的一些需求，我们可以通过toJSON()对某些对象进行自定义序列化的需求。1234567891011121314151617let person = &#123; name: &quot;KenTsang&quot;, age: 27, job: &apos;Developer&apos;, toJSON: function() &#123; return &#123; &quot;name&quot;: &quot;KT&quot;, &quot;age&quot;: &quot;2*&quot;, &quot;job&quot;: &quot;DP&quot; &#125; &#125;&#125;;let result = JSON.stringify(person);// 输出结果// &#123;&quot;name&quot;:&quot;KT&quot;,&quot;age&quot;:&quot;2*&quot;,&quot;job&quot;:&quot;DP&quot;&#125; TIPS: 序列化顺序 如果存着toJSON方法而且能通过它取得有效的值，则调用该方法。否则，返回对象本身。 如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第(1)步的值。 对第(2)步返回的每个值进行相应的序列化。 如果提供了第三个参数，执行相应的格式化。 – 摘自《JavaScript高级程序设计》– parse()parse用于把JSON字符串解析成JavaScript对象1JSON.parse(text: string, reviver: function(key, value) &#123;&#125;) 该方法接受三个参数 参数：接收传入的json字符串 参数：还原函数 还原函数 返回undefined, 结果中删除相应的键 返回其它值，则将值插入到结果中 12345678910111213141516171819let Person = &#123; name: &quot;KenTsang&quot;, age: 27, job: &quot;Developer&quot;, birth: new Date(1991, 3, 19)&#125;;var jsonStr = JSON.stringify(Person);var jsObj = JSON.parse(jsonStr, function(key, value) &#123; if (key == &apos;birth&apos;) &#123; return new Date(value); &#125; else &#123; return value); &#125;&#125;);jsObj.birth.getFullYearh(); // 输出结果： 1991 例子中通过还原函数，重新实例一个Date对象，所以可以用到getFullYear()方法。 参考文档 《JavaScript高级程序设计》 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂谈：HTTP1.1 与 HTTP2.0 知多少？]]></title>
    <url>%2F2018%2F08%2F04%2F%E6%9D%82%E8%B0%88%EF%BC%9AHTTP1-1-%E4%B8%8E-HTTP2-0-%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[HTTP是应用层协议，是基于TCP底层协议而来。 TCP的机制限定，每建立一个连接需要3次握手，断开连接则需要4次挥手。 HTTP协议采用“请求-应答”模式，HTTP1.0下，HTTP1.1非Keep-Alive模式下，每个请求都要新建一个连接，完成之后立即断开连接。如果有新的请求，则要重新创建请求连接（HTTP协议为无连接的协议）。 这样不免造成了网络传输数据一定的延迟，1999年推出HTTP1.1，虽然可以通过设置延迟时间，让连接延迟关闭。但仍然有线头阻塞，max-connection最大连接限制了并行请求数量等痛点，难以应对日益增长的大数据实时传输。 新一代HTTP2.0协议应运而生，提高HTTP应对高并发场景下的数据传输能力。 「 HTTP1.1」Pipelining管道化提出管道化方案解决连接延迟，服务端可设置Keep-Alive来让连接延迟关闭时间，但因为浏览器自身的Max-Connection最大连接限制，同一个域名 (host) 下的请求连接限制（同域下谷歌浏览器是一次限制最多6个连接），只能通过多开域名来实现，这也就是我们的静态资源选择放到CDN上或其它域名下，来提高资源加载速度。 pipelining方案需要前后端支持，但绝大部分的HTTP代理器对pipelining的支持并不友好。 只支持GET/HEADpipelining只支持GET/HEAD方式传送数据，不支持POST等其它方式传输。 头部信息冗余HTTP是无状态的，客户端/服务端只能通过HEAD的数据维护获取状态信息，这样就造成每次连接请求时都会携带大量冗余的头部信息，头部信息包括COOKIE信息等。 超文本协议HTTP1.X是超文本协议传输。超文本协议传输，发送请求时会找出数据的开头和结尾帧的位置，并去除多余空格，选择最优方式传输。如果使用了HTTPS，那么还会对数据进行加密处理，一定程度上会造成传输速度上的损耗。 线头阻塞pipelining通过延迟连接关闭的方案，虽然可同时发起对服务端的多个请求，但服务端的response依旧遵循FIFO（first in first out)规则 依次返回。 举个例子客户端发送了1、2、3、4四个请求，如果1没返回给客户端，那么2，3，4也不会返回。这就是所谓的线头阻塞。高并发高延迟的场景下阻塞明显。 HTTP1.X传输优化方法 多个资源合并成一个请求连接，如前端Spriting雪碧图，JS/CSS压缩成一个文件等 Inlining内联的方式，采用inline css/inline js等并入html中，减少对css/js文件的请求 CDN资源多域名转发，静态资源分布存储在多个域下。 以上三种三种方法虽然能使HTTP1.X协议传输速度提高，但也有对应的不足。 如雪碧图，将多个小图合并成一张大图，降低多张小图请求的高延迟，但是如果我只想要两个icon小图，却需要加载一整张大图，就会造成资源冗余。合并的JS/CSS文件也有类似的问题。 内联的方式，会让我们的代码变得难以维护，让html文件变得更大，代码混合严重。 多域名下可缓解Max-Connection，但不同域会让Cookie信息无法彼此共享。 了解完HTTP1.1的痛点，接下来就是我们新一代的HTTP协议HTTP2.0 「 HTTP2.0」前身SPDYSPDY是2012年谷歌推出的是基于SSL/TLS的传输协议，SPDY有降低延迟，多路复用，头部压缩，服务端推送等特点，这些特点也称为了后续HTTP2.0的功能基石，HTTP2.0是SPDY/3 draft的优化版。 HTTP2.0 与 SPDY的区别： HTTP2.0 头部压缩采用HPACK， 而SPDY采用DELEFT。 HTTP2.0 理论上支持明文HTTP传输，而SPDY强制使用HTTPS。 多路复用（一个域只要一个TCP连接）实现真正的并发请求，降低延时，提高了带宽的利用率。 头部压缩客户端/服务端进行渐进更新维护，采用HPACK压缩，节省了报文头占用流量。 相同的头部信息不会通过请求发送，延用之前请求携带的头部信息。 新增/修改的头部信息会被加入到HEAD中，两端渐进更新。 两端会共同维护一个head list，每次请求时都会进行检查。该list包括： static (既定的头部信息) dynamic (自定义的头部信息) 请求优先级每个流都有自己的优先级别，客户端可指定优先级。并可以做流量控制。因为HTTP2.0的传世允许请求并发，但是应用场景中我们要处理一些主要文件的优先级权重，以及资源模块依赖等。所以我们可通过设置优先级来提高主要文件的权重，使其优先加载请求。 服务端推送请求不是来自客户端“明确”的请求，是从服务端PUSH_PROMISE帧中提供。例如我们加载index.html, 我们可能还需要index.js, index.css等文件。传统的请求只有当拿到index.html，解析html中对index.js/index.css的引入才会再请求资源加载，但是通过服务端数据，可以提前将资源推送给客户端，这样客户端要用到的时候直接调用即可，不用再发送请求。 push的资源能缓存在浏览器中 不同的网页能使用该缓存，不用重新发起 push的资源通过multiplexed进行传输 push的资源能够进行priority标识 client有权取消push资源的加载 push的资源必须同域 二进制协议HTTP2.0 传输协议采用二进制协议，区别与HTTP1.X的超文本协议。更易于帧，数据包的发送接收。HTTP2.0是运行在TCP连接上的应用层协议，接受服务器或发送请求时，会自动将头部信息/request body分成HEAD帧和DATA帧。 客户端/服务端发送/接收数据时，会将数据打散乱序发送，接收数据时接收一端再通过streamID标识来将数据合并。 HTTP2.0环境要求HTTP2.0理论上支持明文HTTP传输，但因为其前身SPDY是在TLS上，他们的主人Google 和 Firefox 都支持TLS架构，所以需要搭建HTTP2.0 + TLS成了标准。 Nginx &gt; 1.10 OpenSSL &gt; 1.0.2 CA证书 参考文档 HTTP协议头部与Keep-Alive模式详解 HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事 前端应该了解的HTTP2 一文读懂 HTTP/2 特性 作者：以乐之名 本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS 中 if / if...else...替换方式]]></title>
    <url>%2F2018%2F07%2F14%2FJS-%E4%B8%AD-if-if-else-%E6%9B%BF%E6%8D%A2%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[说说烂大街的if/if...else...，程序中用得最多的流程判断语句。 对着曾经满屏的if/if...else...，心想能不能搞点事情，折腾点浪花浪里呀浪。 对顶着“这个需求很简单，怎么实现我不管，明天上线”的程序猿，答案必须YES。 “Write Less, Do More”，学习进步的本质就是为了更有效率地偷懒。 废话说完，直接上方法汇总，让我们来一窥究竟： switch改写if12345678910111213141516171819// if 版本var a = 1;if(a &gt; 1 &amp;&amp; a &lt; 5) &#123; return 1&#125; else if(a &gt; 5 &amp;&amp; a &lt; 10)&#123; return 5&#125;else&#123; return 10&#125;// switch 改版switch(true)&#123; case (a &gt; 1 &amp;&amp; a &lt; 5): return 1 case (a &gt; 5 &amp;&amp; a &lt; 10): return 5 default: return 10&#125; 以上代码的switch...case...的用法实际使用不多，仅供参考。一般case为常量时switch...case...用得较多。 选择分支较多时，建议选用switch…case可提高程序的效率，但switch...case不足的地方在于只能处理字符或者数字类型的变量，if…else更加灵活，可用于判断表达式是否成立，比如if(a+b&gt;c),if…else的应用范围更广。 三元运算符改写if1234567891011// if 版本if (bool) &#123; value = 1;&#125; else &#123; value = 2;&#125;// 三元运算符 版本value = bool ? 1 : 2;// 三元预算符 多个运算需要括号包裹 此处用了逗号表达式return typeof foo === &apos;object&apos;?(console.log(1),1):(console.log(2),2); 优点：代码简化，更加清爽，write less 缺点：复杂的三元运算符可读性较差，需友好注释 TIPS: 三元运算符后面不能带return 12// 错误用法，运算符号后不能带returnbool ? return 1 : return 2; 逻辑判断 and(&amp;&amp;)和or(||) 改写if原理：利用逻辑判断的短路运算来实现 短路：&amp;&amp; 中第一个表达式为假就不会去处理第二个表达式，|| 则相反 123456789101112// if为真if (bool) &#123; value = getYes();&#125;// &amp;&amp;改版bool &amp;&amp; (value = getYes());// if为假if (!bool) &#123; value = getNo();&#125;bool || (value = getNo()); 优点：代码简化，更加清爽，write less 缺点：适用于简单判断逻辑，复杂的判断运算可读性较差，需友好注释 TIPS：适用于没有else的场景, 逻辑运算符后面不能带return 12// 错误用法，运算符号后不能带returnboll || return true; 知识点插播 —— (1) 三元运算符和逻辑运算符都有一层return作用，但不可作用于函数return语句，所以像以下这种用法都是错误的； 12345// 错误用法function getResult(value) &#123; value ? &apos;yes&apos; : &apos;no&apos;;&#125;var result = getResult(true); // 并不会有值返回 js逻辑运算中，0/&quot;&quot;/null/false/undefined/NaN都会判为false，其它都为true； 很多开源代码中可见if(!!attr)，为什么不直接写if(attr)， 其实这是一种更严谨的写法，!!attr会强制转化为boolean类型。typeof !!attr == true 比 typeof attr == true 更加严谨。 对象属性123456789101112131415161718// if版本if (a == 1) &#123; return &apos;one&apos;;&#125; else if (a == 2) &#123; return &apos;two&apos;;&#125; else if (a == 3) &#123; return &apos;three&apos;;&#125; else &#123; return &apos;&apos;;&#125;// 对象属性 改版var ret = &#123; 1: &apos;one&apos;, 2: &apos;two&apos;, 3: &apos;three&apos;&#125;;return ret[a] ? ret[a] : &apos;&apos;; TIPS： 判断值需为确定值，如== ，其它如&gt;=/&lt;=/&gt;/&lt;不适用 条件作为对象属性，需要注意对象属性的读取方式 知识点插播 —— (2)JS的命名规则（变量的命名规则） 标识符只能由字母、数字、下划线和‘$’组成 数字不可以作为标识符的首字符 对象属性的命名规则 通过[]操作符为对象添加属性时，属性名可以是任何字符串（包括只包含空格的字符串和空字符串）； 通过.操作符为对象添加属性时，属性名必须是合法的标识符名称； 如果属性名包含非法的标识符字符，则只能采用obj[“propertyName”]的形式； 如果属性名是合法的标识符，读取时可采用obj.propertyName或obj[“propertyName”]的形式； 策略模式 策略模式：定义一系列的算法，把它们一个个封装起来，目的就是将算法的使用与算法的实现分离开来 以下为常见的表单验证，用策略模式来构建，替换if...else的方式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// html&lt;form id = &quot;registerForm&quot; method=&quot;post&quot; action=&quot;http://xxxx.com/api/register&quot;&gt; 用户名：&lt;input type=&quot;text&quot; name=&quot;userName&quot;&gt; 密码：&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt; 手机号码：&lt;input type=&quot;text&quot; name=&quot;phoneNumber&quot;&gt; &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;&lt;/form&gt;// js// 策略对象var strategies = &#123; isNoEmpty: function (value, errorMsg) &#123; if (value === &apos;&apos;) &#123; return errorMsg; &#125; &#125;, isNoSpace: function (value, errorMsg) &#123; if (value.trim() === &apos;&apos;) &#123; return errorMsg; &#125; &#125;, minLength: function (value, length, errorMsg) &#123; if (value.trim().length &lt; length) &#123; return errorMsg; &#125; &#125;, maxLength: function (value, length, errorMsg) &#123; if (value.length &gt; length) &#123; return errorMsg; &#125; &#125;, isMobile: function (value, errorMsg) &#123; if (!/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[7]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$/.test(value)) &#123; return errorMsg; &#125; &#125;&#125;// 验证类var Validator = function() &#123; this.cache = [];&#125;Validator.prototype.add = function(dom, rules) &#123; var self = this; for(var i = 0, rule; rule = rules[i++];) &#123; (function(rule) &#123; var strategyAry = rule.strategy.split(&apos;:&apos;); var errorMsg = rule.errorMsg; self.cache.push(function() &#123; var strategy = strategyAry.shift(); strategyAry.unshift(dom.value); strategyAry.push(errorMsg); return strategies[strategy].apply(dom, strategyAry); &#125;) &#125;)(rule) &#125;&#125;;Validator.prototype.start = function() &#123; for(var i = 0, validatorFunc; validatorFunc = this.cache[i++];) &#123; var errorMsg = validatorFunc(); if (errorMsg) &#123; return errorMsg; &#125; &#125;&#125;;// 调用代码var registerForm = document.getElementById(&apos;registerForm&apos;);var validataFunc = function() &#123; var validator = new Validator(); validator.add(registerForm.userName, [&#123; strategy: &apos;isNoEmpty&apos;, errorMsg: &apos;用户名不可为空&apos; &#125;, &#123; strategy: &apos;isNoSpace&apos;, errorMsg: &apos;不允许以空白字符命名&apos; &#125;, &#123; strategy: &apos;minLength:2&apos;, errorMsg: &apos;用户名长度不能小于2位&apos; &#125;]); validator.add(registerForm.password, [ &#123; strategy: &apos;minLength:6&apos;, errorMsg: &apos;密码长度不能小于6位&apos; &#125;]); validator.add(registerForm.phoneNumber, [&#123; strategy: &apos;isMobile&apos;, errorMsg: &apos;请输入正确的手机号码格式&apos; &#125;]); var errorMsg = validator.start(); return errorMsg;&#125;registerForm.onsubmit = function() &#123; var errorMsg = validataFunc(); if (errorMsg) &#123; alert(errorMsg); return false; &#125;&#125; 第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程; 第二个部分是环境类Context，该Context接收客户端的请求，随后把请求委托给某一个策略类; 优点： 有效避免多重条件选择语句 提供了对外开放 - 封装原则的完美支持，将方法封装在独立的strategy中，使得它们易于切换、易于理解、易于扩展。 复用性 缺点： 增加了策略类/对象的使用 使用策略模式，必须先了解所有的strategy，违反了最少知识原则 参考资料 JavaScript设计模式之策略模式 js减少if语句的技巧 js对象属性的命名规则 javascript中||和&amp;&amp;代替if 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一道JS面试题引发的血案]]></title>
    <url>%2F2018%2F04%2F09%2F%E4%B8%80%E9%81%93JS%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88%2F</url>
    <content type="text"><![CDATA[刚入职新公司，属于公司萌新一枚，一天下午对着屏幕看代码架构时。BI项目组长给我看了一道面试别人的JS面试题。 虽然答对了，但把理由说错了，照样不及格。 话不多说，直接上题： 123456789101112var a = 1;switch (a) &#123; case 2: console.log(2) break; case 1, 2, 3: // 这里case是对比几呢？ console.log(1) break; default: break;&#125;// result：最后什么都不会输出 看完题如果答对并且知道理由的小伙伴，仅当加深印象；如果你也像我一样不明所以，请仔细往下看。 逗号表达式1表达式1，表达式2，表达式3，...... ，表达式n 逗号表达式的要领： 逗号表达式的运算过程为：从左往右逐个计算表达式 逗号表达式作为一个整体，它的值为最后一个表达式（也即表达式n）的值 逗号运算符的优先级别在所有运算符中最低 有了上述的概念，再回过头来看面试题就很清晰了。 打铁趁热，再来一道题来加深下理解。 1234567var i, j, k;for (i = 0, j = 0; i &lt; 10, j &lt; 6; i++, j++) &#123; k = i+j;&#125;console.log(k); // result：10 执行步骤如下表 i j k 0 0 0 1 1 2 2 2 4 3 3 6 4 4 8 5 5 10 一直埋头写代码，没用到的知识总是容易忘记，刚好碰到，索性做下笔记加深印象，努力学习知识，仅为装X。 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>常见问题</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂谈：前端Web通信]]></title>
    <url>%2F2018%2F03%2F25%2F%E6%9D%82%E8%B0%88%EF%BC%9A%E5%89%8D%E7%AB%AFWeb%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[Web2.0以来，Ajax的出世，解决了传统表单提交页面跳转，闪烁白屏等问题。使得Web页面可以实现局部更新，不仅减少了网络带宽，还大大提升了用户体验。 但Ajax并非是一把万能的钥匙，足以打开Web通信这扇大门，当请求遇到跨域通信时，Ajax就没辙了。 Web的快速发展让开发走向工程化的同时，要求工作维度进行划分（前端后端分工明细），以便扩展维护日益复杂庞大的项目需求。而前后端分离的开发方式正是这种需求背景下衍生的产物。（以前混编的代码现在是再也不想看到） 前后端分离的开发方式，如何进行数据通信是开发人员绕不过去的问题。作为开发同学的小伙伴客户端的浏览器，有点小调皮还做了一个同源策略的限制，当我们的数据请求遇到不同源的情况下（跨域），我们就得尝试其它的通信方法，不能Ajax一条道走到黑。 什么是同源策略及限制 同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。 同源要求协议，域名，端口(默认80)三者都相同，否则为非同源。 同源策略限制： Cookie， LocalStorage和IndexDB无法读取 Dom无法获取 Ajax请求不能发送 前后端如何通信 Ajax（仅支持同源） WebSocket （不受同源限制） CORS （都支持，新的W3C通信标准） 如何创建Ajax XMLHttpRequest对象的工作流程 兼容性处理 事件的触发条件 事件的触发顺序 12345678910111213141516171819202122232425262728293031323334var xhr = XMLHttpRequest ? new XMLHttpRequest() : new window.ActiveXObject(&apos;Microsoft&apos;)var data = opt.data, url = opt.url, type = opt.type.toUpperCase(), dataArr = [];for (var k in data) &#123; dataArr.push(k + &apos;=&apos; + data[k]);&#125;if (type === &apos;GET&apos;) &#123; url = url + &apos;?&apos; + dataArr.join(&apos;&amp;&apos;); xhr.open(type, url.replace(/\?$/g, &apos;&apos;, true); xhr.send();&#125; if (type === &apos;POST&apos;) &#123; xhr.open(type, url, true); xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;); xhr.send(data.join(&apos;&amp;&apos;));&#125;xhr.onload = function() &#123; if (xhr.status === 200 || xhr.status === 304) &#123; var res; if (opt.success &amp;&amp; opt.success instanceof Function) &#123; res = xhr.responseText; if (typeof res === &apos;string&apos;) &#123; res = JSON.parse(res); opt.success.call(xhr, res) &#125; &#125; else &#123; if (opt.error &amp;&amp; opt.error instanceof Function) &#123; opt.error.call(xhr, res); &#125; &#125; &#125;&#125; 同源下，我们可以直接使用Ajax来与后端同学做数据通信，但是遇到跨域请求时，我们就得更换手中这把Ajax的钥匙，来重新配钥匙开锁 跨域通信的几种方式 JSONP Hash postMessage (HTML5) WebSocket CORS (新的W3C通信标准) 1. JSONPJSONP原理：客户端通过动态创建script标签异步加载来实现，服务端callback返回客户端定义的方法名，让客户端进行调用获取数据。 只支持Get请求 (GET与POST的区别这里暂不细讲) 123456789// 客户端发送请求&lt;script src=&quot;http://www.abc.com?data=name&amp;callback=jsonpname&quot;&gt;&lt;/script&gt;&lt;script&gt;jsonpname(&#123; data: &#123; ... &#125;&#125;)&lt;/script&gt; 2. HashHash原理：通过window.onhashchange事件监听来获取url中hash值来实现数据传输。与Get一样，有Url长度限制1234567// A中代码var B = document.getElementdByTagName(&apos;iframe&apos;);B.src = B.src + &apos;#&apos; + &apos;data&apos;;// B中代码window.onhashchange = function()&#123; var data = window.location.hash;&#125; 3. postMessagepostMessage是HTML5的API，可参考开发文档window.postMessage12345678// A.com向B.com发送信息Bwindow.postMessage(&apos;data&apos;,&apos;http://B.com&apos;)// B中监听window.addEventListener(&apos;message&apos;, function(event)&#123; console.log(event.origin); // http://A.com console.log(event.source); // Bwindow console.log(event.data); // data&#125;, false) 项目中应用场景： 页面和其打开的新窗口的数据传递 多窗口之间消息传递 页面与嵌套的iframe消息传递 上面三个问题的跨域数据传递 4. WebSocketWebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，本身不受同源限制。12345678910111213141516// WebSocket代码示例var ws = new WebSocket(&apos;wss://echo.websocket.org&apos;);ws.onopen = function (evt) &#123; console.log(&apos;Connection open ...&apos;); ws.send(&apos;Hello WebSocket!&apos;);&#125;;ws.onmessage = function (evt) &#123; console.log(&apos;Received Message: &apos; + evt.data); ws.close();&#125;ws.onclose = function (evt) &#123; console.log(&apos;Connection closed.&apos;);&#125; 5. CORSCORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 浏览器兼容在XHR(IE8/9)及XHR2(&gt;=IE10)下需要做兼容处理。 12345678// CORS代码示例fetch(&apos;/url&apos;, &#123; method: &apos;get&apos;，&#125;).then(function(res)&#123; ...&#125;).catch(function(err) &#123; // 错误&#125;) – End –JSONP有更好的兼容性，能兼容低版本浏览器，但是基于Get传输数据，会因为浏览器Url长度限制而限制数据大小。CORS在不考虑低版本浏览器时，无疑是目前最好前后端通信方案（单向），双向选择WebSocket，而多个页面之间的数据通信，如内嵌iFrame等，则推荐postMessage。 每种方案有不同的应用场景，解决问题不只有一种解决方案，实际项目开发中，需根据实际需求来挑选最优的方案。 参考资料 html5 postMessage解决跨域、跨窗口消息传递 干货 | 前端常用的通信技术 阮一峰 — 跨域资源共享 CORS 详解 CORS正确使用姿势 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>常见问题</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂谈：渐进增强与优雅降级]]></title>
    <url>%2F2018%2F03%2F21%2F%E6%9D%82%E8%B0%88%EF%BC%9A%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E4%B8%8E%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[作为一名前端开发人员，最头疼的莫过于浏览器兼容。远古时期万恶的IE6，到现在CSS3不兼容的IE7/8.为了保证不同版本浏览器都有共同或更优化的用户体验，前端搬砖的我们不得不与浏览器兼容顽强斗争。而渐进增强和优雅降级两种不同的开发流程，也是在我们项目初期做调研选型时会考虑的一个点。 渐进增强（Progressive Enhancement）一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。 优雅降级（graceful degradation）一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。 初一看这两个概念有点高大上，其实作为开发人员来说，多多少少已经在项目中运用只是你自己不察觉而已。换个词汇就比较好理解了，渐进增强（向上/前兼容），优雅降级（向下兼容），向上兼容高版本浏览器，向下兼容低版本浏览器。 二者区别渐进增强和优雅降级只是看待同种事物的两种观点。渐进增强和优雅降级都关注于同一网站在不同设备里不同浏览器下的表现程度。关键的区别则在于它们各自关注的着重点不同，以及这种不同的关注点如何影响项目开发的流程。 优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 Chrome，Safari，IE、FireFox等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。 渐进增强观点则认为应关注于内容本身。请注意其中的差别：我甚至连“浏览器”三个字都没提。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得渐进增强成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。 概括：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带 代码案例12345678910111213.transition &#123; /*渐进增强写法*/ -webkit-transition: all .5s; -moz-transition: all .5s; -o-transition: all .5s; transition: all .5s;&#125;.transition &#123; /*优雅降级写法*/ transition: all .5s; -o-transition: all .5s; -moz-transition: all .5s; -webkit-transition: all .5s;&#125;// -webkit- / -moz- / -o- (浏览器前缀) 很久以前：浏览器前缀CSS3和正常CSS3都不支持； 不久之前：浏览器只支持前缀CSS3，不支持正常CSS3； 现在：浏览器既支持前缀CSS3，又支持正常CSS3； 未来：浏览器不支持前缀CSS3，仅支持正常CSS3. 渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3中前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3中前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。 现实项目开发中，推荐使用渐进增强的写法（postcss的autofixer也是这种写法），因为前缀CSS3的某些属性在浏览器中的实现效果有可能与正常的CSS3实现效果不太一样，所以最终还是得以正常CSS3为准。 可参考张鑫旭大神的文章《需警惕CSS3属性的书写顺序。 如何选择 低版本浏览器用户占比居多，优先采用渐进增强的开发流程； 高版本浏览器用户占比居多，优先采用优雅降级的开发流程； 事实上绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。例如，淘宝，京东，新浪微博等网站前端的更新，不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。当然也有一些反例如阿里云，本身就是面向软件开发者，这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本，而且大多用的是谷歌浏览器，即使用IE浏览器，也是高版本IE浏览器，面对这种情况，优雅降级的开发流程才是更好的选择。 参考文章 渐进增强、优雅降级 渐进增强 VS 优雅降级 渐进增强和优雅降级之间的有什么不同? 需警惕CSS3属性的书写顺序 优雅降级和渐进增强的区别 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>常见问题</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天才迈向传奇 | 《硅谷钢铁侠:埃隆·马斯克》]]></title>
    <url>%2F2018%2F02%2F10%2F%E5%A4%A9%E6%89%8D%E8%BF%88%E5%90%91%E4%BC%A0%E5%A5%87-%E7%A1%85%E8%B0%B7%E9%92%A2%E9%93%81%E4%BE%A0-%E5%9F%83%E9%9A%86%E9%A9%AC%E6%96%AF%E5%85%8B%2F</url>
    <content type="text"><![CDATA[埃隆·马斯克的名字也许有很多人不熟知，包括未看到这本书的我。可能我们对于硅谷很多传奇名人，听得多的都是比尔盖茨，乔布斯，扎克伯格，但是好像还真没听说过埃隆·马斯克的名字。那么换个词汇，“特斯拉”，相信不少关注极客圈或者喜欢折腾新科技产品的小伙伴，或多或少听过一点吧，而“特斯拉”的创始人兼CEO，正是埃隆·马斯克。 埃隆·马斯克是一名风格独具的梦想家，也是眼光独到、一再开创新商业模式的企业家。从PayPal，到特斯拉、Space X、太阳城，他的创业历程中遭遇了无数棘手的事件，但是每一次突破都令全球惊艳。无论钟情于什么领域，他都可以展现出惊人的专注力。44岁的马斯克已经涉足颠覆互联网、 金融、汽车、航空以及能源业。他近乎疯狂的对科技的专注，使他成为目前最成功的连续创业者和科技创业家。 —— 百度百科 时间最贵埃隆·马斯克在创立公司时要求员工节约开发成本，拒绝员工采购价格高昂的汽车零件，却可以花9万美元租一架飞机返自己的办公室。一般人看来，这不“有钱没处花么”，其实不然，处于这种职位的人，时间对他们来说更宝贵，他们可以利用时间来处理更多的事情，创造更多的财富。但对于普通人来说，心中的年头可能是“我是缺钱，但不缺时间”。我觉得背后隐藏的另一个词是效率，不管哪种工作成本，时间也是其中一种。记得曾在书中见到这么一个例子，一位高管不理解公司为何要付出额外的开销给他配置司机，他有自行驾车出行的能力，完全没有必要再付出一个人的工资来请司机。但是反过来，他每天上下班时，多出了一个小时来阅读工作汇报，项目计划，公司虽然多支出了一份薪水，但得到了高管更多的工作回报，于公司更有利。我们不可否认，人类的一生是很短暂的。不管多聪明，多优秀的人，也抵不过时间，逃不了生老病死。还在浪费时间的我们，是不是该想想自己剩下的时间，还有多少盈利呢？ 偏执狂梦想家梦想每个人都有，就算没有，做个白日梦，还有不会的么。但是能认真思考并实现的，坚持完成的，寥寥无几。而埃隆·马斯克，从天才走向传奇。当然传奇的道路上会有许多荆棘，梦想和野心没有经历挫折的洗礼，注定不够完美。埃隆·马斯克信仰自己的“武士道”精神，情愿切腹，也不愿忍受失败。最后拿柄武士刀成为一件装饰品，因为他战胜了失败。不管是PayPal、特斯拉、SpaceX、太阳城，他都赢了，亲手将自己的梦想一个一个实现。作为一名具有工业专业能力的天才，他相信科技可以改变世界，而现在，他已是硅谷的传奇。 多核并行我曾试想着自己创业时的场景，诘问自己能否做好一个项目，运营好一家公司。未读这本书之前，我认为其它创业成功的人也许同我同我一样，在他们创业时，从一而终，至少是第一家公司走上正轨之前，都不会有精力去折腾第二家，第三家公司。而埃隆·马斯克，就像一个多核的CPU，并行处理不同的任务，同时兼顾着PayPal，特斯拉，SpaceX多家公司，而且还没有宕机重启过。越是压力承肩时，越能做出最好的决策，这不疑需要高度的专注力与毕其功于一役的决心。 题外我自己本身很喜欢小唐尼的《钢铁侠》系列电影，读完埃隆·马斯克，确实有很多钢铁侠的影子，埃隆·马斯克并不是钢铁侠的原型，但个人自身的魅力，性格特征，偏执成狂，强硬做派等，与唐尼的钢铁侠不谋而合。摒弃掉书中很多我未能理解的技术词汇，我觉得作为平凡的我们，即使没有超高的智商和不凡的能力，也不妨将梦想再放大一些，万一哪天真的见鬼实现了呢。当然圆梦的道路上，你可不一定走得顺畅，但不妨迈出脚去走走看，指不定还能得到上火星居住的机会。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不曾停歇 | “超级个体”]]></title>
    <url>%2F2018%2F01%2F29%2F%E4%B8%8D%E6%9B%BE%E5%81%9C%E6%AD%87-%E8%B6%85%E7%BA%A7%E4%B8%AA%E4%BD%93%2F</url>
    <content type="text"><![CDATA[“你不努力，谁也给不了你想要的生活。欲带皇冠，必承其重。你想过上自己梦想的生活，就应该选择一条属于自己的道路，并为此付出别人无法企及的努力。”——韦娜 《世界不曾亏欠每一个努力的人》 新知识的快感，让知识瘫痪当我们尝试去学习新知识时，会有很多的新鲜感。而相比在旧有知识继续升华沉淀，你会感到越来越枯燥，甚至开始厌恶。的确，旧知识的学习遇到瓶颈，需要花费更多的时间精力来沉淀。而新知识，相当于把玩一件新式物件，调起你喜新厌旧的本性。所以很多人，包括我自己，满足于新知识的快感，学得多但不精，略懂皮毛而不深究。久而久之，知识越来越多，不规整，不成体系，根基不稳，最后受不住顶端压力，以崩塌告终。想要知识大厦牢固，逻辑清晰不混乱，合理地利用大脑储藏就是必经之路。抽出时间精力对旧有知识形成体系沉淀，打好地基，再逐步扩展汲取新知识，添砖加瓦。这样你的知识殿堂才足够牢固，又具扩展性。 成功不是从零开始，而是在其领域中知识能力的积累成功不是让你去开创一个你从未接触过的行业，从零开始去做起来，这样你成功的可能性极低。正如我们从小到大的学习生涯，数理化知识的积累，从语数英再到物理，化学，历史，政治等。没有语数英的基础，不会有后面科目的扩展学习。许多人创业当老板，程序员跑去当产品经理，产品经理跑来当投资人，都是利用自己原有的知识和经验，融入到自己新的工作上并取得成功，而不是摒弃掉你之前的果实，重新栽种一颗新的树苗，再拾起浇水驱虫的工作。 白日梦想家乐观无疑是好事，但是过于乐观，你的大脑缺乏压力，没有紧迫感，放松了对问题的思考。居安而思危，对危机要有足够的警惕性，做好危机应对的准备，方可让你离梦想更进一步，不至于危机到来时，一脸懵逼。 安全感的奴隶熟悉的工作岗位，固定的生活方式。会让我们形成一种安全感，对其依赖。不求改变，不敢尝试，不敢跳出自己的舒适圈，觉得自己的人生足够安逸，日复一日直到退休，似乎你已经看到自己退休的样子。殊不知现在企业的寿命比员工的寿命还要更短，世界500强的企业，寿命也不过30-40年左右。很明显，我们为企业工作到退休的时间可远远不止这点时间。所以只有求变，不断适应社会的步伐，不断学习挑战突破自己，提升自己的软技能，职场竞争能力，方可收获真正的安全感。 什么时候适合陪伴父母亲我们总觉得年轻时到大城市打拼，不能常伴父母身旁，特变是中国“百行孝为先”的传统思想，让我们对父母总有一份愧疚。换个角度思考，我们二三十岁时，父母亲的身体都还健壮，生活可以自理，甚至还未到退休年龄，不至于丧失生存能力。而到父母亲七十八十岁左右，年纪比较大了，身体病痛也随之增加，这个时候，我们大概四五十岁左右，作为子女的我们在这个阶段需要花费大量的时间、精力、财力去照顾父母。那么你想在四五十岁阶段具备充裕的时间，财务自由，时间自由，靠的是什么，靠的不就是在你年轻的时候去拼搏去奋斗，到大城市去打拼换取而来，自己四五十岁时的时间及财富么。所以，趁年轻，多出去浪浪。 适者生存这个时代什么样的人会生存下来，智者？强者？都不是，这个时代，不是“智者生存”，也不是“强者生存”，而是“适者生存”，是能够适应自己的生存环境，才不至于被淘汰在任何一个时代的个体。 乐高式能力组合单一的能力并不能使你更强大，在这个快节奏的时代，每个行业的知识都有可能被取代替换，科技带来的行业冲击，生活方式的改变，没有谁可以保证你所在的行业，你的工作不会被其它人或机器所替代。所谓技不压身，多一项能力，多一种技术，就意味着你比别人多一份机会，多一份优势。不断学习将单一的能力拼接合成你自己的软实力。 结尾 —— 成为“超级个体”每个人都有机会依靠自己的努力和才华成功。这个时代，有才而不成功的几率变小，缺的是怕你没有才华还不努力。]]></content>
      <categories>
        <category>日更文集</category>
      </categories>
      <tags>
        <tag>日更文集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你有我的知识焦虑么？]]></title>
    <url>%2F2018%2F01%2F28%2F%E4%BD%A0%E6%9C%89%E6%88%91%E7%9A%84%E7%9F%A5%E8%AF%86%E7%84%A6%E8%99%91%E4%B9%88%2F</url>
    <content type="text"><![CDATA[”知识焦虑“ 在信息爆炸时代，人们对信息的吸收是呈平方数增长，但面对如此大量的信息，人类的思维模式远没有高速到接受自如的阶段。由此造成一系列的自我强迫和紧张。 我相信我们现处的这个时代，很多人跟我一样，都有一份“知识焦虑”，对自己未知的信息和知识，给予了自己的自我强迫与紧张。面对自己的不努力，懒惰懈怠，都会有或多或少的一份不安全感与恨其不争的无奈。懒散过后，又开始信誓旦旦地制定学习计划，希望通过学习课程，读书来让自己的内心变得充实些。 现实中，如果你有个有钱的老爸，让你衣食无忧，光鲜亮丽，些许你会少点焦虑。可惜大多数人如你我，并没有这样足以啃老的臂膀。唯有步履匆匆，用兢兢业业的工作和不敢停歇的学习，来让自己拥有一份份看上去不那么不堪的安全感。因为明白，不学习不努力就意味着不拼爹，不拼高考，你已经没有什么可以跟他们比拼的了。 但是，你的努力真的对了么？？？你在背的雅思英语，你在看的MBA，你在看的成功学。真的适合你么？？？ 改变你的思维认知 “立场，体验，意见” —— “目标，方法，行动” 思维方式的转变，我们每一个人的大脑里总会产生各种天马行空的想法或创意，每个人有不同的个人体验和对事物的意见。但是真正落实实践自己想法，行动起来的却少之又少。 投资界有这么个故事，投资人考核一家初创公司，不是看公司第一把手，而是看公司的第二把手。因为公司第一把手大多是公司创意想法的制造者，而公司第二把手则是执行者，如果执行者能力足够胜任，那么证明这家公司可行。因为第一把手已经成功地推销了自己的想法，并且得到其它牛人的认可，并且确保可以正确有效地执行。那么公司可以成功地运营起来。初创公司空有想法创意，不能有效执行实施，终究是空谈。 我们的思维方式来自从小的生活环境，父母，学校，家庭的耳濡目染。更多的是来自父母，“富爸爸，穷爸爸”的思维方式，把父辈的那一套思维方式传递给了我们。 随着“阶层危机”的到来，让社会阶层越来越固化，平民阶层与上层阶层的界限，除了资源的比拼，更深层次地是思维认知的差距。“富爸爸，穷爸爸”不是现金存款房车的比拼，而是比拼贫富的思维认知。“贫穷限制了你的思维”这并不是一句调侃的话，而是鲜血淋漓的写照。 想改变你所处的阶层，想从平民阶层晋升到上层阶层，唯有从改变你的思维认知开始，让你的思维完成从“立场，体验，意见”到“目标，方法，行动”转变。使你的思维认知不再处于贫穷。 “体验型消费”如果你没有知识，出去旅游看见美丽的风景，你只会说“哇靠，太美了”。而有知识的人，当你看到夕阳余晖… 你的脑海浮现的是：“落霞与孤鹜齐飞，秋水共长天一色。” 而不是：“卧槽，好多鸟，好多鸟，卧槽，真TM太好看了！”没有文化积淀的旅行，到哪不过是在你的相机中多留几张照片而已。作为一个俗人，欣赏它的美并不需要任何的门槛。但是没有文化知识的积淀，你就只是在走马观花，到此一游。 学习方法知识量爆发式增长，知识付费的兴起，各种在线音视频课程，公众号课堂雨后春笋般增长，人们获取知识的成本越来越低。但与之对比是人们的时间却被剧烈分割，时间一点一点被碎片化。不再拥有像学校课堂里，让你整整45分钟坐在课桌前，学完一学期的课程。知识量与学习时间成反比增长，传统的、系统化的学习方法已经不再有效。我们所处的时代，有太多的诱惑纷扰我们的集中力，很多人时不时地去看手机，一刷个朋友圈，一看个头条微博，大半的时间就这样不翼而飞。强迫你拿着本书从头看到尾，这样耗时，又学不牢，估计看完了也就完了，又剩下多少是你自己的。 因此，如何利用有限的时间来完成自己的知识储备，对当下的我们尤为重要。 1. 20%的时间学习80%的知识80%的知识并不难学会，但是剩下20%的进阶知识往往需要花费更多的时间精力才可并入囊中。鉴于投入与产出成正比，20%的时间换取80%的知识显然更符合当下，学习过后通过转述或者读书笔记加深自己的理解和记忆，变成自己的知识储备。 2. 找一个牛人，跟着他学自己摸索前行，总有很多荆棘。避免少走弯路，我们缺少一个领路人。而行业/知识领域界的大牛，他就是我们想要到达的终点，也是我们学习的参考对象。跟着他学，我们将知道自己所要学习哪些知识，朝哪个方向努力，有哪些坑需要跳过。有人给你指明了前方的路，你更容易到达，这样焦虑负担相对小了些。 3. 先搭建概念大厦，再具体学习我们对于未知的知识或多或少都有抗拒，如果一开始就抗拒，不利于你去接受认可它。学习新知识，可以先了解新知识各种概念名词，再去细化具体每个概念的基础学习。正如我们手中拿起一本未读过的书，先翻阅目录，了解每个章节的概念名词，再去翻阅具体每个章节的知识。减少来自我们自身的抗拒，并在脑海中构建起新知识的骨架，再一点点拼积木完成学习积累。 从自身做出改变，总是一件很难很难的事情。但是一点点的不同，都是对自身努力的一次美好见证。愿你我终有所得。]]></content>
      <categories>
        <category>日更文集</category>
      </categories>
      <tags>
        <tag>日更文集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac终端配置，DIY你的Terminal（iTerm2 + Oh-My-Zsh）]]></title>
    <url>%2F2018%2F01%2F10%2FMac%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE%EF%BC%8CDIY%E4%BD%A0%E7%9A%84Terminal%EF%BC%88iTerm2-Oh-My-Zsh%EF%BC%89%2F</url>
    <content type="text"><![CDATA[使用mac osx一年以来，自带的Terminal终端一直都是白底黑字，食之无味，越来越缺乏新鲜感，怎么也得想个法子来刺激下眼球。不然花那么多大洋买你回来是要哪般，难道真是为来学习工作？？？怎么可能，不装逼谁TM买苹果。。。好吧，其实为来工作学习，装逼纯属业余。 完成配置后的终端具备功能： 语法高亮 命令行tab补全 自动提示符 显示Git仓库状态等功能 ⌘+r 快速清空代码面板，跟终端输入clear一样的效果 安装步骤1. 下载iTerm22. 解压后安装iTerm2并打开 iTerm2 -&gt; Make iTerm2 Default Term 打开偏好设置preference，选中Keys，勾选Hotkey下的Show/hide iTerm2 with a system-wide hotkey，将热键设置为 ⌘+. ，这样你就可以通过 ⌘+. 全局热键来打开或关闭iTerm2窗口，非常方便3. 配色方案选用 solarized，下载解压，然后打开 iTerm2 下的偏好设置 preference ，点开 profiles 下的colors 选项，点击右下角的 Color Presets 选项，选择import ，导入解压到的 solarized 文件下的Solarized Dark.itermcolors 4. 安装oh-my-zshgithub：https://github.com/robbyrussell/oh-my-zsh官方提供 curl 和 wget 两种安装方式curl 安装：sh -c ``&quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;wget安装：sh -c ``&quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot; 5. 配置主题安装oh-my-zsh成功后 用 vim 编辑隐藏文件 .zshrc， 终端输入vi ~/.zshrcZSH_THEME=&quot;agnoster&quot; 将zsh主题修改为“agnoster” 应用“agnoster”主题需要特殊的字体支持，否则会出现乱码情况，使用 Meslo 字体，点开链接点击 view raw 下载字体 安装字体到系统字体册 在iTerm2中应用字体 iTerm -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font） 重新打开iTerm2窗口（或新打开一个iTerm2窗口）即可以看到字体效果 6. 自动提示与命令补全比iTerm2自带的更强大的命令提示与补全 克隆仓库到本地 ~/.oh-my-zsh/custom/plugins 路径下git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions 用 vim 编辑 .zshrc 文件，找到插件设置命令，默认是 plugins=(git) ，我们把它修改为plugins=(zsh-autosuggestions git) PS：当你重新打开终端时可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些： cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions 用 vim 编辑 zsh-autosuggestions.zsh 文件，修改ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=10&#39; 7. 语法高亮效果 使用homebrew包管理工具安装 zsh-syntax-highlighting 插件brew install zsh-syntax-highlighting如果电脑上还没有安装homebrew，请先安装homebrew/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 配置.zshrc文件，插入一行source /xxx/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh(注意： /xxx/ 代表.zshrc所在的路径) 加载.zshrc配置source ~/.zshrc 重新打开iTerm2窗口（或新打开一个iTerm2窗口）即可以看到效果 扩展 iTerm2 默认使用dash改用zsh解决方法：chsh -s /bin/zsh iTerm2 zsh切换回原来的dash：chsh -s /bin/bash 卸载oh my zsh，在命令行输入：uninstall_oh_my_zsh 路径前缀的XX@XX太长，缩短问题：编辑~/.oh-my-zsh/themes/agnoster.zsh-theme主体文件，将里面的build_prompt下的prompt_context字段在前面加#注释掉即可 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>工具类</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序爬坑日记]]></title>
    <url>%2F2017%2F12%2F08%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%88%AC%E5%9D%91%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[新公司上手小程序。30天，从入门到现在，还没放弃。。。 虽然小程序发布出来快一年了，爬坑的兄弟们大多把坑都踩平了。而我一直停留在“Hello World”的学习阶段。一来没项目，只有项目才是实践学习的根本；二来刚出来，总是有很多坑。爬坑总是痛并快乐着。 再多的借口，产品项目需求拍在桌前，都得缴械投降。不要怂撸起袖子，就是干。 初识小程序微信推出小程序，想要实现即开即用，用完即走的用户体验。免去APP下载安装繁琐的流程。听起来像谷歌推出的PWA，不过PWA普及到国内还有段时间。而小程序借助于微信的用户群体，植入成本低，容易被用户接受。 小程序的代码风格跟Vue其实挺像，对于习惯Vue开发模式的同学，上手并没有太大的问题。 小程序不支持前端主流框架，如Vue，Angular，React，jQuery等，而且小程序有自己的一套视图容器(Dom)的写法，跟平常我们在web上写HTML不一样。不过CSS3那些变化不大。虽然文件名改成了(.wxss) 本司项目，使用webpack做打包工具，将代码编译成符合小程序的代码目录规范，采用wechat-mina-loader插件，实际开发起来跟在Vue下开发习惯一样。babel完成ES6转ES5，sass编译，压缩转化等工作都放到webpack中去做。 不支持dom操作小程序脚本内不能使用window,document对象，所以无法操作dom。如果想操作节点，可用wx.createSelectorQuery() 另外数据驱动的开发模式，跟Vue相同，只是写法换了（vue: v-if，小程序: wx:if） rpx布局 rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。 设计师做设计图以iPhone6作为设计稿基准就可以，基本上可以用rpx替换px，不过在一些表单或者提示页面，使用设计稿上的rpx会让小屏幕手机看着尺寸略小，提示页面可参照weui用px来实现 路由层级 wx.navigateTo(OBJECT)保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面 wx.redirctTo(OBJECT)关闭当前页面，跳转到应用内的某个页面 wx.switchTab(OBJECT)跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面 wx.reLaunch(OBJECT)关闭所有页面，打开到应用内的某个页面 小程序只能同时打开打开5个页面，当打开5个页面后，wx.navigateTo不能正常打开新页面，请避免多层级的交互方式，或者使用wx.redirctTo重定向 tabBar底部导航栏tabBar是一个数组。配置最少2个，最多5个，tab数组按顺序排序 页面滚动到顶部基础库1.4.0支持123wx.pageScrollTo(&#123; scrollTop: 0 //滚动到页面的目标位置（单位px）&#125;) 图片资源，CSS中的背景图片CSS中无法使用本地资源(开发目录中)的图片作为background-image。可以使用网络图片资源，或base64，或者使用image标签。tabBar的icon资源可使用本地资源 unionid与openid的区别每个用户在每个小程序里面都有唯一的openid，如果想在多个公众号，小程序里面共享用户信息，统一识别该用户，则需要用到unionid。为了获取uniond则需要注册微信开放平台，将需要共享的小程序，公众号进行绑定（不超过10个，超过10个还要申请认证称为第三发平台）。 textarea在滚动页面中的bugtextarea,map等组件是由客户端创建的原生组件，它的层级是最高的。如果有遇到定位元素的话。永远在最上面，盖不住。 请勿在 scroll-view、swiper、picker-view、movable-view 中使用 textarea 组件 CSS动画对textarea无效 项目场景：页面底部固定了一个按钮（position:fixed), 页面滚动时，textarea总是在按钮上面，点击按钮就点到了textarea 可以设置网络请求的超时时间app.js中配置123&quot;networkTimeout&quot;: &#123; &quot;request&quot;: 10000 // 10秒&#125; window配置navigationBarTextStyle 导航栏标题颜色仅支持black/white状态栏，导航条，标题，窗口背景色支持纯色，不支持渐变色 参数问题 url中添加参数，如url?a=1&amp;b=2, onLoad(options) options.query.a, options.query.b可获取到 扫描小程序码进页面，如果想获取小程序码url中所带的参数，可通过options.scene获取，不过需要对二维码中的scene值进行转换decodeURIComponent(options.scene), 调试阶段可以使用开发工具的条件编译自定义参数 scene=xxxx 进行模拟，开发工具模拟时的 scene 的参数值需要进行 urlencode (启动参数：scene=n%3D1001) 实际为scene=n=1001，参数n=1001 image标签图片image默认width: 300px, height: 225px, lazy-load懒加载只对page与scroll-view下的image有效mode缩放模式，mode=”widthFix”比较常用(宽度不变，高度自动变化，保持原图宽高比不变) 小程序可以监听小程序的关闭后，但是无法阻断场景：想在小程序退出时弹出个提示框，并阻止关闭（暂时无法实现） 小程序码小程序码(葵花码)有几种方式，只有发布过小程序才可正常显示小程序码 小程序第一次提交的审核时间较后面的长第一次提交审核一般1天到2天。所以为了能准点上线，建议先上一次临时的版本(放一个提示页面都可以)，过了第一次审核发布再说。日常提交审核，2-3小时就可以。 频繁地setData会造成性能问题频繁地setData操作，会出现卡顿，操作反馈延迟严重，甚至有可能闪退。 场景：原计划用countUp做数字动画，原理就是频繁地改变数字值，setData操作，渲染到模版上。 ES6转ES5，小程序检测目录中的js文件(极少)项目中用了webpack进行ES6转ES5，所以关闭了微信小程序的ES6转ES5功能。这个坑就比较隐蔽了，测试的时候在5S真机上报js错误，发现有个js(使用了ES6，没有转ES5)文件没有使用，微信小程序会去检测目录中的js文件，如果关闭了微信自带的ES6转ES5，检测到目录中js文件不兼容ES5，就报错。这个Bug只在5S真机里出现过，5C都正常。如果开启了微信开发工具中的ES6转ES5，则会自动帮你完成转化工作，不会出现类似问题。 分享些小程序开发比较常用的第三方库 weui-wxss(小程序版的weui样式库) Github: https://github.com/Tencent/weui-wxss wepy(小程序组件化框架) Github: https://github.com/Tencent/wepy skyvow/vux(小程序组件库) Github: https://github.com/skyvow/wux xiaolin3303/wx-charts(小程序图标) Github: https://github.com/xiaolin3303/wx-charts 作者：以乐之名 本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>微信</category>
      </categories>
      <tags>
        <tag>WEB 微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm常用命令整理]]></title>
    <url>%2F2017%2F10%2F04%2Fnpm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[npm是一个NodeJS包管理跟分发工具，已经成为了非官方的发布node模块（包）的标准。它可以帮助我们解决代码部署上的一些问题，将开发者从繁琐的包管理工作中(版本、依赖等)解放出来，更加专注于功能上的开发，大大提升我们的工作效率。 以下为日常应用中收集整理的npm常用命令: 初始化 引导你创建一个package.json文件npm init 查看package.json文件内容格式npm help json 安装模块 (install 可简写为 i)npm install moduleName(安装到当前目录，仅在当前目录可用) 全局安装npm install moduleName -g(全局安装，可在所有目录下使用) 安装package.json中的模块npm install(目录中存在package.json，将安装package.json配置号的版本模块，install后面可不带模块名) 安装到开发环境依赖npm install moduleName --save-dev(例如一些预编译包，如sass-loader,less-loader等，仅在开发环境中会用到) 安装到生成环境依赖npm install moduleName --save 卸载模块 (uninstall 可简写 un)npm uninstall moduleName 重新安装模块npm rebuild moduleName 查看帮助npm help 检查模块是否已经过时npm outdated（列出所有有新版本的模块，方便对包的更新） 检查npm线上是否存在该模块npm search moduleName（当你想要发布自己写的包时，需查看线上是否有同名的已发布的包） 查看当前目录模块的安装路径npm root 查看全局安装模块的安装路径npm root -g 查看npm安装的版本npm -v 更新本机npm的版本npm install -g 更多npm命令请查看NPM官方文档 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[preventDefault,stopPropagation,return false三者的区别]]></title>
    <url>%2F2017%2F08%2F31%2FpreventDefault-stopPropagation-return-false%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[逛帖子的时候看到道友发的前端面试题， preventDefault(), stopPropagation(), return false三者的区别 这三者的使用想必大家并不陌生，但是细想之下还是有可究之处。 preventDefault()阻止元素在浏览器中的默认行为1234&lt;a id=&quot;link&quot; href=&quot;http://wuliv.com&quot;&gt;网站&lt;/a&gt;$(&apos;#link&apos;).click(function(event)&#123; event.preventDefault(); // 阻止了a链接href的访问或跳转&#125;) stopPropagation()事件冒泡：当一个元素上的事件被触发时，比如鼠标点击了一个按钮，同样的事件将会在该按钮元素的所有父级／祖先元素上触发。这一个过程就被称为事件冒泡。它是由子级元素先触发，父级元素后触发，由内而外（由下往上）的一个流程。与之顺序相反的是事件捕获。 事件捕获：父级元素先触发，子级元素后触发，在此仅做了解。 12345678910111213141516171819202122232425262728293031&lt;body&gt; &lt;div id=&quot;inner&quot;&gt; &lt;p&gt;事件冒泡例子&lt;/p&gt; &lt;button id=&quot;btn&quot;&gt;我要弹个框&lt;/button&gt; &lt;/div&gt;&lt;/div&gt;$(&apos;#btn&apos;).click(function(event)&#123; event.stopPropagation(); // 阻止了事件冒泡，不会触发&quot;#inner, body&quot;的点击事件 console.log(&apos;#btn&apos;)&#125;)$(&apos;#inner&apos;).click(function(event)&#123; // #btn 阻止了冒泡，这里不会执行 // 如果不使用stopPropagation, 当#btn点击时，这里也会执行 console.log(&apos;#inner&apos;)&#125;)$(&apos;body&apos;).click(function(event)&#123; // #btn 阻止了冒泡，.btn点击不会影响到我 // 如果不使用stopPropagation, 当#btn点击时，这里也会执行 console.log(&apos;body&apos;)&#125;)// 使用了stopPropagation()输出&apos;#btn&apos;// 不使用stopPropagation()输出&apos;#btn&apos;&apos;#inner&apos;&apos;body&apos; stopImmediatePropagation()阻止对象绑定的剩余的事件处理函数方法的执行，并阻止当前事件的冒泡。可以理解为stopImmediatePropagation是stopPropagation的升级版，除了阻止冒泡，还能阻止结束掉当前对象未执行的其它绑定事件方法。 jQuery中一个对象可以绑定多个事件方法，执行顺序会按照绑定的先后顺序来执行 12345678910111213141516171819202122232425262728293031323334353637&lt;body&gt; &lt;div id=&quot;inner&quot;&gt; &lt;p&gt;stopImmediatePropagation()例子&lt;/p&gt; &lt;button id=&quot;btn&quot;&gt;按钮&lt;/btn&gt; &lt;/div&gt;&lt;/body&gt;$(&apos;body&apos;).click(function(event)&#123; // body 点击 console.log(&apos;body&apos;);&#125;);$(&apos;#inner&apos;).click(function(event)&#123; // #inner 点击 console.log(&apos;#inner&apos;);&#125;)$(&apos;#btn&apos;).click(function(event)&#123; // 第一个#btn点击 e.stopImmediatePropagation(); console.log(&apos;#btn 1&apos;);&#125;)$(&apos;#btn&apos;).click(function(event)&#123; // 第二个#btn点击 console.log(&apos;#btn 2&apos;)&#125;)// 最终输出&apos;#btn 1&apos; // (因为stopImmediatePropagation阻止了#btn绑定的剩余未执行的事件方法，并且阻止了冒泡)// 如果不使用stopImmediatePropagation， 将输出&apos;#btn 1&apos;&apos;#btn 2&apos;&apos;#inner&apos;&apos;body&apos;同个对象执行顺序按绑定顺序执行，冒泡则由内向外执行 return false“return false” 相信不少同学会用来阻止元素在浏览器中的默认行为，拿它当preventDefault()使用，但其实“return false”做的事情不仅仅只是阻止默认行为 当调用“return false”时，它执行了以下三件事情 event.preventDefault() event.stopPropagation() 停止回调函数执行并立即返回 1，2点还好理解，那么第3点是怎么回事？return语句会终止函数的执行并返回函数的值。所以不管是否返回false或是其它值，return语句后面的代码都不会执行。而返回false，使它具备了preventDefault和stropPropagation的功能 123456$(&apos;a&apos;).click(function()&#123; return false; // return false直接返回了，并不会执行alert alert(&apos;我没有被弹出来&apos;);&#125;)// preventDefault 和 stopPropagation 并不会阻止回调函数的执行 总结很多jQuery教程在代码演示中用“return false”来阻止执行浏览器的默认行为。久而久之，很多同学习惯滥用“return false”来代替preventDefault 大多数情况下，我们仅仅是想要它执行跟preventDefault的功能而已，但它却自作主张地帮你执行了另外两步操作。比较好的编程习惯是，需要用到该事件方法再去调用，否则应该避免冗余事件的执行。就像prevnetDefault完成它该有的工作，并不会阻止父节点继续处理事件，使得代码更加灵活，更易于维护。 日常开发中还是要慎用“return false”，除非你同时需要preventDefault和stopPropagation，并且确定你的回调函数执行完成后调用，那么你可以使用“return false”，否则还是用preventDefault 或 stopPropagation 更好些。 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。 参考文章：《preventDefault()、stopPropagation()、return false 之间的区别》]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>Javascript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP中GET与POST的区别 99%的错误认识]]></title>
    <url>%2F2017%2F08%2F27%2FHTTP%E4%B8%ADGET%E4%B8%8EPOST%E7%9A%84%E5%8C%BA%E5%88%AB-99-%E7%9A%84%E9%94%99%E8%AF%AF%E8%AE%A4%E8%AF%86%2F</url>
    <content type="text"><![CDATA[本篇文章分两部分，第一部分可以列为初为新人的装逼失败模式，第二部分列为修炼低调模式。装逼失败模式：99%的人对GET和POST的认识修炼低调模式：1%不知道的进阶认识 GET和POST，在我们日常WEB开发中，是最常用的数据传输方式。面试中我们也经常会遇到。一般我们在浏览器输入一个网址URL访问网站都是GET方式请求；在HTML FROM表单中，可以通过设置method指定提交方式为GET或者POST方式，默认为GET提交方式 HTTP定义了与服务器交互的不同方法，其中最基本的四种：GET，POST，PUT，DELETE，HEAD；其中GET和HEAD被称为安全方法，因为使用GET和HEAD的HTTP请求不会产生什么动作。不会产生动作意味着GET和HEAD的HTTP请求不会在服务器上产生任何结果。但是安全方法并不是什么动作都不产生，这里的安全方法仅指不会修改信息。 GET和POST我们比较常用，其它几种实际应用比较少用到，在此仅作了解。 99%的人所认为的GET和POST1. 传输方式（自我理解“显示方式”）GET请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数之间以&amp;连接，如&quot;http://www.xxx.com/product?type=shoe&amp;price=100&amp;sex=male&quot;数据格式有以下注意点： 如果数据是英文字母/数字，原样发送； 如果是空格，转换为+； 如果是中文或其他字符，则把数据用Base64加密，如&quot;%E4%BD%A0%E5%A5%BD&quot;其中％XX中的XX为该符号以16进制表示的ASCII码。 POST请求会把请求的数据放置在HTTP请求包的包体中，GET传输的数据会直接暴露在URL中，而POST请求则不会。 2. 传输数据大小GET方式传输的数据最多只能是1024字节，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系，URL本身不存在参数上限的问题，HTTP协议规范也没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。 注意：限制是针对整个URL长度，不单是传输的数据长度。 POST方式理论上没有限制，可传较大的数据。起限制作用的是服务器的处理程序的处理能力。Apache, Nigx, IIS服务器自身可配置限制传输大小。 3. GET在浏览器回退是无害的，而POST会再次提交请求4. GET产生的URL可以作为标签或存于历史记录中，而POST不可以5. GET请求会被浏览器主动cahe，而POST不会，除非手动设置6. 安全性GET传输的数据直接暴露在URL中，如果我们在做用户登录时，需要传输登录帐号及密码到后端做验证，如果用GET方式，那么账户密码直接暴露在URL里面，是极其危险的。而且浏览器缓存的机制，访问过的网站URL会被保存在浏览器历史记录里，其他人可通过历史记录查看访问网站URL，直接获取到传输的数据。很可能受到 “Cross-site request forgery”(中文名称：跨站请求伪造) 攻击。不过POST的数据也是可以被拦截的。 总结： GET请求是用来向服务器发送索取数据的一种请求，实际应用中数据不涉及到安全性，可用GET方式来向后端请求数据，如分页或搜索关键词 &quot;http://www.xxx.com/product?keywords=xxx&amp;page=2&quot;; POST请求是向服务器提交数据的一种请求，涉及到安全性的数据，用POST的方式来传输较GET更安全。 曾经的曾经，我也是那99%的一员，还把自己归纳的文章发给新人同事看，然后装逼失败，被老大引导练成最后的这1%。 1%的人所拥有的GET和POST本质上是没有区别的，它们是HTTP协议中的两种发送请求的方式。HTTP是基于TCP/IP的关于数据如何在万维网中通信的协议，即HTTP的底层是TCP/IP，所以GET和POST的底层也是TCP/IP，也就是说：GET/POST都是TCP链接。给POST带上url参数，给GET加上request body，技术上是可以实现的。 为了更方便的管理，避免混乱，HTTP给这些请求定义GET，POST，PUT，DELETE。而数据大小，则是因为浏览器的限制造成的。 所以GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同 隐藏的BuffGET产生一个TCP数据包，而POST产生两个TCP数据包 GET的请求，浏览器会把http header和data一并发送出去，服务器返回200（返回数据）POST的请求，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200（返回数据） 因为POST需要两步，时间上消耗的多一点，不过网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点 并不是所有浏览器POST发送两次包，Fiefox就发送一次。 最后的最后，当你以后被别人问到的时候，你就可以。。。。。。请开始你的表演 作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。 参考文章：《99%的人都理解错了HTTP中GET与POST的区别》]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>WEB</tag>
      </tags>
  </entry>
</search>
