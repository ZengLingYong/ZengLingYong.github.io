<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[JavaScript设计模式（六）：观察者模式与发布订阅模式]]></title>
      <url>/2019/07/10/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="观察者模式（Observer）"><a href="#观察者模式（Observer）" class="headerlink" title="观察者模式（Observer）"></a>观察者模式（Observer）</h3><blockquote>
<p>观察者模式：定义了对象间一种一对多的依赖关系，当目标对象 Subject 的状态发生改变时，所有依赖它的对象 Observer 都会得到通知。</p>
</blockquote>
<p>简单点：女神有男朋友了，朋友圈晒个图，甜蜜宣言 “老娘成功脱单，希望你们欢喜”。各位潜藏备胎纷纷失恋，只能安慰自己你不是唯一一个。</p>
<h4 id="模式特征"><a href="#模式特征" class="headerlink" title="模式特征"></a>模式特征</h4><ol>
<li><p>一个目标者对象 <code>Subject</code>，拥有方法：添加 / 删除 / 通知 <code>Observer</code>；</p>
</li>
<li><p>多个观察者对象 <code>Observer</code>，拥有方法：接收 <code>Subject</code> 状态变更通知并处理；</p>
</li>
<li><p>目标对象 <code>Subject</code> 状态变更时，通知所有 <code>Observer</code>。</p>
</li>
</ol>
<p><code>Subject</code> 添加一系列 <code>Observer</code>， <code>Subject</code> 负责维护与这些 <code>Observer</code> 之间的联系，“你对我有兴趣，我更新就会通知你”。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">// 目标者类</div><div class="line">class Subject &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.observers = [];  // 观察者列表</div><div class="line">  &#125;</div><div class="line">  // 添加</div><div class="line">  add(observer) &#123;</div><div class="line">    this.observers.push(observer);</div><div class="line">  &#125;</div><div class="line">  // 删除</div><div class="line">  remove(observer) &#123;</div><div class="line">    let idx = this.observers.findIndex(item =&gt; item === observer);</div><div class="line">    idx &gt; -1 &amp;&amp; this.observers.splice(idx, 1);</div><div class="line">  &#125;</div><div class="line">  // 通知</div><div class="line">  notify() &#123;</div><div class="line">    for (let observer of this.observers) &#123;</div><div class="line">      observer.update();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 观察者类</div><div class="line">class Observer &#123;</div><div class="line">  constructor(name) &#123;</div><div class="line">    this.name = name;</div><div class="line">  &#125;</div><div class="line">  // 目标对象更新时触发的回调</div><div class="line">  update() &#123;</div><div class="line">    console.log(`目标者通知我更新了，我是：$&#123;this.name&#125;`);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 实例化目标者</div><div class="line">let subject = new Subject();</div><div class="line"></div><div class="line">// 实例化两个观察者</div><div class="line">let obs1 = new Observer(&apos;前端开发者&apos;);</div><div class="line">let obs2 = new Observer(&apos;后端开发者&apos;);</div><div class="line"></div><div class="line">// 向目标者添加观察者</div><div class="line">subject.add(obs1);</div><div class="line">subject.add(obs2);</div><div class="line"></div><div class="line">// 目标者通知更新</div><div class="line">subject.notify();  </div><div class="line">// 输出：</div><div class="line">// 目标者通知我更新了，我是前端开发者</div><div class="line">// 目标者通知我更新了，我是后端开发者</div></pre></td></tr></table></figure>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ol>
<li><p>目标者与观察者，功能耦合度降低，专注自身功能逻辑；</p>
</li>
<li><p>观察者被动接收更新，时间上解耦，实时接收目标者更新状态。</p>
</li>
</ol>
<h4 id="不完美"><a href="#不完美" class="headerlink" title="不完美"></a>不完美</h4><p>观察者模式虽然实现了对象间依赖关系的低耦合，但却不能对事件通知进行细分管控，如 “筛选通知”，“指定主题事件通知” 。</p>
<p>比如上面的例子，仅通知 “前端开发者” ？观察者对象如何只接收自己需要的更新通知？上例中，两个观察者接收目标者状态变更通知后，都执行了 <code>update()</code>，并无区分。</p>
<p>“00后都在追求个性的时代，我能不能有点不一样？”，这就引出我们的下一个模式。进阶版的观察者模式。“发布订阅模式”，部分文章对两者是否一样都存在争议。</p>
<p>仅代表个人观点：两种模式很类似，但是还是略有不同，就是多了个第三者，因 JavaScript 非正规面向对象语言，且函数回调编程的特点，使得 “发布订阅模式” 在 JavaScript 中代码实现可等同为 “观察模式”。</p>
<h3 id="发布订阅模式（Publisher-amp-amp-Subscriber）"><a href="#发布订阅模式（Publisher-amp-amp-Subscriber）" class="headerlink" title="发布订阅模式（Publisher &amp;&amp; Subscriber）"></a>发布订阅模式（Publisher &amp;&amp; Subscriber）</h3><blockquote>
<p>发布订阅模式：基于一个事件（主题）通道，希望接收通知的对象 Subscriber 通过自定义事件订阅主题，被激活事件的对象 Publisher 通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。</p>
</blockquote>
<p>发布订阅模式与观察者模式的不同，“第三者” （事件中心）出现。目标对象并不直接通知观察者，而是通过事件中心来派发通知。</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">// 事件中心</div><div class="line">let pubSub = &#123;</div><div class="line">  list: [],</div><div class="line">  subscribe: function (key, fn) &#123;   // 订阅</div><div class="line">    if (!this.list[key]) &#123;</div><div class="line">      this.list[key] = [];</div><div class="line">    &#125;</div><div class="line">    this.list[key].push(fn);</div><div class="line">  &#125;,</div><div class="line">  publish: function(key, ...arg) &#123;  // 发布</div><div class="line">    for(let fn of this.list[key]) &#123;</div><div class="line">      fn.call(this, ...arg);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  unSubscribe: function (key) &#123;     // 取消订阅</div><div class="line">    let fnList = this.list[key];</div><div class="line">    if (!fnList) return false;</div><div class="line"></div><div class="line">    if (!fn) &#123;</div><div class="line">      // 不传入指定取消的订阅方法，则清空所有key下的订阅</div><div class="line">      fnList &amp;&amp; (fnList.length = 0);</div><div class="line">    &#125; else &#123;</div><div class="line">      fnList.forEach((item, index) =&gt; &#123;</div><div class="line">        if (item === fn) &#123;</div><div class="line">          fnList.splice(index, 1);</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 订阅</div><div class="line">pubSub.subscribe(&apos;onwork&apos;, time =&gt; &#123;</div><div class="line">  console.log(`上班了：$&#123;time&#125;`);</div><div class="line">&#125;)</div><div class="line">pubSub.subscribe(&apos;offwork&apos;, time =&gt; &#123;</div><div class="line">  console.log(`下班了：$&#123;time&#125;`);</div><div class="line">&#125;)</div><div class="line">pubSub.subscribe(&apos;launch&apos;, time =&gt; &#123;</div><div class="line">  console.log(`吃饭了：$&#123;time&#125;`);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 发布</div><div class="line">pubSub.publish(&apos;offwork&apos;, &apos;18:00:00&apos;); </div><div class="line">pubSub.publish(&apos;launch&apos;, &apos;12:00:00&apos;);</div><div class="line"></div><div class="line">// 取消订阅</div><div class="line">pubSub.unSubscribe(&apos;onwork&apos;);</div></pre></td></tr></table></figure>
<p>发布订阅模式中，订阅者各自实现不同的逻辑，且只接收自己对应的事件通知。实现你想要的 “不一样”。</p>
<p><strong>DOM 事件监听也是 “发布订阅模式” 的应用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let loginBtn = document.getElementById(&apos;#loginBtn&apos;);</div><div class="line"></div><div class="line">// 监听回调函数（指定事件）</div><div class="line">function notifyClick() &#123;</div><div class="line">    console.log(&apos;我被点击了&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 添加事件监听</div><div class="line">loginBtn.addEventListener(&apos;click&apos;, notifyClick);</div><div class="line">// 触发点击, 事件中心派发指定事件</div><div class="line">loginBtn.click();             </div><div class="line"></div><div class="line">// 取消事件监听</div><div class="line">loginBtn.removeEventListener(&apos;click&apos;, notifyClick);</div></pre></td></tr></table></figure>
<p>发布订阅的通知顺序：</p>
<ol>
<li><p>先订阅后发布时才通知（常规）</p>
</li>
<li><p>订阅后可获取过往以后的发布通知 （QQ离线消息，上线后获取之前的信息）</p>
</li>
</ol>
<h4 id="流行库的应用"><a href="#流行库的应用" class="headerlink" title="流行库的应用"></a>流行库的应用</h4><ol>
<li><p>jQuery 的 <code>on</code> 和 <code>trigger</code>，<code>$.callback()</code>;</p>
</li>
<li><p>Vue 的双向数据绑定;</p>
</li>
<li><p>Vue 的父子组件通信 <code>$on/$emit</code></p>
</li>
</ol>
<h5 id="jQuery-的-Callback"><a href="#jQuery-的-Callback" class="headerlink" title="jQuery 的 $.Callback()"></a>jQuery 的 $.Callback()</h5><p>jQuery 的 $.Callback() 更像是观察者模式的应用，不能更细粒度管控。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function notifyHim(value) &#123;</div><div class="line"> console.log(&apos;He say &apos; + value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function notifyHer(value) &#123;</div><div class="line"> console.log(&apos;She say &apos; + value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$cb = $.Callbacks();    // 声明一个回调容器：订阅列表 </div><div class="line"></div><div class="line">$cb.add(notifyHim);     // 向回调列表添加回调：订阅</div><div class="line">$cb.add(notifyHer);     // 向回调列表添加回调：订阅</div><div class="line"></div><div class="line">$cb.fire(&apos;help&apos;);       // 调用所有回调： 发布</div></pre></td></tr></table></figure></p>
<h5 id="Vue-的双向数据绑定"><a href="#Vue-的双向数据绑定" class="headerlink" title="Vue 的双向数据绑定"></a>Vue 的双向数据绑定</h5><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g4uu40o2u1j30ij0e5dg0.jpg" alt="Vue双向数据绑定"></p>
<p>利用 <code>Object.defineProperty()</code> 对数据进行劫持，设置一个监听器 <code>Observer</code>，用来监听数据对象的属性，如果属性上发生变化了，交由 <code>Dep</code> 通知订阅者 <code>Watcher</code> 去更新数据，最后指令解析器 <code>Compile</code> 解析对应的指令，进而会执行对应的更新函数，从而更新视图，实现了双向绑定。</p>
<ol>
<li><code>Observer</code> (数据劫持)</li>
<li><code>Dep</code> (发布订阅) </li>
<li><code>Watcher</code> (数据监听)</li>
<li><code>Compile</code> (模版编译)</li>
</ol>
<p>关于 Vue 双向数据绑定原理，可自行参考其它文章，或推荐本篇 <a href="https://juejin.im/post/5b86119a6fb9a019f928d82d#heading-5" target="_blank" rel="external">《 vue双向数据绑定原理》</a>。</p>
<ul>
<li><a href="https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js" target="_blank" rel="external">Vue源码传送门</a></li>
</ul>
<h5 id="Vue-的父子组件通信"><a href="#Vue-的父子组件通信" class="headerlink" title="Vue 的父子组件通信"></a>Vue 的父子组件通信</h5><p><code>Vue</code> 中，父组件通过 <code>props</code> 向子组件传递数据（自上而下的单向数据流）。父子组件之间的通信，通过自定义事件即 <code>$on</code> , <code>$emit</code> 来实现（子组件 <code>$emit</code>，父组件 <code>$on</code>)。</p>
<p>原理其实就是 <code>$emit</code> 发布更新通知，而 <code>$on</code> 订阅接收通知。<code>Vue</code> 中还实现了 <code>$once</code>（一次监听），<code>$off</code>（取消订阅）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 订阅</div><div class="line">vm.$on(&apos;test&apos;, function (msg) &#123;</div><div class="line">    console.log(msg)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 发布</div><div class="line">vm.$emit(&apos;test&apos;, &apos;hi&apos;)</div></pre></td></tr></table></figure>
<ul>
<li><p><a href="https://github.com/vuejs/vue/blob/c24f3e4208cd045832002ee9916559f6fe0dc2b5/src/core/instance/events.js" target="_blank" rel="external">Vue源码传送门</a></p>
</li>
<li><p><a href="https://cn.vuejs.org/v2/api/#vm-on" target="_blank" rel="external">Vue文档传送门</a></p>
</li>
</ul>
<h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ol>
<li>对象间功能解耦，弱化对象间的引用关系；</li>
<li>更细粒度地管控，分发指定订阅主题通知</li>
</ol>
<h4 id="不完美-1"><a href="#不完美-1" class="headerlink" title="不完美"></a>不完美</h4><ol>
<li>对间间解耦后，代码阅读不够直观，不易维护；</li>
<li>额外对象创建，消耗时间和内存（很多设计模式的通病）</li>
</ol>
<h3 id="观察者模式-VS-发布订阅模式"><a href="#观察者模式-VS-发布订阅模式" class="headerlink" title="观察者模式 VS 发布订阅模式"></a>观察者模式 VS 发布订阅模式</h3><p><img src="https://upload-images.jianshu.io/upload_images/7324444-6b45812da5328998.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="观察者模式 VS 发布订阅模式"></p>
<h4 id="类似点"><a href="#类似点" class="headerlink" title="类似点"></a>类似点</h4><p>都是定义一个一对多的依赖关系，有关状态发生变更时执行相应的通知。</p>
<h4 id="区别点"><a href="#区别点" class="headerlink" title="区别点"></a>区别点</h4><p>发布订阅模式更灵活，是进阶版的观察者模式，指定对应分发。</p>
<ol>
<li><p>观察者模式维护单一事件对应多个依赖该事件的对象关系；</p>
</li>
<li><p>发布订阅维护多个事件（主题）及依赖各事件（主题）的对象之间的关系；</p>
</li>
<li><p>观察者模式是目标对象直接触发通知（全部通知），观察对象被迫接收通知。发布订阅模式多了个中间层（事件中心），由其去管理通知广播（只通知订阅对应事件的对象）；</p>
</li>
<li><p>观察者模式对象间依赖关系较强，发布订阅模式中对象之间实现真正的解耦。</p>
</li>
</ol>
<hr>
<h4 id="对象属性数据拦截方式："><a href="#对象属性数据拦截方式：" class="headerlink" title="对象属性数据拦截方式："></a>对象属性数据拦截方式：</h4><ol>
<li><code>Object.defineProperty()</code> 属性描述符；</li>
<li>ES6 Class set ；</li>
<li>ES6 <code>Proxy</code> 代理；</li>
</ol>
<hr>
<p>参考文章：</p>
<ul>
<li><a href="https://juejin.im/post/5bb1bb616fb9a05d2b6dccfa" target="_blank" rel="external">谈谈观察者模式和发布订阅模式</a></li>
<li><a href="https://blog.csdn.net/lm278858445/article/details/78287492" target="_blank" rel="external">原生JavaScript实现观察者模式</a></li>
<li><a href="https://juejin.im/post/5c0a9d9bf265da612909ff1b" target="_blank" rel="external">观察者模式 vs 发布订阅模式</a></li>
<li><a href="https://juejin.im/post/5b86119a6fb9a019f928d82d#heading-5" target="_blank" rel="external">vue双向数据绑定原理</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式（五）：迭代器模式]]></title>
      <url>/2019/07/01/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4kpw3umvoj30m80goq3l.jpg" alt="迭代器模式"></p>
<p>文章内容分两部分：</p>
<ol>
<li>前半部分为 “迭代器模式” 概念；</li>
<li>后半部分为 ES6 中 Iterator (迭代器）</li>
</ol>
<hr>
<p>上半部分开始…</p>
<blockquote>
<p>迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>
</blockquote>
<p>简单理解（白话理解）：统一 “集合” 型数据结构的遍历接口，实现可循环遍历获取集合中各数据项（不关心数据项中的数据结构）。</p>
<p>生活小栗子：清单 TodoList。每日清单有学习类、生活类、工作类、运动类等项目，清单列表只管罗列，不管类别。</p>
<h3 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h3><ol>
<li>为遍历不同数据结构的 “集合” 提供统一的接口；</li>
<li>能遍历访问 “集合” 数据中的项，不关心项的数据结构</li>
</ol>
<h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 统一遍历接口实现</span></div><div class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">arr, callBack</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="comment">// 将值，索引返回给回调函数callBack处理</span></div><div class="line">    <span class="keyword">if</span> (callBack(i, arr[i]) === <span class="literal">false</span>) &#123;</div><div class="line">      <span class="keyword">break</span>;  <span class="comment">// 中止迭代器，跳出循环</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 外部调用</span></div><div class="line">each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">index, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value &gt; <span class="number">3</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 返回false中止each</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log([index, value]);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 输出：[0, 1]  [1, 2]  [2, 3]</span></div></pre></td></tr></table></figure>
<p><strong>“迭代器模式的核心，就是实现统一遍历接口。”</strong></p>
<h3 id="模式细分"><a href="#模式细分" class="headerlink" title="模式细分"></a>模式细分</h3><ol>
<li>内部迭代器 （jQuery 的 $.each / for…of)</li>
<li>外部迭代器 （ES6 的 yield)</li>
</ol>
<h4 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h4><blockquote>
<p>内部迭代器: 内部定义迭代规则，控制整个迭代过程，外部只需一次初始调用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery 的 $.each（跟上文each函数实现原理类似）</span></div><div class="line">$.each([<span class="string">'Angular'</span>, <span class="string">'React'</span>, <span class="string">'Vue'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">index, value</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log([index, value]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 输出：[0, Angular]  [1, React]  [2, Vue]</span></div></pre></td></tr></table></figure>
<p>优点：调用方式简单，外部仅需一次调用<br>缺点：迭代规则预先设置，欠缺灵活性。无法实现复杂遍历需求（如: 同时迭代比对两个数组）</p>
<h4 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h4><blockquote>
<p>外部迭代器： 外部显示（手动）地控制迭代下一个数据项</p>
</blockquote>
<p>借助 ES6 新增的 <code>Generator</code> 函数中的 <code>yield*</code> 表达式来实现外部迭代器。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6 的 yield 实现外部迭代器</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorEach</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, value] <span class="keyword">of</span> arr.entries()) &#123;</div><div class="line">    <span class="keyword">yield</span> <span class="built_in">console</span>.log([index, value]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> each = generatorEach([<span class="string">'Angular'</span>, <span class="string">'React'</span>, <span class="string">'Vue'</span>]);</div><div class="line">each.next();</div><div class="line">each.next();</div><div class="line">each.next();</div><div class="line"></div><div class="line"><span class="comment">// 输出：[0, 'Angular']  [1, 'React']  [2, 'Vue']</span></div></pre></td></tr></table></figure>
<p>优点：灵活性更佳，适用面广，能应对更加复杂的迭代需求<br>缺点：需显示调用迭代进行（手动控制迭代过程），外部调用方式较复杂</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>不同数据结构类型的 “数据集合”，需要对外提供统一的遍历接口，而又不暴露或修改内部结构时，可应用迭代器模式实现。</p>
<hr>
<p>下半部分开始…</p>
<h3 id="ES6-的-Iterator-迭代器"><a href="#ES6-的-Iterator-迭代器" class="headerlink" title="ES6 的 Iterator 迭代器"></a>ES6 的 Iterator 迭代器</h3><p><strong>“迭代器等同于遍历器。在某些文章中，可能会出现遍历器的字眼，其实两者的意思一致。”</strong></p>
<p>JavaScript 中 原有表示 “集合” 的数据结构主要是 “数组(Array)” 和 “对象(Object)”，ES6又新增了 <code>Map</code> 和 <code>Set</code>，共四种数据集合，浏览器端还有 <code>NodeList</code> 类数组结构。为 “集合” 型数据寻求统一的遍历接口，正是 ES6 的 Iterator 诞生的背景。</p>
<p>ES6 中迭代器 Iterator 作为一个接口，作用就是为各种不同数据结构提供统一的访问机制。任何数据结构只要部署了 Iterator 接口，就可以完成遍历操作。</p>
<p>Iterator 作用：</p>
<ol>
<li>为各种数据结构，提供一个统一的、简便的访问接口；</li>
<li>使得数据结构的成员能够按某种次序排列；</li>
<li>为新的遍历语法 <code>for...of</code> 实现循环遍历</li>
</ol>
<p><strong>Iterator只是一种接口，与遍历的数据结构是分开的。</strong> 重温迭代器模式特点：我只要统一遍历数据项的接口，不关心其数据结构。</p>
<p>ES6 默认的 Iterator 接口部署在数据结构的 <code>Symbol.iterator</code> 属性上，该属性本身是一个函数，代表当前数据结构默认的遍历器生成函数。执行该函数 <code>[Symbol.iterator]()</code>，会返回一个遍历器对象。只要数据结构拥有 <code>Symbol.iterator</code> 属性，那么它就是 “可遍历的” 。</p>
<p>遍历器对象的特征：</p>
<ol>
<li>拥有 <code>next</code> 属性方法；</li>
<li>执行 <code>next()</code>，会返回一个包含 <code>value</code> 和 <code>done</code> 属性的对象<ul>
<li><code>value</code>: 当前数据结构成员的值</li>
<li><code>done</code>: 布尔值，表示遍历是否结束</li>
</ul>
</li>
</ol>
<p>原生具备 Iterator 接口的数据结构：</p>
<ol>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li>TypedArray</li>
<li>函数的 arguments 对象</li>
<li>NodeList 对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</div><div class="line"></div><div class="line">iterator.next();  <span class="comment">// &#123; value: 'a', done: false &#125;</span></div><div class="line">iterator.next();  <span class="comment">// &#123; value: 'b', done: false &#125;</span></div><div class="line">iterator.next();  <span class="comment">// &#123; value: 'c', done: false &#125;</span></div><div class="line">iterator.next();  <span class="comment">// &#123; value: undefined, done: false &#125;</span></div></pre></td></tr></table></figure>
<p>原生部署 Iterator 接口的数据结构，无需手动执行遍历器生成函数，可使用 <code>for...of</code> 自动循环遍历。 </p>
<p><code>for...of</code> 运行原理：</p>
<ol>
<li>首先调用遍历对象 <code>[Symobo.iterator]()</code> 方法，拿到遍历器对象;</li>
<li>每次循环，调用遍历器对象 <code>next()</code> 方法，得到 <code>{value: ..., done: ... }</code> 对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for...of 自动遍历拥有 Iterator 接口的数据结构</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：a  b  c</span></div></pre></td></tr></table></figure>
<blockquote>
<p>类数组对象：存在数值键名和 <code>length</code> 属性的对象</p>
</blockquote>
<p>类数组对象部署 Iterator 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法一：</span></div><div class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="built_in">Array</span>.prototype[Sybmol.iterator];</div><div class="line"></div><div class="line"><span class="comment">// 方法二：</span></div><div class="line">NodeList.prototype[<span class="built_in">Symbol</span>.iterator] = [][<span class="built_in">Symbol</span>.iterator];</div><div class="line"></div><div class="line"><span class="comment">// for...of 遍历类数组对象</span></div><div class="line"><span class="keyword">let</span> arrLike = &#123;</div><div class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</div><div class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</div><div class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</div><div class="line">  length: <span class="number">3</span>,</div><div class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="built_in">Array</span>.prototype[<span class="built_in">Symbol</span>.iterator]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arrLike) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：a  b  c</span></div></pre></td></tr></table></figure></p>
<p><strong>对象(Object)没有默认 Iterator 接口，因为对象属性遍历顺序不确定，需开发者手动指定。</strong></p>
<p>注意：</p>
<ol>
<li>普通对象部署数组的 <code>Symbol.iterator</code> 方法，并无效果；</li>
<li>普通对象若 <code>Symbol.iterator</code> 方法对应的部署遍历器生成函数（即返回一个遍历器对象），解释引擎会报错。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">1</span>;</div><div class="line">[...obj]; <span class="comment">// TypeError: [] is not a function</span></div></pre></td></tr></table></figure>
<p><code>for...of</code> 遍历普通对象的解决方法：</p>
<ol>
<li>使用 <code>Objet.keys</code> 将对象键名生成一个数组，然后遍历该数组；</li>
<li>Generator 函数重新包装对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  name: <span class="string">'Ken'</span>,</div><div class="line">  sex: <span class="string">'Male'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Object.keys</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(person)) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;person[key]&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Generator 包装对象</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">entries</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</div><div class="line">    <span class="keyword">yield</span> [key, obj[key]];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> entries(person)) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// name: Ken </span></div><div class="line"><span class="comment">// sex: Male</span></div></pre></td></tr></table></figure>
<h4 id="ES6-的-Iterator-应用场景"><a href="#ES6-的-Iterator-应用场景" class="headerlink" title="ES6 的 Iterator 应用场景"></a>ES6 的 Iterator 应用场景</h4><ol>
<li>解构赋值</li>
<li>扩展运算符</li>
<li><code>yield*</code></li>
<li>任何以数组为参数的遍历的场景：<ul>
<li><code>for...of</code></li>
<li><code>Array.from()</code></li>
<li><code>Map()/Set()/WeakMap()/WeakSet()</code></li>
<li><code>Promise.all()/Promise.race()</code></li>
</ul>
</li>
</ol>
<h4 id="for…of-对比-for-for…in-forEach"><a href="#for…of-对比-for-for…in-forEach" class="headerlink" title="for…of 对比 for / for…in / forEach"></a>for…of 对比 for / for…in / forEach</h4><p>for 循环 ：需定义索引变量，指定循环终结条件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>forEach: 无法中途跳出循环，<code>break/return</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">forEach(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(item, index);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>for…in: </p>
<ol>
<li>只能获取键名，不能获取键值</li>
<li>以字符串为键名（但数组的键名为数值类型索引）</li>
<li>任意顺序遍历键名（？？？）</li>
<li>会遍历手动添加的其它键（原型链上的键）</li>
<li>为遍历对象设计，不适用数组</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> triangle = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ColoredTriangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.color = <span class="string">'red'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ColoredTriangle.prototype = triangle;</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> ColoredTriangle();</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="comment">// 需手动判断是否属于自身属性，而不是原型链属性</span></div><div class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(prop)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`obj.<span class="subst">$&#123;prop&#125;</span> = <span class="subst">$&#123;obj[prop]&#125;</span>`</span>);</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：obj.color = red</span></div></pre></td></tr></table></figure>
<p>for…of 较其它三者优点：</p>
<ol>
<li>和 <code>for...in</code> 一样简洁，但没有 <code>for...in</code> 的缺点；</li>
<li>不同于 <code>forEach</code>, 可使用 <code>break/return/continue</code> 退出循环；</li>
<li>提供了遍历所有数据的统一接口</li>
</ol>
<p>缺点：遍历普通对象时，不能直接使用。</p>
<hr>
<p>参考文章</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/1632" target="_blank" rel="external">《JavaScript 设计模式与开发实践》</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="external">《阮一峰ES6入门：Iterator 和 for…of 循环》</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式（四）：适配器模式]]></title>
      <url>/2019/06/26/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyijlei2j30m80goweq.jpg" alt="适配器模式"></p>
<blockquote>
<p>适配器模式：将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（方法或属性），使得原本由于接口不兼容而不能一起工作的那些类（对象）可以正常协作。简单理解就是为兼容而生的 “转换器”。</p>
</blockquote>
<p>对于强迫症患者，那么多形状各异的接口，对应着不同数据线。如果可以有一个转接口实现集合兼容，岂不美哉。没错，这样一个适配器，你值得拥有。（各大厂商加把劲。。。）</p>
<p>生活小栗子：</p>
<ol>
<li>港式插头转换器</li>
<li>笔记本电源适配器</li>
<li>Type-C 转接口</li>
</ol>
<h3 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h3><ol>
<li>新包装对象（适配器对象）实现对原对象接口的访问（接口名可不同）</li>
<li>适配器对象不对请求数据做预处理，直接传入原对象接口处理</li>
<li>适配器对象对外接口名统一，外部调用者可统一接口调用多对象方法</li>
</ol>
<h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><blockquote>
<p>实现方式：在不改变原有对象接口的基础上，定义一个包装对象，新对象转接调用原有接口，使外部调用者可以正常使用。</p>
</blockquote>
<h4 id="第三方SDK的应用"><a href="#第三方SDK的应用" class="headerlink" title="第三方SDK的应用"></a>第三方SDK的应用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 适配器实现地图SDK统一渲染</span></div><div class="line"><span class="keyword">var</span> googleMap = &#123;</div><div class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'开始渲染谷歌地图'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> baiduMap = &#123;</div><div class="line">    display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'开始渲染百度地图'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 外部实际调用的适配器对象</span></div><div class="line"><span class="keyword">var</span> baiduMapAdapter = &#123;</div><div class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> baiduMap.display();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 外部调用者</span></div><div class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">    map.show();   <span class="comment">// 统一接口调用</span></div><div class="line">&#125;；</div><div class="line"></div><div class="line">renderMap(googleMap);</div><div class="line">renderMap(baiduMapAdapter);</div></pre></td></tr></table></figure>
<h4 id="ES6实现适配器"><a href="#ES6实现适配器" class="headerlink" title="ES6实现适配器"></a>ES6实现适配器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用ES6改写适配器实现地图SDK统一渲染</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">googleMap</span> </span>&#123;</div><div class="line">  show() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染谷歌地图'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">baiduMap</span> </span>&#123;</div><div class="line">  display() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染百度地图'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">baiduMapAdapter</span> <span class="keyword">extends</span> <span class="title">baiduMap</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  show() &#123;</div><div class="line">    <span class="keyword">this</span>.display();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 外部调用者</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderMap</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">  map.show();   <span class="comment">// 统一接口调用</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">renderMap(<span class="keyword">new</span> googleMap());</div><div class="line">renderMap(<span class="keyword">new</span> baiduMapAdapter());</div></pre></td></tr></table></figure>
<h4 id="jQuery中的应用"><a href="#jQuery中的应用" class="headerlink" title="jQuery中的应用"></a>jQuery中的应用</h4><p>适配器模式非常适用于跨浏览器兼容，例如强大的 jQuery 封装了事件处理的适配器，解决跨浏览器兼容性问题，极大简化我们日常编程操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// $('selector').on 的实现</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">target, event, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (target.addEventListener) &#123;</div><div class="line">        <span class="comment">// 标准事件监听</span></div><div class="line">        target.addEventListener(event, callback);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.attachEvent) &#123;</div><div class="line">        <span class="comment">// IE低版本事件监听</span></div><div class="line">        target.attachEvent(event, callback)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 低版本浏览器事件监听</span></div><div class="line">        target[<span class="string">`on<span class="subst">$&#123;event&#125;</span>`</span>] = callback</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li>跨浏览器兼容</li>
<li>整合第三方SDK</li>
<li>新老接口兼容</li>
</ol>
<p>适配器模式的初衷是为了解决多对象（接口）兼容问题，如果存在多对象协同工作时，不方便直接修改原对象的基础上，可考虑用适配器封装，以便外部调用者统一使用。</p>
<h3 id="与其它模式的异同"><a href="#与其它模式的异同" class="headerlink" title="与其它模式的异同"></a>与其它模式的异同</h3><p>适配器模式不会改变原有接口，这一点与装饰者模式和代理模式类似。</p>
<h4 id="VS-代理模式"><a href="#VS-代理模式" class="headerlink" title="VS 代理模式"></a>VS 代理模式</h4><p>适配器模式与代理模式最相似，同样都是创建一个新对象（包装一次），实现对本体的调用。</p>
<p>两者的区别：代理模式是为了管控原有对象（本体）的访问，代理的初衷并不是为兼容，并主张代理与本体对外接口保持一致。</p>
<p>而适配器则是为兼容而生的 “转换器”，并不预处理请求，直接将请求转接给原接口，新接口与原接口名可能不同。</p>
<blockquote>
<p>“代理模式“（严父）：学校缴费要一千块，这么多？<br>“适配器模式” (慈母）：学校缴费要一千块，给给给。</p>
</blockquote>
<p><em>装饰者模式及外观模式，会在之后的篇章整理，这里稍作了解。</em></p>
<h4 id="VS-装饰者模式"><a href="#VS-装饰者模式" class="headerlink" title="VS 装饰者模式"></a>VS 装饰者模式</h4><p>装饰者模式的作用是为对象添加功能，可添加多次，形成装饰链。而适配器只会对原有对象包装一次。</p>
<h4 id="VS-外观模式"><a href="#VS-外观模式" class="headerlink" title="VS 外观模式"></a>VS 外观模式</h4><p>外观模式与适配器模式最大的区别，是定义了一个新的接口。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>优点：兼容性，保证外部可统一接口调用</li>
<li>缺点：额外对象的创建，非直接调用，存在一定的开销（且不像代理模式在某些功能点上可实现性能优化）。</li>
</ul>
<hr>
<p>参考文章</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/1632" target="_blank" rel="external">《JavaScript 设计模式与开发实践》</a></li>
<li><a href="https://coding.imooc.com/class/255.html" target="_blank" rel="external">《JavaScript 设计模式系统讲解与应用》</a></li>
<li><a href="https://www.cnblogs.com/jiasm/p/9674222.html" target="_blank" rel="external">《适配器在JavaScript中的体现》</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式（三）：代理模式]]></title>
      <url>/2019/06/25/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gyhvllurj30m80gowf8.jpg" alt="代理模式"></p>
<blockquote>
<p>代理模式：为一个对象提供一个代用品或占位符，以便控制它的访问。</p>
</blockquote>
<p>当我们不方便直接访问某个对象时，或不满足需求时，可考虑使用一个替身对象来控制该对象的访问。替身对象可对请求预先进行处理，再决定是否转交给本体对象。</p>
<p>生活小栗子：</p>
<ol>
<li>代购；</li>
<li>明星经纪人；</li>
<li>和谐上网</li>
</ol>
<p>经常 shopping 的同学，对代购应该不陌生。自己不方便直接购买或买不到某件商品时，会选择委托给第三方，让代购或黄牛去做购买动作。程序世界的代理者也是如此，我们不直接操作原有对象，而是委托代理者去进行。代理者的作用，就是对我们的请求预先进行处理或转接给实际对象。</p>
<h3 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h3><ol>
<li>代理对象可预先处理请求，再决定是否转交给本体；</li>
<li>代理和本体对外显示接口保持一致性</li>
<li>代理对象仅对本体做一次包装</li>
</ol>
<h3 id="模式细分"><a href="#模式细分" class="headerlink" title="模式细分"></a>模式细分</h3><ol>
<li>虚拟代理（将开销大的运算延迟到需要时执行）</li>
<li>缓存代理（为开销大的运算结果提供缓存）</li>
<li>保护代理（黑白双簧，代理充当黑脸，拦截非分要求）</li>
<li>防火墙代理（控制网络资源的访问）</li>
<li>远程代理（为一个对象在不同的地址控件提供局部代表）</li>
<li>智能引用代理（访问对象执行一些附加操作）</li>
<li>写时复制代理（延迟对象复制过程，对象需要真正修改时才进行）</li>
</ol>
<p><strong>JavaScript 中常用的代理模式为 “虚拟代理” 和 “缓存代理”。</strong></p>
<h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><blockquote>
<p>实现方式：创建一个代理对象，代理对象可预先对请求进行处理，再决定是否转交给本体，代理和本体对外接口保持一致性（接口名相同）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例子：代理接听电话，实现拦截黑名单</span></div><div class="line"><span class="keyword">var</span> backPhoneList = [<span class="string">'189XXXXX140'</span>];       <span class="comment">// 黑名单列表</span></div><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="keyword">var</span> ProxyAcceptPhone = <span class="function"><span class="keyword">function</span>(<span class="params">phone</span>) </span>&#123;</div><div class="line">    <span class="comment">// 预处理</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'电话正在接入...'</span>);</div><div class="line">    <span class="keyword">if</span> (backPhoneList.includes(phone)) &#123;</div><div class="line">        <span class="comment">// 屏蔽</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'屏蔽黑名单电话'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 转接</span></div><div class="line">        AcceptPhone.call(<span class="keyword">this</span>, phone);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 本体</span></div><div class="line"><span class="keyword">var</span> AcceptPhone = <span class="function"><span class="keyword">function</span>(<span class="params">phone</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'接听电话:'</span>, phone);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 外部调用代理</span></div><div class="line">ProxyAcceptPhone(<span class="string">'189XXXXX140'</span>); </div><div class="line">ProxyAcceptPhone(<span class="string">'189XXXXX141'</span>);</div></pre></td></tr></table></figure>
<p>代理并不会改变本体对象，遵循 <strong>“单一职责原则”</strong>，即 “自扫门前雪，各找各家”。不同对象承担独立职责，不过于紧密耦合，具体执行功能还是本体对象，只是引入代理可以选择性地预先处理请求。例如上述代码中，我们向 “接听电话功能” 本体添加了一个屏蔽黑名单的功能（保护代理），预先处理电话接入请求。</p>
<h4 id="虚拟代理（延迟执行）"><a href="#虚拟代理（延迟执行）" class="headerlink" title="虚拟代理（延迟执行）"></a>虚拟代理（延迟执行）</h4><p>虚拟代理的目的，是将开销大的运算延迟到需要时再执行。</p>
<p>虚拟代理在图片预加载的应用，代码例子来至 <a href="http://www.ituring.com.cn/book/1632" target="_blank" rel="external">《JavaScript 设计模式与开发实践》</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 本体</span></div><div class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">    <span class="built_in">document</span>.body.appendChild(imgNode);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">            imgNode.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image;</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        myImage.setSrc(<span class="keyword">this</span>.src);             <span class="comment">// 图片加载完设置真实图片src</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">            myImage.setSrc(<span class="string">'./loading.gif'</span>);  <span class="comment">// 预先设置图片src为loading图</span></div><div class="line">            img.src = src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 外部调用</span></div><div class="line">proxyImage.setSrc(<span class="string">'./product.png'</span>);           <span class="comment">// 有loading图的图片预加载效果</span></div></pre></td></tr></table></figure>
<h4 id="缓存代理（暂时存储）"><a href="#缓存代理（暂时存储）" class="headerlink" title="缓存代理（暂时存储）"></a>缓存代理（暂时存储）</h4><p>缓存代理的目的，是为一些开销大的运算结果提供暂时存储，以便下次调用时，参数与结果不变情况下，从缓存返回结果，而不是重新进行本体运算，减少本体调用次数。</p>
<p>应用缓存代理的本体，要求运算函数应是一个纯函数，简单理解比如一个求和函数 <code>sum</code>， 输入参数 <code>(1, 1)</code>, 得到的结果应该永远是 <code>2</code>。</p>
<blockquote>
<p>纯函数：固定的输入，有固定的输出，不影响外部数据。</p>
</blockquote>
<p><strong>模拟场景：60道判断题测试，每三道题计分一次，根据计分筛选下一步的三道题目?</strong></p>
<p>三道判断题得分结果：</p>
<ol>
<li>(0, 0 ,0)</li>
<li>(0, 0, 1)</li>
<li>(0, 1, 0)</li>
<li>(0, 1, 1) </li>
<li>(1, 0, 0)</li>
<li>(1, 0, 1)</li>
<li>(1, 1, 0)</li>
<li>(1, 1, 1)</li>
</ol>
<p>总共七种计分结果。<code>60/3 = 20</code>，共进行 20 次计分，每次计分执行 3 个循环累计，共 60 个循环。接下来，借用 “缓存代理” 方式，来实现最少本体运算次数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 本体：对三道题答案进行计分</span></div><div class="line"><span class="keyword">var</span> countScore = <span class="function"><span class="keyword">function</span>(<span class="params">ansList</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> [a, b, c] = ansList;</div><div class="line">    <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 代理：对计分请求预先处理</span></div><div class="line"><span class="keyword">var</span> proxyCountScore = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> existScore = &#123;&#125;;    <span class="comment">// 设定存储对象</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">ansList</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> attr = ansList.join(<span class="string">','</span>);  <span class="comment">// eg. ['0,0,0']</span></div><div class="line">        <span class="keyword">if</span> (existScore[attr] != <span class="literal">null</span>) &#123;</div><div class="line">            <span class="comment">// 从内存返回</span></div><div class="line">            <span class="keyword">return</span> existScore[attr];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 内存不存在，转交本体计算并存入内存</span></div><div class="line">            <span class="keyword">return</span> existScore[attr] = countScore(ansList);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 调用计分</span></div><div class="line">proxyCountScore([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<p>60 道题目，每 3 道题一次计分，共 20 次计分运算，但总的计分结果只有 7 种，那么实际上本体 <code>countScore()</code> 最多只需运算 7 次，即可囊括所有计算结果。</p>
<p>通过缓存代理的方式，对计分结果进行临时存储。用答案字符串组成属性名 <code>[&#39;0,1,0&#39;]</code> 作为 <code>key</code> 值检索内存，若存在直接从内存返回，减少包含复杂运算的本体被调用的次数。之后如果我们的题目增加至 90 道， 120 道，150 道题时，本体 <code>countScore()</code> 运算次数仍旧保持 7 次，中间节省了复杂运算的开销。</p>
<h4 id="ES6-的-Proxy"><a href="#ES6-的-Proxy" class="headerlink" title="ES6 的 Proxy"></a>ES6 的 Proxy</h4><p>ES6新增的 <code>Proxy</code> 代理对象的操作，具体的实现方式是在 <code>handler</code> 上定义对象自定义方法集合，以便预先管控对象的操作。</p>
<blockquote>
<p>ES6 的 Proxy语法：let proxyObj = new Proxy(target, handler);</p>
</blockquote>
<ul>
<li>target: 本体，要代理的对象</li>
<li>handler: 自定义操作方法集合</li>
<li>proxyObj: 返回的代理对象，拥有本体的方法，不过会被 <code>handler</code> 预处理</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6的Proxy</span></div><div class="line"><span class="keyword">let</span> Person = &#123;</div><div class="line">    name: <span class="string">'以乐之名'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> ProxyPerson = <span class="keyword">new</span> <span class="built_in">Proxy</span>(Person, &#123;</div><div class="line">    get(target, key, value) &#123;</div><div class="line">        <span class="keyword">if</span> (key != <span class="string">'age'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> target[key];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'保密'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    set(target, key, value) &#123;</div><div class="line">        <span class="keyword">if</span> (key === <span class="string">'rate'</span>) &#123;</div><div class="line">            target[key] = value === <span class="string">'A'</span> ? <span class="string">'推荐'</span> : <span class="string">'待提高'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ProxyPerson.name);  <span class="comment">// '以乐之名'</span></div><div class="line"><span class="built_in">console</span>.log(ProxyPerson.age);   <span class="comment">// '保密'</span></div><div class="line">ProxyPerson.rate = <span class="string">'A'</span>;         </div><div class="line"><span class="built_in">console</span>.log(ProxyPerson.rate);  <span class="comment">// '推荐'</span></div><div class="line">ProxyPerson.rate = <span class="string">'B'</span>;         </div><div class="line"><span class="built_in">console</span>.log(ProxyPerson.rate);  <span class="comment">// '待提高'</span></div></pre></td></tr></table></figure>
<p><code>handler</code> 除常用的 <code>set/get</code>，总共支持 13 种方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">handler.getPrototypeOf()</div><div class="line"><span class="comment">// 在读取代理对象的原型时触发该操作，比如在执行 Object.getPrototypeOf(proxy) 时</span></div><div class="line"></div><div class="line">handler.setPrototypeOf()</div><div class="line"><span class="comment">// 在设置代理对象的原型时触发该操作，比如在执行 Object.setPrototypeOf(proxy, null) 时</span></div><div class="line"></div><div class="line">handler.isExtensible()</div><div class="line"><span class="comment">// 在判断一个代理对象是否是可扩展时触发该操作，比如在执行 Object.isExtensible(proxy) 时</span></div><div class="line"></div><div class="line">handler.preventExtensions()</div><div class="line"><span class="comment">// 在让一个代理对象不可扩展时触发该操作，比如在执行 Object.preventExtensions(proxy) 时</span></div><div class="line"></div><div class="line">handler.getOwnPropertyDescriptor()</div><div class="line"><span class="comment">// 在获取代理对象某个属性的属性描述时触发该操作，比如在执行 Object.getOwnPropertyDescriptor(proxy, "foo") 时</span></div><div class="line"></div><div class="line">handler.defineProperty()</div><div class="line"><span class="comment">// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, "foo", &#123;&#125;) 时</span></div><div class="line"></div><div class="line">handler.has()</div><div class="line"><span class="comment">// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 "foo" in proxy 时</span></div><div class="line"></div><div class="line">handler.get()</div><div class="line"><span class="comment">// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时</span></div><div class="line"></div><div class="line">handler.set()</div><div class="line"><span class="comment">// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时</span></div><div class="line"></div><div class="line">handler.deleteProperty()</div><div class="line"><span class="comment">// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时</span></div><div class="line"></div><div class="line">handler.ownKeys()</div><div class="line"><span class="comment">// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时</span></div><div class="line"></div><div class="line">handler.apply()</div><div class="line"><span class="comment">// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。</span></div><div class="line"></div><div class="line">handler.construct()</div><div class="line"><span class="comment">// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行 new proxy() 时</span></div></pre></td></tr></table></figure></p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li>虚拟代理：<ol>
<li>图片预加载（loading 图）</li>
<li>合并HTTP请求（数据上报汇总）</li>
</ol>
</li>
<li>缓存代理：（前提本体是纯函数）<ol>
<li>缓存异步请求数据</li>
<li>缓存较复杂的运算结果</li>
</ol>
</li>
<li>ES6 的 Proxy：<ol>
<li>实现对象私有属性</li>
<li>实现表单验证</li>
</ol>
</li>
</ul>
<p>“策略模式” 可应用于表单验证信息，“代理方式” 也可实现。这里引用 Github - <a href="https://github.com/jawil" target="_blank" rel="external">jawil</a> 的一个例子，思路供大家分享。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 利用 proxy 拦截格式不符数据</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target, validator, errorMsg</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</div><div class="line">        _validator: validator,</div><div class="line">        set(target, key, value, proxy) &#123;</div><div class="line">            <span class="keyword">let</span> errMsg = errorMsg;</div><div class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span> || !value.length) &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;errMsg[key]&#125;</span> 不能为空`</span>);</div><div class="line">                <span class="keyword">return</span> target[key] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">let</span> va = <span class="keyword">this</span>._validator[key];  <span class="comment">// 这里有策略模式的应用</span></div><div class="line">            <span class="keyword">if</span> (!!va(value)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;errMsg[key]&#125;</span> 格式不正确`</span>);</div><div class="line">                <span class="keyword">return</span> target[key] = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 负责校验的逻辑代码</span></div><div class="line"><span class="keyword">const</span> validators = &#123;</div><div class="line">    name(value) &#123;</div><div class="line">        <span class="keyword">return</span> value.length &gt;= <span class="number">6</span>;</div><div class="line">    &#125;,</div><div class="line">    passwd(value) &#123;</div><div class="line">        <span class="keyword">return</span> value.length &gt;= <span class="number">6</span>;</div><div class="line">    &#125;,</div><div class="line">    moblie(value) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="regexp">/^1(3|5|7|8|9)[0-9]&#123;9&#125;$/</span>.test(value);</div><div class="line">    &#125;,</div><div class="line">    email(value) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="regexp">/^\w+([+-.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>.test(value)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用代码</span></div><div class="line"><span class="keyword">const</span> errorMsg = &#123;</div><div class="line">    name: <span class="string">'用户名'</span>,</div><div class="line">    passwd: <span class="string">'密码'</span>,</div><div class="line">    moblie: <span class="string">'手机号码'</span>,</div><div class="line">    email: <span class="string">'邮箱地址'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> vali = validator(&#123;&#125;, validators, errorMsg)</div><div class="line"><span class="keyword">let</span> registerForm = <span class="built_in">document</span>.querySelector(<span class="string">'#registerForm'</span>)</div><div class="line">registerForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> validatorNext = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">yield</span> vali.name = registerForm.userName.value</div><div class="line">        <span class="keyword">yield</span> vali.passwd = registerForm.passWord.value</div><div class="line">        <span class="keyword">yield</span> vali.moblie = registerForm.phone.value</div><div class="line">        <span class="keyword">yield</span> vali.email = registerForm.email.value</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> validator = validatorNext();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> field <span class="keyword">of</span> validator) &#123;</div><div class="line">        validator.next();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现思路： 利用 ES6 的 proxy 自定义 <code>handler</code> 的 <code>set()</code> ，进行表单校验并返回结果，并且借用 “策略模式” 独立封装验证逻辑。使得表单对象，验证逻辑，验证器各自独立。代码整洁性，维护性及复用性都得到增强。</p>
<p>关于 “设计模式” 在表单验证的应用，可参考 jawil 原文：<a href="https://github.com/jawil/blog/issues/19" target="_blank" rel="external">《探索两种优雅的表单验证——策略设计模式和ES6的Proxy代理模式》</a>。</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>优点：<ol>
<li>可拦截和监听外部对本体对象的访问；</li>
<li>复杂运算前可以进行校验或资源管理；</li>
<li>对象职能粒度细分，函数功能复杂度降低，符合 “单一职责原则”；</li>
<li>依托代理，可额外添加扩展功能，而不修改本体对象，符合 “开发-封闭原则”</li>
</ol>
</li>
<li>缺点：<ol>
<li>额外代理对象的创建，增加部分内存开销；</li>
<li>处理请求速度可能有差别，非直接访问存在开销，但 “虚拟代理” 及 “缓存代理” 均能提升性能</li>
</ol>
</li>
</ul>
<hr>
<p>参考文章</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/1632" target="_blank" rel="external">《JavaScript 设计模式与开发实践》</a></li>
<li><a href="https://juejin.im/post/5a5227ce6fb9a01c927e85c4" target="_blank" rel="external">《ES6中的代理模式—–Proxy》</a></li>
<li><a href="https://github.com/jawil/blog/issues/19" target="_blank" rel="external">《探索两种优雅的表单验证——策略设计模式和ES6的Proxy代理模式》</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式（二）：策略模式]]></title>
      <url>/2019/06/24/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g4gyi75ek0j30m80godhx.jpg" alt="策略模式"></p>
<blockquote>
<p>策略模式：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换</p>
</blockquote>
<p>生活小栗子：诸葛锦囊</p>
<p>诸葛给刘备的锦囊妙计，遇到任何困难都有应对计策。策略模式实现的也是类似的场景。</p>
<p>再来一栗：给喜欢的女生买冰淇淋，事先不了解其喜好，只能集齐各种味道，总会命种。就是比较 “费钱”，这也是策略模式的缺点，需事先考虑所有应对场景。</p>
<h3 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h3><ol>
<li>策略类：算法封装成独立的函数/对象</li>
<li>环境类：根据不同参数调用对应的策略函数/对象执行</li>
</ol>
<h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><blockquote>
<p>实现方式：一个基于策略模式的程序至少由两部分组成，第一个部分是一组策略类 Strategies（可变），策略类封装类具体的算法，并负责具体的计算过程。第二个部分是环境类 Context（不变）， Context 接收客户的请求，随后把请求委托给某一个策略类。</p>
</blockquote>
<p>假设我们一个开发团队，人员组成包括（开发组长，后端，前端，测试）。开发组长领取开发任务（不变），但具体的任务执行人员可根据类型划分（可变）。</p>
<p>比如开发任务有以下几项：</p>
<ol>
<li>优化服务器缓存（后端任务）</li>
<li>优化首屏加载速度（前端任务）</li>
<li>完成系统并发测试（测试任务）</li>
</ol>
<p>开发组长会根据任务类型，分发到对应的开发人员头上，组长不承担具体开发任务。所以每一个开发人员就承担 Strategy 的作用（独立的任务执行），而组长拥有并可支配所有开发人员的资源，充当 Context 的角色。团队每一个开发人员<strong>“组合”</strong>起来就是一个 Strategies 类（执行开发任务）。 这个 Strategies 是可变的，如果说后续开发任务需要安卓的、IOS的支持，只要添加安卓、IOS开发人员配置即可（可扩展）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 策略类（开发人员）</div><div class="line">var Strategies = &#123;</div><div class="line">    &quot;backend&quot;: function(task) &#123;</div><div class="line">        console.log(&apos;进行后端任务：&apos;, task);</div><div class="line">    &#125;,</div><div class="line">    &quot;frontend&quot;: function(task) &#123;</div><div class="line">        console.log(&apos;进行前端任务：&apos;, task);</div><div class="line">    &#125;,</div><div class="line">    &quot;testend&quot;: function(task) &#123;</div><div class="line">        console.log(&apos;进行测试任务：&apos;, task);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//  环境类（开发组长）</div><div class="line">var Context = function(type, task) &#123;</div><div class="line">    typeof Strategies[type] === &apos;function&apos; &amp;&amp; Strategies[type](task);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Context(&apos;backend&apos;, &apos;优化服务器缓存&apos;);</div><div class="line">Context(&apos;frontend&apos;, &apos;优化首页加载速度&apos;);</div><div class="line">Context(&apos;testend&apos;, &apos;完成系统并发测试&apos;);</div></pre></td></tr></table></figure>
<p>上述代码带来的好处：</p>
<ol>
<li>算法独立封装，任务分发；<br> 开发组长不承担具体开发任务（只做顶层设计，不跟年轻人抢饭碗）</li>
<li>复用性更好，不局限于 Context 调用；<br> 开发人员不愁下家（去哪写代码都是写代码）</li>
</ol>
<p>策略模式的另一个好处就是，消除了大部分的 <code>if...else</code> / <code>switch...case</code> 条件分支语句，代码阅读性提高。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 没有使用策略模式的组长...</div><div class="line">var Context = function(type, task) &#123;</div><div class="line">    if (type === &apos;backend&apos;) &#123;</div><div class="line">        // 把后端给我叫来</div><div class="line">    &#125; else if (type === &apos;frontend&apos;) &#123;</div><div class="line">        // 把前端给我叫来</div><div class="line">    &#125; else if (type === &apos;testend&apos;) &#123;</div><div class="line">        // 把测试给我叫来</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript 中，函数作为“一等公民“，也称“一等对象”。JavaScript 中 ”高阶函数“ 应用中，函数可被作为变量或参数进行传递或调用。因此在 JavaScript 中，我们可将算法封装成独立的函数，并将它作为参数传递给另一个函数调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 封装独立的函数</div><div class="line">var backend = function(task) &#123;</div><div class="line">    console.log(&apos;进行后端任务：&apos;, task);</div><div class="line">&#125;;</div><div class="line">var frontend = function(task) &#123;</div><div class="line">    console.log(&apos;进行前端任务：&apos;, task);</div><div class="line">&#125;;</div><div class="line">var testend = function(task) &#123;</div><div class="line">    console.log(&apos;进行测试任务：&apos;, task);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//  环境类（开发组长）</div><div class="line">var Context = function(func, task) &#123;</div><div class="line">    typeof func === &apos;function&apos; &amp;&amp; func(task);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Context(backend, &apos;优化服务器缓存&apos;);</div><div class="line">Context(frontend, &apos;优化首页加载速度&apos;);</div><div class="line">Context(testend, &apos;完成系统并发测试&apos;);</div></pre></td></tr></table></figure>
<p>少了 Strategies 策略类的外层包裹，函数更加独立，并不妨碍其调用。使用函数替代策略类方式，正是我们日常开发中经常用到的 “隐形” 策略模式。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li>多重条件语句判断，执行对应的算法场景</li>
<li>表单校验（validator)</li>
</ol>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>优点：<ol>
<li>利用组合、委托、多态的技术和思想，避免多重条件选择语句 <code>if...else/switch...case</code>；</li>
<li>复用性更高，算法函数可在系统其它地方使用；</li>
<li>支持设计模式 “开发-封闭原则“ ，算法封装在独立的 Strategy 中，易于维护和扩展；</li>
<li>策略模式使用 “组合和委托” 来让 Context 拥有执行算法的能力，一种替换对象继承的可行方案</li>
</ol>
</li>
<li>缺点：<ol>
<li>增加了许多策略类或对象（开发人员职能划分明确，人员成本有所增加）；</li>
<li>必须了解各个 Strategy 的不同点，违反 “最少知识原则”（组长手底下有对应的开发人员，才不用自己那么苦逼）</li>
</ol>
</li>
</ul>
<hr>
<p>参考文章</p>
<ul>
<li><a href="https://book.douban.com/subject/24744217/" target="_blank" rel="external">《JavaScript 设计模式》</a></li>
<li><a href="http://www.ituring.com.cn/book/1632" target="_blank" rel="external">《JavaScript 设计模式与开发实践》</a></li>
<li><a href="https://coding.imooc.com/class/255.html" target="_blank" rel="external">《JavaScript 设计模式系统讲解与应用》</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式（一）：单例模式]]></title>
      <url>/2019/06/20/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gyf89n8rj30m80go0sp.jpg" alt="单例模式"></p>
<blockquote>
<p>单例模式：限制类实例化次数只能一次，一个类只有一个实例，并提供一个访问它的全局访问点。</p>
</blockquote>
<p>单例模式是创建型设计模式的一种。针对全局仅需一个对象的场景，如线程池、全局缓存、window 对象等。</p>
<h3 id="模式特点"><a href="#模式特点" class="headerlink" title="模式特点"></a>模式特点</h3><ol>
<li>类只有一个实例</li>
<li>全局可访问该实例</li>
<li>自行实例化（主动实例化）</li>
<li>可推迟初始化，即延迟执行（与静态类/对象的区别）</li>
</ol>
<p>JavaScript 是一门非正规面向对象的语言，并没有类的定义。而单例模式要求一个 “唯一” 和 “全局访问” 的对象，在 JavaScript 中类似全局对象，刚好满足单例模式的两个特点：“唯一” 和 “可全局访问”。虽然它不是正规的单例模式，但不可否认确实具备类单例模式的特点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全局对象</span></div><div class="line"><span class="keyword">var</span> globaObj = &#123;&#125;;</div></pre></td></tr></table></figure>
<p><strong>使用全局变量会有以下问题：</strong></p>
<ol>
<li>命名空间污染（变量名冲突）</li>
<li>维护时不方便管控（容易不小心覆盖）</li>
</ol>
<p><strong>全局变量问题折中的应对方案：</strong></p>
<ol>
<li>使用命名空间</li>
<li>闭包封装私有变量（利用函数作用域）</li>
<li>ES6的 const/symbol</li>
</ol>
<p>虽然全局变量可以实现单例，但因其自身的问题，不建议在实际项目中将其作为单例模式的应用，特别是中大型项目的应用中，全局变量的维护该是考虑的成本。</p>
<h3 id="模式实现"><a href="#模式实现" class="headerlink" title="模式实现"></a>模式实现</h3><blockquote>
<p>实现方式：使用一个变量存储类实例对象（值初始为 <code>null/undefined</code> ）。进行类实例化时，判断类实例对象是否存在，存在则返回该实例，不存在则创建类实例后返回。多次调用类生成实例方法，返回同一个实例对象。</p>
</blockquote>
<h4 id="“简单版”-单例模式："><a href="#“简单版”-单例模式：" class="headerlink" title="“简单版” 单例模式："></a>“简单版” 单例模式：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.instance) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> Winner = Singleton.getInstance(<span class="string">'Winner'</span>);</div><div class="line"><span class="keyword">let</span> Looser = Singleton.getInstance(<span class="string">'Looser'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Winner === Looser); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(Winner.getName());  <span class="comment">// 'Winner'</span></div><div class="line"><span class="built_in">console</span>.log(Looser.getName());  <span class="comment">// 'Winner'</span></div></pre></td></tr></table></figure>
<p>代码中定义了一个 <code>Singleton</code> 函数，函数在 JavaScript 中是“一等公民“，可以为其定义属性方法。因此我们可以在函数 <code>Singleton</code> 中定义一个 <code>getInstance()</code> 方法来管控单例，并创建返回类实例对象，而不是通过传统的 <code>new</code> 操作符来创建类实例对象。</p>
<p><code>this.instance</code> 存储创建的实例对象，每次接收到创建实例对象时，判断 <code>this.instance</code> 是否有实例对象，有则返回，没有则创建并更新 <code>this.instance</code> 值，因此无论调用多少次 <code>getInstance()</code>，最终都只会返回同一个 <code>Singleton</code> 类实例对象。 </p>
<p><strong>存在问题：</strong></p>
<ol>
<li>不够“透明”，无法使用 <code>new</code> 来进行类实例化，需约束该类实例化的调用方式： <code>Singleton.getInstance(...)</code>;</li>
<li>管理单例的操作，与对象创建的操作，功能代码耦合在一起，不符合 “单一职责原则”</li>
</ol>
<h4 id="“透明版”-单例模式："><a href="#“透明版”-单例模式：" class="headerlink" title="“透明版” 单例模式："></a>“透明版” 单例模式：</h4><p>实现 “透明版” 单例模式，意图解决：统一使用 <code>new</code> 操作符来获取单例对象， 而不是 <code>Singleton.getInstance(...)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> CreateSingleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> instance;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance) &#123;</div><div class="line">            <span class="keyword">return</span> instance;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">return</span> instance = <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line">CreateSingleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> Winner = <span class="keyword">new</span> CreateSingleton(<span class="string">'Winner'</span>);</div><div class="line"><span class="keyword">let</span> Looser = <span class="keyword">new</span> CreateSingleton(<span class="string">'Looser'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Winner === Looser); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(Winner.getName());  <span class="comment">// 'Winner'</span></div><div class="line"><span class="built_in">console</span>.log(Looser.getName());  <span class="comment">// 'Winner'</span></div></pre></td></tr></table></figure>
<p>“透明版”单例模式解决了不够“透明”的问题，我们又可以使用 <code>new</code> 操作符来创建实例对象。</p>
<h4 id="“代理版“-单例模式："><a href="#“代理版“-单例模式：" class="headerlink" title="“代理版“ 单例模式："></a>“代理版“ 单例模式：</h4><p>通过“代理”的形式，意图解决：将管理单例操作，与对象创建操作进行拆分，实现更小的粒度划分，符合“单一职责原则”</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ProxyCreateSingleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> instance;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="comment">// 代理函数仅作管控单例</span></div><div class="line">        <span class="keyword">if</span> (instance) &#123;</div><div class="line">            <span class="keyword">return</span> instance;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance = <span class="keyword">new</span> Singleton(name);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 独立的Singleton类，处理对象实例</span></div><div class="line"><span class="keyword">let</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> Winner = <span class="keyword">new</span> PeozyCreateSingleton(<span class="string">'Winner'</span>);</div><div class="line"><span class="keyword">let</span> Looser = <span class="keyword">new</span> PeozyCreateSingleton(<span class="string">'Looser'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Winner === Looser); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(Winner.getName());  <span class="comment">// 'Winner'</span></div><div class="line"><span class="built_in">console</span>.log(Looser.getName());  <span class="comment">// 'Winner'</span></div></pre></td></tr></table></figure>
<h4 id="惰性单例模式"><a href="#惰性单例模式" class="headerlink" title="惰性单例模式"></a>惰性单例模式</h4><p>惰性单例，意图解决：需要时才创建类实例对象。对于懒加载的性能优化，想必前端开发者并不陌生。惰性单例也是解决 “按需加载” 的问题。</p>
<blockquote>
<p>需求：页面弹窗提示，多次调用，都只有一个弹窗对象，只是展示信息内容不同。</p>
</blockquote>
<p>开发这样一个全局弹窗对象，我们可以应用单例模式。为了提升它的性能，我们可以让它在我们需要调用时再去生成实例，创建 DOM 节点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> getSingleton = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)); <span class="comment">// 确定this上下文并传递参数</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> createAlertMessage = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    div.innerHTML = html;</div><div class="line">    div.style.display = <span class="string">'none'</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(div);</div><div class="line">    <span class="keyword">return</span> div;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> createSingleAlertMessage = getSingleton(createAlertMessage);</div><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 多次点击只会产生一个弹窗</span></div><div class="line">    <span class="keyword">let</span> alertMessage = createSingleAlertMessage(<span class="string">'您的知识需要付费充值！'</span>);</div><div class="line">    alertMessage.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>代码中演示是一个通用的 “惰性单例” 的创建方式，如果还需要 <code>createLoginLayer</code> 登录框, <code>createFrame</code> Frame框, 都可以调用 <code>getSingleton(...)</code> 生成对应实例对象的方法。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p><strong>“单例模式的特点，意图解决：维护一个全局实例对象。”</strong></p>
<ol>
<li>引用第三方库（多次引用只会使用一个库引用，如 jQuery）</li>
<li>弹窗（登录框，信息提升框）</li>
<li>购物车 (一个用户只有一个购物车)</li>
<li>全局态管理 store (Vuex / Redux)</li>
</ol>
<p>项目中引入第三方库时，重复多次加载库文件时，全局只会实例化一个库对象，如 <code>jQuery</code>，<code>lodash</code>，<code>moment</code> …, 其实它们的实现理念也是单例模式应用的一种：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入代码库 libs(库别名）</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.libs != <span class="literal">null</span>) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.libs;    <span class="comment">// 直接返回</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">window</span>.libs = <span class="string">'...'</span>;   <span class="comment">// 初始化</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul>
<li>优点：适用于单一对象，只生成一个对象实例，避免频繁创建和销毁实例，减少内存占用。</li>
<li>缺点：不适用动态扩展对象，或需创建多个相似对象的场景。</li>
</ul>
<p><em>TIPS: 多线程编程语言中，单例模式会涉及同步锁的问题。而 JavaScript 是单线程的编程语言，暂可忽略该问题。</em></p>
<hr>
<p>参考文章</p>
<ul>
<li><a href="https://book.douban.com/subject/24744217/" target="_blank" rel="external">《JavaScript 设计模式》</a></li>
<li><a href="http://www.ituring.com.cn/book/1632" target="_blank" rel="external">《JavaScript 设计模式与开发实践》</a></li>
<li><a href="https://coding.imooc.com/class/255.html" target="_blank" rel="external">《JavaScript 设计模式系统讲解与应用》</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（八）：浅谈函数防抖与节流]]></title>
      <url>/2019/03/04/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%B5%85%E8%B0%88%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gym2aw79j30m80goaai.jpg" alt="前端进击的巨人（八）：浅谈函数防抖与节流"></p>
<p>本篇课题，或许早已是烂大街的解读文章。不过春招系列面试下来，不少伙伴们还是似懂非懂地栽倒在（～面试官～）深意的笑容之下，权当温故知新。</p>
<p>JavaScript的执行过程，是基于栈来进行的。复杂的程序代码被封装到函数中，程序执行时，函数不断被推入执行栈中。所以 <strong>“执行栈”</strong> 也称 <strong>“函数执行栈”</strong>。</p>
<p>函数中封装的代码块，一般都有相对复杂的逻辑处理（计算/判断），例如函数中可能会涉及到 <code>DOM</code> 的渲染更新，复杂的计算与验证， <code>Ajax</code> 数据请求等等。</p>
<p>前端页面的操作权，大部分都是属于浏览端的客户爸爸们（单身三十年的手速，惹不起惹不起！！！）。如果函数被频繁调用，造成的性能开销绝对不只一点点。</p>
<ul>
<li>前： <code>DOM</code> 频繁重绘的卡顿让客户爸爸们想把你揪出来一顿大招。。。</li>
<li>后： 后端同学正在提刀赶来的路上：“为什么我的接口被你玩挂了”。。。</li>
</ul>
<p>既要提升用户体验，又要减少后端服务开销，可见我们大前端的使命不只一页PPT。说好前因，接着就是后果了。既然有优化的需求，必然就要有相应的解决方案。隆重请出主角： <strong>“防抖”</strong> 与 <strong>“节流”</strong>。</p>
<h3 id="防抖（debounce"><a href="#防抖（debounce" class="headerlink" title="防抖（debounce)"></a>防抖（debounce)</h3><blockquote>
<p>在事件被触发 n 秒后再执行回调函数，如果在这 n 秒内又被触发，则重新计时延迟时间。</p>
</blockquote>
<p>生活化理解：英雄的技能条，技能条读完才能使用技能（R大招60s）</p>
<p>防抖的实现方式分两种 <strong>“立即执行”</strong> 和 <strong>“非立即执行”</strong>，区别在于第一次触发时，是否立即执行回调函数。</p>
<h4 id="非立即执行"><a href="#非立即执行" class="headerlink" title="非立即执行"></a>非立即执行</h4><blockquote>
<p><strong>”非立即执行防抖“</strong> 指事件触发后，回调函数不会立即执行，会在延迟时间 n 秒后执行，如果 n 秒内被调用多次，则重新计时延迟时间</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// e.g. 防抖 - 非立即执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> timeout;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="comment">// &amp;&amp; 短路运算 == if(timeout) else &#123;...&#125; </span></div><div class="line">    timeout &amp;&amp; clearTimeout(timeout); </div><div class="line">    timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      func.apply(context, args);</div><div class="line">    &#125;, delay);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line"><span class="keyword">var</span> printUserName = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</div><div class="line">&#125;, <span class="number">800</span>);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'username'</span>)</div><div class="line">  .addEventListener(<span class="string">'keyup'</span>, printUserName);</div></pre></td></tr></table></figure>
<h4 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h4><blockquote>
<p><strong>“立即执行防抖”</strong> 指事件触发后，回调函数会立即执行，之后要想触发执行回调函数，需等待 n 秒延迟</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// e.g. 防抖 - 立即执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> timeout;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">        callNow = !timeout;</div><div class="line">        timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            timeout = <span class="literal">null</span>;</div><div class="line">        &#125;, delay);</div><div class="line">        callNow &amp;&amp; func.apply(context, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数防抖原理：通过维护一个定时器，其延迟计时以最后一次触发为计时起点，到达延迟时间后才会触发函数执行。</p>
<h3 id="节流（throttle"><a href="#节流（throttle" class="headerlink" title="节流（throttle)"></a>节流（throttle)</h3><blockquote>
<p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效（间隔执行）</p>
</blockquote>
<p>生活化理解：</p>
<ol>
<li>FPS射击游戏子弹射速（即使按住鼠标左键，射出子弹的速度也是限定的）</li>
<li>水龙头的滴水（水滴攒到一定重量才会下落）</li>
</ol>
<p>函数节流实现的方式有 <strong>“时间戳”</strong> 和 <strong>“定时器”</strong> 两种。</p>
<h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// e.g. 节流 - 时间戳</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">if</span> (nowTime &gt; lastTime + delay) &#123;</div><div class="line">      func.apply(context, args)</div><div class="line">      lastTime = nowTime;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>“时间戳”</strong> 的方式，函数在时间段开始时执行。</p>
<p><strong>缺点：假定函数间隔1s执行，如果最后一次停止触发，卡在4.2s，则不会再执行。</strong></p>
<h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// e.g. 节流 - 定时器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> timeout;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">if</span> (!timeout) &#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        func.apply(context, args);</div><div class="line">        timeout = <span class="literal">null</span>;</div><div class="line">      &#125;, delay)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>“定时器”</strong> 的方式，函数在时间段结束时执行。可理解为函数并不会立即执行，而是等待延迟计时完成才执行。<strong>（由于定时器延时，最后一次触发后，可能会再执行一次回调函数）</strong></p>
<h4 id="时间戳-定时器（互补优化）"><a href="#时间戳-定时器（互补优化）" class="headerlink" title="时间戳 + 定时器（互补优化）"></a>时间戳 + 定时器（互补优化）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// e.g. 节流 - 时间戳 + 定时器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> lastTime, timeout;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">let</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">if</span> (lastTime &amp;&amp; nowTime &lt; lastTime + delay) &#123;</div><div class="line">      timeout &amp;&amp; clearTimeout(timeout);</div><div class="line">      timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        lastTime = nowTime;</div><div class="line">        func.apply(context, args);</div><div class="line">      &#125;, delay);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      lastTime = nowTime;</div><div class="line">      func.apply(context, args);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>合并优化的原理：“时间戳”方式让函数在时间段开始时执行（第一次触发立即执行），“定时器”方式让函数在最后一次事件触发后（如4.2s）也能触发。</strong></p>
<p>函数节流原理：一定时间内只触发一次，间隔执行。通过判断是否到达指定触发时间，间隔时间固定。</p>
<h3 id="“防抖”-与-“节流”-的异同"><a href="#“防抖”-与-“节流”-的异同" class="headerlink" title="“防抖” 与 “节流” 的异同"></a>“防抖” 与 “节流” 的异同</h3><p>相同：都是防止某一时间段内，函数被频繁调用执行，通过时间频率控制，减少回调函数执行次数，来实现相关性能优化。</p>
<p>区别：“防抖”是某一时间内只执行一次，最后一次触发后过段时间执行，而“节流”则是间隔时间执行，间隔时间固定。</p>
<h3 id="“防抖”-与-“节流”-的应用场景"><a href="#“防抖”-与-“节流”-的应用场景" class="headerlink" title="“防抖” 与 “节流” 的应用场景"></a>“防抖” 与 “节流” 的应用场景</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><ol>
<li>文本输入搜索联想</li>
<li>文本输入验证（包括 Ajax 后端验证）</li>
</ol>
<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><ol>
<li>鼠标点击</li>
<li>监听滚动 <code>scroll</code></li>
<li>窗口 <code>resize</code></li>
<li><code>mousemove</code> 拖拽</li>
</ol>
<p>应用场景还有很多，具体场景需具体分析。只要涉及高频的函数调用，都可参考函数防抖节流的优化方案。</p>
<p>鼓起勇气写在结尾：以上代码都不是 “完美” 的 “防抖 / 节流” 实现代码！！！仅就实现方式和基本原理，浅谈分解一二。</p>
<p>实际代码开发中，一般会引入<code>lodash</code> 相对 “靠谱” 的第三方库，帮我们去实现防抖节流的工具函数。有兴趣的伙伴们可阅读 <code>lodash</code> 相关源码，加深印象理解可再读以下参考文章。</p>
<hr>
<p>参考文章</p>
<ul>
<li><a href="https://juejin.im/post/5b8de829f265da43623c4261" target="_blank" rel="external">7分钟理解JS的节流、防抖及使用场景</a></li>
<li><a href="https://juejin.im/post/5b651dc15188251aa30c8669" target="_blank" rel="external">函数防抖和节流</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（七）：走进面向对象，原型与原型链，继承方式]]></title>
      <url>/2019/02/18/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%B5%B0%E8%BF%9B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8C%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gynech16j30yg0puq3x.jpg" alt="前端进击的巨人（七）：带你走进面向对象，原型，继承"></p>
<p>“面向对象” 是以 “对象” 为中心的编程思想，它的思维方式是构造。</p>
<p>“面向对象” 编程的三大特点：<strong>“封装、继承、多态”</strong>：</p>
<ol>
<li>封装：属性方法的抽象</li>
<li>继承：一个类继承（复制）另一个类的属性/方法</li>
<li>多态：方法（接口）重写</li>
</ol>
<p>“面向对象” 编程的核心，离不开 “类” 的概念。简单地理解下 “类”，它是一种抽象方法。通过 “类” 的方式，可以创建出多个具有相同属性和方法的对象。</p>
<p>但是！但是！但是JavaScript中并没有 “类” 的概念，对的，没有。</p>
<p>ES6 新增的 <code>class</code> 语法，只是一种模拟 “类” 的语法糖，底层机制依旧不能算是标准 “类” 的实现方式。</p>
<p>在理解JavaScript中如何实现 “面向对象” 编程之前，有必要对JavaScript中的对象先作进一步地了解。</p>
<h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><p>对象是<strong>“无序属性”</strong>的集合，表现为<strong>“键/值对”</strong>的形式。属性值可包含任何类型值（基本类型、引用类型：对象/函数/数组）。</p>
<p>有些文章指出<strong>“JS中一切都是对象”</strong>，略有偏颇，修正为：<strong>“JS中一切引用类型都是对象”</strong>更为稳妥些。</p>
<p>函数 / 数组都属于对象，数组就是对象的一种子类型，不过函数稍微复杂点，它跟对象的关系，有点”鸡生蛋，蛋生鸡”的关系，可先记住：<strong>“对象由函数创建”</strong>。</p>
<h3 id="简单对象的创建"><a href="#简单对象的创建" class="headerlink" title="简单对象的创建"></a>简单对象的创建</h3><ol>
<li>字面量声明（常用）</li>
<li><code>new</code> 操作符调用 <code>Object</code> 函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字面量</span></div><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  name: <span class="string">'以乐之名'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// new Object()</span></div><div class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">'以乐之名'</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上两种创建对象的方式，并不具备创建多个具有相同属性的对象。</p>
<p><strong>TIPS：<code>new</code> 操作符会对所有函数进行劫持，将函数变成构造函数（对函数的构造调用）。</strong></p>
<h3 id="对象属性的访问方式"><a href="#对象属性的访问方式" class="headerlink" title="对象属性的访问方式"></a>对象属性的访问方式</h3><ol>
<li><code>.</code> 操作符访问 (也称 <strong>“键访问”</strong>）</li>
<li><code>[]</code> 操作符访问（也称 <strong>“属性访问”</strong>）</li>
</ol>
<h4 id="操作符-VS-操作符："><a href="#操作符-VS-操作符：" class="headerlink" title=". 操作符 VS [] 操作符："></a><code>.</code> 操作符 VS <code>[]</code> 操作符：</h4><ol>
<li><code>.</code> 访问属性时，属性名需遵循标识符规范，兼容性比 <code>[]</code> 略差；</li>
<li><code>[]</code> 接受任意UTF-8/Unicode字符串作为属性名；</li>
<li><code>[]</code> 支持动态属性名（变量）；</li>
<li><code>[]</code> 支持表达式计算（字符串连接 / ES6的<code>Symbol</code>）</li>
</ol>
<p><strong>TIPS: 标识符命名规范 —— 数字/英文字母/下划线组成，开头不能是数字。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 任意UTF-8/Unicode字符串作为属性名</div><div class="line">person[&apos;$my-name&apos;];</div><div class="line"></div><div class="line">// 动态属性名（变量）</div><div class="line">let attrName = &apos;name&apos;;</div><div class="line">person[attrName];  </div><div class="line"></div><div class="line">// 表达式计算</div><div class="line">let attrPrefix = &apos;my_&apos;;</div><div class="line">person[attrPrefix + &apos;name&apos;];  // person[&apos;my_name&apos;]</div><div class="line">person[Symbol.name];          // Symbol在属性名的应用</div></pre></td></tr></table></figure></p>
<h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>ES5新增 “属性描述符”，可针对对象属性的特性进行配置。</p>
<h4 id="属性特性的类型"><a href="#属性特性的类型" class="headerlink" title="属性特性的类型"></a>属性特性的类型</h4><h5 id="1-数据属性"><a href="#1-数据属性" class="headerlink" title="1. 数据属性"></a>1. 数据属性</h5><ol>
<li><code>Configurable</code> 可配置（可删除）？<code>[true|false]</code></li>
<li><code>Enumerable</code> 可枚举 <code>[true|false]</code></li>
<li><code>Writable</code> 可写？ <code>[true|false]</code></li>
<li><code>Value</code> 值？默认<code>undefined</code><h5 id="2-访问器属性"><a href="#2-访问器属性" class="headerlink" title="2. 访问器属性"></a>2. 访问器属性</h5></li>
<li><code>Get [[Getter]]</code> 读取方法</li>
<li><code>Set [[Setter]]</code> 设置方法</li>
</ol>
<h4 id="访问器属性优先级高于数据属性"><a href="#访问器属性优先级高于数据属性" class="headerlink" title="访问器属性优先级高于数据属性"></a>访问器属性优先级高于数据属性</h4><ol>
<li>访问器属性会优于 <code>writeable/value</code><ul>
<li>获取属性值时，如果对象属性存在 <code>get()</code>，会忽略其 <code>value</code> 值，直接调用 <code>get()</code>；</li>
<li>设置属性值时，如果对象属性存在 <code>set()</code>，会忽略 <code>writable</code> 的设置，直接调用 <code>set()</code>;</li>
</ul>
</li>
<li>访问器属性日常应用：<ul>
<li>属性值联动修改（一个属性值修改，会触发另外属性值修改）；</li>
<li>属性值保护（只能通过 <code>set()</code> 制定逻辑修改属性值）</li>
</ul>
</li>
</ol>
<h4 id="定义属性特性"><a href="#定义属性特性" class="headerlink" title="定义属性特性"></a>定义属性特性</h4><ol>
<li><code>Object.defineProperty()</code> 定义单个属性</li>
<li><code>Object.defineProperties()</code> 定义多个属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'name'</span>, &#123;</div><div class="line">  writable: <span class="literal">true</span>,</div><div class="line">  enumerable: <span class="literal">true</span>,</div><div class="line">  configurable: <span class="literal">true</span>,</div><div class="line">  value: <span class="string">'以乐之名'</span></div><div class="line">&#125;);</div><div class="line">Person.name;   <span class="comment">// 以乐之名</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>TIPS：使用 <code>Object.defineProperty/defineProperties</code> 定义属性时，属性特性 <code>configurable/enumerable/writable</code> 值默认为 <code>false</code>，<code>value</code> 默认为 <code>undefined</code>。其它方式创建对象属性时，前三者值都为 <code>true</code>。</strong></p>
<p>可使用<code>Object.getOwnPropertyDescriptor()</code> 来获取对象属性的特性描述。</p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>JavaScript中模拟 “面向对象” 中 “类” 的实现方式，是利用了JavaScript中函数的一个特性（属性）——<code>prototype</code>（本身是一个对象）。</p>
<p>每个函数默认都有一个 <code>prototype</code> 属性，它就是我们所说的 <strong>“原型”</strong>，或称 <strong>“原型对象”</strong>。每个实例化创建的对象都有一个 <code>__proto__</code> 属性（<strong>隐式原型</strong>），它指向创建它的构造函数的 <code>prototype</code> 属性。</p>
<h4 id="new-函数（实现”原型关联”）"><a href="#new-函数（实现”原型关联”）" class="headerlink" title="new + 函数（实现”原型关联”）"></a>new + 函数（实现”原型关联”）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let Person = function(name, age) &#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">&#125;;</div><div class="line">Person.prototype.say = function() &#123;&#125;;</div><div class="line"></div><div class="line">let father = new Person(&apos;David&apos;, 48);</div><div class="line">let mother = new Person(&apos;Kelly&apos;, 46);</div></pre></td></tr></table></figure>
<p> <img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gz44tlocj30m60gcgmk.jpg" alt="原型例子"></p>
<p><code>new</code>操作符的执行过程，会对实例对象进行 <strong>“原型关联”</strong>，或称 “原型链接”。</p>
<h4 id="new的执行过程"><a href="#new的执行过程" class="headerlink" title="new的执行过程"></a>new的执行过程</h4><ol>
<li>创建（构造）一个全新的空对象</li>
<li><strong>“这个新对象会被执行”原型”链接（新对象的<code>__proto__</code>会指向函数的<code>prototype</code>)”</strong></li>
<li>构造函数的<code>this</code>会指向这个新对象，并对<code>this</code>属性进行赋值</li>
<li>如果函数没有返回其他对象，则返回这个新对象（注意构造函数的<code>return</code>，一般不会有<code>return</code>)</li>
</ol>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><strong>“对象由函数创建”</strong>，既然 <code>prototype</code> 也是对象，那么它的 <code>__proto__</code> 原型链上应该还有属性。<code>Person.prototype.__proto__</code> 指向 <code>Function.prototype</code>，而<code>Function.prototype.__proto__</code> 最终指向 <code>Object.prototype</code>。</p>
<p><strong>TIPS：<code>Object.prototype.__proto__</code> 指向 <code>null</code>（特例）。</strong></p>
<p>日常调用对象的 <code>toString()/valueOf()</code> 方法，虽然没有去定义它们，但却能正常使用。实际上这些方法来自 <code>Object.prototype</code>，所有普通对象的原型链最终都会指向 <code>Object.prototype</code>，而对象通过原型链关联（继承）的方式，使得实例对象可以调用 <code>Object.prototype</code> 上的属性 / 方法。</p>
<p>访问一个对象的属性时，会先在其基础属性上查找，找到则返回值；如果没有，会沿着其原型链上进行查找，整条原型链查找不到则返回 <code>undefined</code>。这就是原型链查找。</p>
<h3 id="基础属性与原型属性"><a href="#基础属性与原型属性" class="headerlink" title="基础属性与原型属性"></a>基础属性与原型属性</h3><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a>hasOwnProperty()</h4><p>判断对象基础属性中是否有该属性，基础属性返回 <code>true</code>。</p>
<h4 id="涉及-in-操作都是所有属性（基础-原型）"><a href="#涉及-in-操作都是所有属性（基础-原型）" class="headerlink" title="涉及 in 操作都是所有属性（基础 + 原型）"></a>涉及 in 操作都是所有属性（基础 + 原型）</h4><ol>
<li><code>for...in...</code> 遍历对象所有可枚举属性</li>
<li><code>in</code> 判断对象是否拥有该属性</li>
</ol>
<h4 id="Object-keys-…-与Object-getOwnPropertyNames-…"><a href="#Object-keys-…-与Object-getOwnPropertyNames-…" class="headerlink" title="Object.keys(…)与Object.getOwnPropertyNames(…)"></a>Object.keys(…)与Object.getOwnPropertyNames(…)</h4><ol>
<li><code>Object.keys(...)</code> 返回所有可枚举属性</li>
<li><code>Object.getOwnPropertyNames(...)</code> 返回所有属性</li>
</ol>
<h3 id="屏蔽属性"><a href="#屏蔽属性" class="headerlink" title="屏蔽属性"></a>屏蔽属性</h3><p>修改对象属性时，如果属性名与原型链上属性重名，则在实例对象上创建新的属性，屏蔽对象对原型属性的使用（发生屏蔽属性）。<strong>屏蔽属性的前提是，对象基础属性名与原型链上属性名存在重名</strong>。</p>
<h4 id="创建对象属性时，属性特性对屏蔽属性的影响"><a href="#创建对象属性时，属性特性对屏蔽属性的影响" class="headerlink" title="创建对象属性时，属性特性对屏蔽属性的影响"></a>创建对象属性时，属性特性对屏蔽属性的影响</h4><ol>
<li>对象原型链上有同名属性，且可写，在对象上创建新属性（屏蔽原型属性）；</li>
<li>对象原型链上有同名属性，且只读，忽略；</li>
<li>对象原型链上有同名属性，存在访问器属性 <code>set()</code>，调用 <code>set()</code></li>
</ol>
<h3 id="批量创建对象的方式"><a href="#批量创建对象的方式" class="headerlink" title="批量创建对象的方式"></a>批量创建对象的方式</h3><p>创建多个具有相同属性的对象</p>
<h4 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1. 工厂模式"></a>1. 工厂模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPersonFactory</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  obj.name = name;</div><div class="line">  obj.age = age;</div><div class="line">  obj.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, i am <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> father = createPersonFactory(<span class="string">'David'</span>, <span class="number">48</span>);</div><div class="line"><span class="keyword">var</span> mother = createPersonFactory(<span class="string">'Kelly'</span>, <span class="number">46</span>);</div><div class="line">father.say();  <span class="comment">// 'My name is David, i am 48'</span></div><div class="line">mother.say();  <span class="comment">// 'My name is Kelly, i am 46'</span></div></pre></td></tr></table></figure>
<p>缺点：</p>
<ol>
<li>无法解决对象识别问题</li>
<li>属性值为函数时无法共用，不同实例对象的 <code>say</code> 方法没有共用内存空间</li>
</ol>
<p><code>obj.say = function(){...}</code> 实例化一个对象时都会开辟新的内存空间，去存储<code>function(){...}</code>，造成不必要的内存开销。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">father.say == mother.say;  // false</div></pre></td></tr></table></figure>
<h4 id="2-构造函数（new"><a href="#2-构造函数（new" class="headerlink" title="2. 构造函数（new)"></a>2. 构造函数（<code>new</code>)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, i am <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> father = <span class="keyword">new</span> Person(<span class="string">'David'</span>, <span class="number">48</span>);</div></pre></td></tr></table></figure>
<p>缺点：属性值为引用类型（<code>say</code>方法）时无法共用，不同实例对象的 <code>say</code> 方法没有共用内存空间（与工厂模式一样）。</p>
<h4 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3. 原型模式"></a>3. 原型模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Person.prototype.name = <span class="string">'David'</span>;</div><div class="line">Person.prototype.age = <span class="number">48</span>;</div><div class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, i am <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> father = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<p>优点：解决公共方法内存占用问题（所有实例属性的 <code>say</code> 方法共用内存）<br>缺点：属性值为引用类型时，因内存共用，一个对象修改属性会造成其它对象使用属性发生改变。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Person.prototype.like = [<span class="string">'sing'</span>, <span class="string">'dance'</span>];</div><div class="line"><span class="keyword">let</span> father = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">let</span> mother = <span class="keyword">new</span> Person();</div><div class="line">father.like.push(<span class="string">'travel'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 引用类型共用内存，一个对象修改属性，会影响其它对象</span></div><div class="line">father.like;  <span class="comment">// ['sing', 'dance', 'travel']</span></div><div class="line">mother.like;  <span class="comment">// ['sing', 'dance', 'travel']</span></div></pre></td></tr></table></figure>
<h4 id="4-构造函数-原型（经典组合）"><a href="#4-构造函数-原型（经典组合）" class="headerlink" title="4. 构造函数 + 原型（经典组合）"></a>4. 构造函数 + 原型（经典组合）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Person(name, age) &#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">&#125;</div><div class="line">Person.prototype.say = function() &#123;</div><div class="line">  console.log(`My name is $&#123;this.name&#125;, i am $&#123;this.age&#125;`);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原理：结合构造函数和原型的优点，<strong>“构造函数初始化属性，原型定义公共方法”</strong>。</p>
<h4 id="5-动态原型"><a href="#5-动态原型" class="headerlink" title="5. 动态原型"></a>5. 动态原型</h4><p>构造函数 + 原型的组合方式，区别于其它 “面向对象” 语言的声明方式。属性方法的定义并没有统一在构造函数中。因此动态原型创建对象的方式，则是在 “构造函数 + 原型组合” 基础上，优化了定义方式（区域）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Person(name, age) &#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line"> </div><div class="line">  // 判断原型是否有方法，没有则添加；</div><div class="line">  // 原型上的属性在构造函数内定义，仅执行一次 </div><div class="line">  if (!Person.prototype.say) &#123;</div><div class="line">    Person.prototype.say = function() &#123;</div><div class="line">      console.log(`My name is $&#123;this.name&#125;, i am $&#123;this.age&#125;`);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：属性方法统一在构造函数中定义。</p>
<p>除了以上介绍的几种对象创建方式，此外还有”寄生构造函数模式”、”稳妥构造函数模式”。日常开发较少使用，感兴趣的伙伴们可自行了解。</p>
<h3 id="“类”-的继承"><a href="#“类”-的继承" class="headerlink" title="“类” 的继承"></a>“类” 的继承</h3><p>传统的面向对象语言中，”类” 继承的原理是 “类” 的复制。但JavaScript模拟 “类” 继承则是通过 <strong>“原型关联”</strong> 来实现，并不是 “类” 的复制。正如《你不知道的JavaScript》中提出的观点，这种模拟 “类” 继承的方式，更像是 <strong>“委托”</strong>，而不是 <strong>“继承”</strong>。</p>
<p>以下列举JavaScript中常用的继承方式，预先定义两个类：</p>
<ol>
<li><strong>“Person” 父类（超类）</strong></li>
<li><strong>“Student” 子类（用来继承父类）</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父类统一定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">// 构造函数定义初始化属性</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 原型定义公共方法</span></div><div class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">Person.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原型继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, grade</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.grade = grade;</div><div class="line">&#125;;</div><div class="line">Student.prototype = <span class="keyword">new</span> Person();  <span class="comment">// Student原型指向Person实例对象</span></div><div class="line">Student.prototype.constructor = Student;  <span class="comment">// 原型对象修改，需要修复constructor属性</span></div><div class="line"><span class="keyword">let</span> pupil = <span class="keyword">new</span> Student(name, age, grade);</div></pre></td></tr></table></figure>
<h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>子类的原型对象为父类的实例对象，因此子类原型对象中拥有父类的所有属性</p>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol>
<li>无法向父类构造函数传参，初始化属性值</li>
<li>属性值是引用类型时，存在内存共用的情况</li>
<li>无法实现多继承（只能为子类指定一个原型对象）</li>
</ol>
<h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 构造函数继承</div><div class="line">function Student(name, age, grade) &#123;</div><div class="line">  Person.call(this, name, age);</div><div class="line">  this.grade = grade;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h5><p>调用父类构造函数，传入子类的上下文对象，实现子类参数初始化赋值。仅实现部分继承，无法继承父类原型上的属性。可 <code>call</code> 多个父类构造函数，实现多继承。</p>
<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><p>属性值为引用类型时，需开辟多个内存空间，多个实例对象无法共享公共方法的存储，造成不必要的内存占用。</p>
<h4 id="原型-构造函数继承（经典）"><a href="#原型-构造函数继承（经典）" class="headerlink" title="原型 + 构造函数继承（经典）"></a>原型 + 构造函数继承（经典）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原型 + 构造函数继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, grade</span>) </span>&#123;</div><div class="line">  Person.call(<span class="keyword">this</span>, name, age);  <span class="comment">// 第一次调用父类构造函数</span></div><div class="line">  <span class="keyword">this</span>.grade = grade;</div><div class="line">&#125;</div><div class="line">Student.prototype = <span class="keyword">new</span> Person();  <span class="comment">// 第二次调用父类构造函数</span></div><div class="line">Student.prototype.constructor = Student;  <span class="comment">// 修复constructor属性</span></div></pre></td></tr></table></figure>
<h5 id="原理：-2"><a href="#原理：-2" class="headerlink" title="原理："></a>原理：</h5><p>结合原型继承 + 构造函数继承两者的优点，<strong>“构造函数继承并初始化属性，原型继承公共方法”</strong>。</p>
<h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><p>父类构造函数被调用了两次。</p>
<p>待优化：父类构造函数第一次调用时，已经完成父类构造函数中<strong> “属性的继承和初始化”</strong>，第二次调用时只需要 <strong>“继承父类原型属性”</strong> 即可，无须再执行父类构造函数。</p>
<h4 id="寄生组合式继承（理想）"><a href="#寄生组合式继承（理想）" class="headerlink" title="寄生组合式继承（理想）"></a>寄生组合式继承（理想）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 寄生组合式继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, grade</span>) </span>&#123;</div><div class="line">  Person.call(<span class="keyword">this</span>, name, age);</div><div class="line">  <span class="keyword">this</span>.grade = grade;</div><div class="line">&#125;</div><div class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);  </div><div class="line"><span class="comment">// Object.create() 会创建一个新对象，该对象的__proto__指向Person.prototype</span></div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line"><span class="keyword">let</span> pupil = <span class="keyword">new</span>  Student(<span class="string">'小明'</span>, <span class="number">10</span>, <span class="string">'二年级'</span>);</div></pre></td></tr></table></figure>
<h5 id="原理：-3"><a href="#原理：-3" class="headerlink" title="原理："></a>原理：</h5><p>创建一个新对象，将该对象原型关联至父类的原型对象，子类 <code>Student</code> 已使用 <code>call</code> 来调用父类构造函数完成初始化，所以只需再继承父类原型属性即可，避免了经典组合继承调用两次父类构造函数。（较完美的继承方案）</p>
<h4 id="ES6的class语法"><a href="#ES6的class语法" class="headerlink" title="ES6的class语法"></a>ES6的class语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Person &#123;</div><div class="line">  constructor(name, age) &#123;</div><div class="line">    this.name = name;</div><div class="line">    this.grade = grade;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  eat () &#123;  //...  &#125;</div><div class="line">  sleep () &#123;  //...  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Student extends Person &#123;</div><div class="line">  constructor (name, age, grade) &#123;</div><div class="line">    super(name, age);</div><div class="line">    this.grade = grade;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  play () &#123;  //...  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点：ES6提供的 <code>class</code> 语法使得类继承代码语法更加简洁。</p>
<h3 id="Object-create-…"><a href="#Object-create-…" class="headerlink" title="Object.create(…)"></a>Object.create(…)</h3><blockquote>
<p><code>Object.create()</code>方法会创建一个新对象，使用现有对象来提供新创建的对象的<code>__proto__</code></p>
</blockquote>
<p><code>Object.create</code> 实现的其实是”对象关联”，直接上代码更有助于理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">  eat: function() &#123;&#125;;</div><div class="line">  sleep: function() &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let father = Object.create(person); </div><div class="line">// father.__proto__ -&gt; person, 因此father上有eat/sleep/talk等属性</div><div class="line"></div><div class="line">father.eat();</div><div class="line">father.sleep();</div></pre></td></tr></table></figure></p>
<p>上述代码中，我们并没有使用构造函数 / 类继承的方式，但 <code>father</code> 却可以使用来自 <code>person</code> 对象的属性方法，底层原理依赖于原型和原型链的魔力。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Object.create实现原理/模拟</div><div class="line">Object.create = function(o) &#123;</div><div class="line">  function F() &#123;&#125;</div><div class="line">  F.prototype = o;</div><div class="line">  return new F();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Object.create(...)</code> 实现的 “对象关联” 的设计模式与 “面向对象” 模式不同，它并没有父类，子类的概念，甚至没有 “类” 的概念，只有对象。它倡导的是 <strong>“委托”</strong> 的设计模式，是基于 <strong>“面向委托”</strong> 的一种编程模式。</p>
<p>文章篇幅有限，仅作浅显了解，后续可另开一章讲讲 “面向对象” VS “面向委托”，孰优孰劣，说一道二。</p>
<h3 id="对象识别（检查-“类”-关系）"><a href="#对象识别（检查-“类”-关系）" class="headerlink" title="对象识别（检查 “类” 关系）"></a>对象识别（检查 “类” 关系）</h3><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p><code>instanceof</code> 只能处理对象与函数的关系判断。<code>instanceof</code> 左边是对象，右边是函数。判断规则：沿着对象的 <code>__proto__</code> 进行查找，沿着函数的 <code>prototype</code> 进行查找，如果有关联引用则返回 <code>true</code>，否则返回 <code>false</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let pupil = new Student();</div><div class="line">pupil instanceof Student;  // true</div><div class="line">pupil instanceof Person;   // true Student继承了Person</div></pre></td></tr></table></figure>
<h4 id="Object-prototype-isPrototypeOf-…"><a href="#Object-prototype-isPrototypeOf-…" class="headerlink" title="Object.prototype.isPrototypeOf(…)"></a>Object.prototype.isPrototypeOf(…)</h4><p><code>Object.prototype.isPrototyepOf(...)</code> 可以识别对象与对象，也可以是对象与函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pupil = <span class="keyword">new</span> Student();</div><div class="line">Student.prototype.isPrototypeOf(pupil); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>判断规则：在对象 <code>pupil</code> 原型链上是否出现过 <code>Student.prototype</code> , 如果有则返回 <code>true</code>， 否则返回 <code>false</code></p>
<p>ES6新增修改对象原型的方法：<code>Object.setPrototypeOf(obj, prototype)</code>，存在有性能问题，仅作了解，更推荐使用 <code>Object.create(...)</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Student.prototype = Object.create(Person.prototype);</div><div class="line">// setPrototypeOf改写上行代码</div><div class="line">Object.setPrototypeOf(Student.prototype, Person.prototype);</div></pre></td></tr></table></figure></p>
<h3 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h3><p>“面向对象” 是程序编程的一种设计模式，具备 <strong>“封装，继承，多态”</strong> 的特点，在ES6的 <code>class</code> 语法未出来之前，原型继承确实是JavaScript入门的一个难点，特别是对新入门的朋友，理解起来并不友好，模拟继承的代码写的冗余又难懂。好在ES6有了 <code>class</code> 语法糖，不必写冗余的类继承代码，代码写少了，眼镜片都亮堂了。</p>
<p>老话说的好，“会者不难”。深入理解面向对象，原型，继承，对日后代码能力的提升及编码方式优化都有益处。好的方案不只有一种，明白个中缘由，带你走进新世界大门。</p>
<hr>
<p>参考文档：</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/1488" target="_blank" rel="external">《你不知道的JavaScript（上卷）》</a></li>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
<li><a href="https://segmentfault.com/a/1190000016708006" target="_blank" rel="external">JavaScript常见的六种继承方式</a></li>
<li><a href="https://www.cnblogs.com/wangfupeng1988/p/3977924.html" target="_blank" rel="external">深入理解javascript原型和闭包</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（六）：知否知否，须知this]]></title>
      <url>/2019/01/29/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E7%9F%A5%E5%90%A6%E7%9F%A5%E5%90%A6%EF%BC%8C%E9%A1%BB%E7%9F%A5this/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gylkd143j30lo0git96.jpg" alt="前端进击的巨人（六）：知否知否，须知this"></p>
<h3 id="常见this的误解"><a href="#常见this的误解" class="headerlink" title="常见this的误解"></a>常见this的误解</h3><ol>
<li>指向函数自身（源于this英文意思的误解）</li>
<li>指向函数的词法作用域（部分情况）</li>
</ol>
<h3 id="this的应用环境"><a href="#this的应用环境" class="headerlink" title="this的应用环境"></a>this的应用环境</h3><h4 id="1-全局环境"><a href="#1-全局环境" class="headerlink" title="1. 全局环境"></a>1. 全局环境</h4><p>无论是否在严格模式下，全局执行环境中（任何函数体外部）<code>this</code>都指向全局对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var name = &apos;以乐之名&apos;;</div><div class="line">this.name;  // 以乐之名</div></pre></td></tr></table></figure></p>
<h5 id="2-函数（运行内）环境"><a href="#2-函数（运行内）环境" class="headerlink" title="2. 函数（运行内）环境"></a>2. 函数（运行内）环境</h5><p>函数内部，<code>this</code>的值取决于函数被调用的方式（被谁调用）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var name = &apos;无名氏&apos;;</div><div class="line">function getName() &#123;</div><div class="line"> console.log(this.name);</div><div class="line">&#125;</div><div class="line">getName();         // 无名氏 调用者是全局对象</div><div class="line"></div><div class="line">var myInfo = &#123;</div><div class="line">  name: &apos;以乐之名&apos;,</div><div class="line">  getName: getName</div><div class="line">&#125;;</div><div class="line">myInfo.getName();  // 以乐之名 调用者是myInfo对象</div></pre></td></tr></table></figure></p>
<h3 id="this的正解"><a href="#this的正解" class="headerlink" title="this的正解"></a>this的正解</h3><p><strong>“this的指向是在运行时进行绑定的，而不是代码书写（函数声明）时确定！！！”</strong></p>
<p><strong>“看谁用”</strong>，this的指向取决于调用者，这也是很多文章提到过的观点。<strong>“谁调用，this指向谁”</strong>，只是这句话稍有偏颇，某些情况不见得都适用。</p>
<p>生活栗子：你的钱并不一定是你的钱，只有当你使用消费了才是你的钱 。<br>（<strong>“看谁用”</strong>），借出去的钱就不是你的了。。。</p>
<p>回到正文，我们先通过栈，来理解什么是调用位置？</p>
<p>JavaScript中函数的调用是以栈的方式来存储，栈顶是正在运行的函数，函数调用时入栈，执行完成后出栈。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">  // 此时的栈：全局 -&gt; foo，调用位置在foo</div><div class="line">  bar();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function bar() &#123;</div><div class="line">  // 此时的栈：全局 -&gt; foo -&gt; bar，调用位置在bar</div><div class="line">  baz();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function baz() &#123;</div><div class="line">  // 此时的栈：全局 -&gt; foo -&gt; bar -&gt; baz，调用位置在baz</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure></p>
<p>代码中虽然函数存在多层嵌套使用，但处于栈顶的只有正在执行的函数，也即调用者只有顶层的那一个（或最后一个），理清调用位置（调用者）有助于我们理解<code>this</code>。</p>
<h3 id="this的绑定规则"><a href="#this的绑定规则" class="headerlink" title="this的绑定规则"></a>this的绑定规则</h3><ol>
<li>默认绑定（函数单独调用）</li>
<li>隐式绑定（作为对象的属性方法调用，带有执行上下文）</li>
<li>显示绑定（<code>call/apply/bind</code>）</li>
<li><code>new</code>绑定（<code>new</code>创建实例）</li>
<li>箭头函数绑定（ES6新增，基于词法作用域）</li>
</ol>
<h3 id="默认绑定下（函数单独调用）区分严格模式"><a href="#默认绑定下（函数单独调用）区分严格模式" class="headerlink" title="默认绑定下（函数单独调用）区分严格模式"></a>默认绑定下（函数单独调用）区分严格模式</h3><ul>
<li>非严格模式，<code>this</code>会指向全局对象（浏览器全局对象是<code>window</code>，NodeJS全局对象是<code>global</code>）；</li>
<li>严格模式，<code>this</code>指向<code>undefined</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 非严格模式</div><div class="line">function getName() &#123;</div><div class="line">  console.log(this.name);  // this指向全局对象</div><div class="line">&#125;</div><div class="line">getName();  // &quot;&quot;，并不会报错，如果外部有全局变量name，则会输出对应值</div><div class="line"></div><div class="line">// 严格模式</div><div class="line">function getName() &#123;</div><div class="line">  &quot;use strict&quot;</div><div class="line"> console.log(this.name);   // this指向undefined</div><div class="line">&#125;</div><div class="line">getName();  // TypeError: Cannot read property &apos;name&apos; of undefined</div></pre></td></tr></table></figure>
<p><strong>TIPS: 严格模式中，对函数中this的影响，只在函数内声明了严格模式才会存在，如果是调用时声明严格模式则不会影响。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function getName() &#123;</div><div class="line">  console.log(this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 调用时声明严格模式</div><div class="line">&quot;use strict&quot;;</div><div class="line">getName();  // &quot;&quot;</div></pre></td></tr></table></figure>
<h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>隐式绑定中，函数一般作为对象的属性调用，带有调用者的执行上下文。因此<code>this</code>值取决于调用者的上下文环境。<strong>如果存在多层级属性引用，只有对象属性引用链中最顶层（最后一层）会影响调用位置</strong>，而<code>this</code>的值取决于调用位置。文章开头以栈来理解调用者的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function getName() &#123;</div><div class="line">  return this.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myInfo = &#123;</div><div class="line">  name: &apos;以乐之名&apos;,</div><div class="line">  getName: getName</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var leader = &#123;</div><div class="line">  name: &apos;大神组长&apos;</div><div class="line">  man: myInfo</div><div class="line">&#125;;</div><div class="line">leader.man.getName();  // &apos;以乐之名&apos;</div><div class="line">// man 指向 myInfo，最顶层（最后一层）对象为 myInfo</div></pre></td></tr></table></figure>
<h3 id="apply-call的区别"><a href="#apply-call的区别" class="headerlink" title="apply/call的区别"></a>apply/call的区别</h3><p><code>apply/call</code>方法两者类似，都可以显示绑定<code>this</code>，两者的区别是参数传递的方式不同。<code>apply/call</code>第一个参数都为要指定<code>this</code>的对象，不同的是<code>apply</code>第二个参数接受的是一个参数数组，而<code>call</code>从第二个参数开始接受的是参数列表。</p>
<blockquote>
<p>apply语法：func.apply(thisArg, [argsArray])</p>
<p>call语法：func.call(thisArg, arg1, arg2, …)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var numbers = [5, 6, 2, 3, 7];</div><div class="line"></div><div class="line">// 求numbers的最大值</div><div class="line"></div><div class="line">// apply</div><div class="line">var max = Math.max.apply(null, numbers);</div><div class="line"></div><div class="line">// call</div><div class="line">var max = Math.max.call(null, ...numbers); // ...展开运算符</div></pre></td></tr></table></figure>
<p><strong>TIPS: 如果thisArg为原始值（数字，字符串，布尔值），<code>this</code>会指向该原始值的自动包装对象，如<code>Number</code>, <code>String</code>, <code>Boolean</code>等</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">func.apply(1);</div><div class="line">// func中的this -&gt; Number对象;</div></pre></td></tr></table></figure>
<h3 id="bind的特别（柯里化的应用）"><a href="#bind的特别（柯里化的应用）" class="headerlink" title="bind的特别（柯里化的应用）"></a>bind的特别（柯里化的应用）</h3><p><code>bind</code>是ES5新增的方法，跟<code>apply/call</code>功能一样，可以显示绑定this。</p>
<blockquote>
<p>bind语法：function.bind(thisArg[, arg1[, arg2[, …]]])</p>
<p>bind()方法创建一个新的函数，在调用时设置this关键字为提供的值，并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p>
<p> – 《Function.prototype.bind() | MDN》</p>
</blockquote>
<p><strong>“bind与apply/call的区别：apply/call传入this并立即执行函数，而bind传入this则返回一个函数，并不会立即执行，只有调用返回的函数才会执行原始函数”</strong>。</p>
<p><code>bind</code>方法是函数柯里化的一种应用，看过上篇<a href="https://segmentfault.com/a/1190000017981474" target="_blank" rel="external">《前端进击的巨人（五）：学会函数柯里化（curry) 》</a>的小伙伴，应该还记得<strong>“函数柯里化的特点：延迟执行，部分传参，返回一个可处理剩余参数的函数”</strong>。</p>
<p><code>bind</code>相较<code>apply/call</code>的优点，可以通过部分传参提前对this进行一次”永久绑定”，也就是说<code>this</code>只需绑定一次，省却每次执行都要进行<code>this</code>绑定的操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function getName() &#123;</div><div class="line">  return this.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myInfo = &#123;</div><div class="line">  name: &apos;以乐之名&apos;,</div><div class="line">  job: &apos;前端工程师&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var getName = getName.bind(myInfo);</div><div class="line">getName();  // &apos;以乐之名&apos;;</div><div class="line">getName(); //  &apos;以乐之名&apos;;</div><div class="line"></div><div class="line">// 一次性绑定，之后调用无需再修改this</div></pre></td></tr></table></figure>
<p><strong>TIPS: 函数柯里化可以用于参数预设，像一次性操作（判断/绑定）等。</strong></p>
<p>有关函数柯里化的详解，请回阅：<a href="https://segmentfault.com/a/1190000017981474" target="_blank" rel="external">《前端进击的巨人（五）：学会函数柯里化（curry) 》</a>。</p>
<h3 id="构造函数中的this"><a href="#构造函数中的this" class="headerlink" title="构造函数中的this"></a>构造函数中的this</h3><p>通过<code>new</code>操作符可以实现对函数的构造调用。JavaScript中本身并没有”构造函数”，一个函数如果没有使用<code>new</code>操作符调用，那么它就是个普通函数，<code>new Func()</code>实际上是对函数<code>Func</code>的”构造调用”。</p>
<p>在了解构造函数中的<code>this</code>前，有必要先了解下<code>new</code>实例化对象的过程。</p>
<h4 id="new实例过程"><a href="#new实例过程" class="headerlink" title="new实例过程"></a>new实例过程</h4><ol>
<li>创建（构造）一个全新的空对象</li>
<li>这个新对象会被执行”原型”链接（新对象的<code>__proto__</code>会指向函数的<code>prototype</code>)</li>
<li>构造函数的<code>this</code>会指向这个新对象，并对<code>this</code>属性进行赋值</li>
<li>如果函数没有返回其他对象，则返回这个新对象（注意构造函数的<code>return</code>，一般不会有<code>return</code>)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 正常不带return的构造函数</div><div class="line">function People(name, sex) &#123;</div><div class="line">  this.name = name;</div><div class="line">  this.sex = sex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var man = new People(&apos;亚当&apos;, &apos;男&apos;);</div><div class="line">var woman = new People(&apos;夏娃&apos;, &apos;女&apos;);</div><div class="line">// 实例化对象成功</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 构造函数带了return</div><div class="line">function People(name, sex) &#123;</div><div class="line">  return 1;  // 返回的是Number对象</div><div class="line">&#125;</div><div class="line">function People(name, sex) &#123;</div><div class="line">  return &apos;hello world&apos;;  // 返回的是String对象</div><div class="line">&#125;</div><div class="line">function People(name, sex) &#123;</div><div class="line">  return function() &#123;&#125;</div><div class="line">&#125;</div><div class="line">function People(name, sex) &#123;</div><div class="line">  return &#123;&#125;;</div><div class="line">&#125;</div><div class="line">// 以上并未正确实例化对象</div></pre></td></tr></table></figure>
<p>构造函数自定义<code>return</code>，会造成<code>new</code>无法完成正确的实例化操作。如果返回值为基本类型，则返回其包装对象<code>Number/String/Bollean</code>。</p>
<p><strong>TIPS: 原型链中的this指向其实例化的对象</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">People.prototype.say = function() &#123;</div><div class="line">  console.log(`我的名字：$&#123;this.name&#125;`);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var man = new People(&apos;亚当&apos;, &apos;男&apos;);</div><div class="line">man.say();  // 我的名字：亚当</div></pre></td></tr></table></figure></p>
<h3 id="this绑定规则的优先级"><a href="#this绑定规则的优先级" class="headerlink" title="this绑定规则的优先级"></a>this绑定规则的优先级</h3><p>显示绑定 / <code>new</code>绑定 &gt; 隐式绑定 &gt; 默认绑定</p>
<p><strong>TIPS: <code>new</code>无法跟<code>apply/call</code>同时使用</strong></p>
<h3 id="this判定步骤"><a href="#this判定步骤" class="headerlink" title="this判定步骤"></a>this判定步骤</h3><ol>
<li>函数被<code>new</code>操作符使用（<code>new</code>绑定）？ YES –&gt; <code>this</code>绑定的是<code>new</code>创建的新对象</li>
<li>函数通过<code>call/apply/bind</code>（显示绑定）？ YES –&gt; <code>this</code>绑定的是指定的对象</li>
<li>函数在某个上下文对象中调用（隐式绑定）？ YES –&gt; <code>this</code>绑定的是那个上下文对象</li>
<li>默认绑定，严格模式指向<code>undefined</code>，否则指向全局对象</li>
</ol>
<h3 id="ES6的箭头函数（词法作用域的this机制，规则之外）"><a href="#ES6的箭头函数（词法作用域的this机制，规则之外）" class="headerlink" title="ES6的箭头函数（词法作用域的this机制，规则之外）"></a>ES6的箭头函数（词法作用域的this机制，规则之外）</h3><p>箭头函数的<code>this</code>机制不同于传统的<code>this</code>机制，它采取的是另外一种机制，词法作用域的<code>this</code>判定规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// 例子一</div><div class="line">var name = &apos;无名氏&apos;;</div><div class="line">var myInfo = &#123;</div><div class="line">  name: &apos;以乐之名&apos;,</div><div class="line">  getName: () =&gt; &#123;</div><div class="line">    console.log(this.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var getName = myInfo.getName;</div><div class="line">window.getName();     // 无名氏</div><div class="line">myInfo.getName();     // 无名氏</div><div class="line">// myInfo是在全局环境定义的，因此根据词法作用域，this指向全局对象</div><div class="line"></div><div class="line">// 例子二</div><div class="line">var name = &apos;无名氏&apos;;</div><div class="line">var myInfo = &#123;</div><div class="line">  name: &apos;以乐之名&apos;,</div><div class="line">  say: () =&gt; &#123;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      console.log(this.name);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">myInfo.say();  // 无名氏</div><div class="line">// 箭头函数通过作用域链来逐层查找this，最终找到全局变量myInfo，this指向全局对象</div><div class="line"></div><div class="line">// 例子三</div><div class="line">var name = &apos;无名氏&apos;;</div><div class="line">var myInfo = &#123;</div><div class="line">  name: &apos;以乐之名&apos;,</div><div class="line">  say: function() &#123;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      console.log(this.name);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">myInfo.say(); // 以乐之名</div><div class="line">// 箭头函数找到say: function()&#123;&#125;，因此this的作用域来自myInfo</div></pre></td></tr></table></figure>
<p><strong>TIPS: <code>setTimeout/setInterval/alert</code>的调用者都是全局对象</strong></p>
<p><strong>“箭头函数的<code>this</code>始终指向函数定义时的<code>this</code>，而非执行（调用）时的<code>this</code>。箭头函数中的<code>this</code>必须通过作用域链一层一层向外查找，来确定<code>this</code>指向。”</strong></p>
<h4 id="扩展：箭头函数的书写规则"><a href="#扩展：箭头函数的书写规则" class="headerlink" title="扩展：箭头函数的书写规则"></a>扩展：箭头函数的书写规则</h4><h5 id="1-箭头函数只能用函数表达式，不能用函数声明式写法（不包括匿名函数）"><a href="#1-箭头函数只能用函数表达式，不能用函数声明式写法（不包括匿名函数）" class="headerlink" title="1. 箭头函数只能用函数表达式，不能用函数声明式写法（不包括匿名函数）"></a>1. 箭头函数只能用函数表达式，不能用函数声明式写法（不包括匿名函数）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 函数表达式</div><div class="line">const getName = (name) =&gt; &#123; return &apos;myName: &apos; + name &#125;;</div><div class="line"></div><div class="line">// 匿名函数</div><div class="line">setTimeout((name) =&gt; &#123;</div><div class="line">  console.log(name);</div><div class="line">&#125;, 1000)</div></pre></td></tr></table></figure>
<h5 id="2-如果参数只有一个，可不加括号-；如果没有参数或多个参数需加括号"><a href="#2-如果参数只有一个，可不加括号-；如果没有参数或多个参数需加括号" class="headerlink" title="2. 如果参数只有一个，可不加括号()；如果没有参数或多个参数需加括号()"></a>2. 如果参数只有一个，可不加括号<code>()</code>；如果没有参数或多个参数需加括号<code>()</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 只有一个参数</div><div class="line">const getName = name =&gt; &#123;</div><div class="line">  return `myName: $&#123;name&#125;`;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 无参数</div><div class="line">const getName = () =&gt; &#123;</div><div class="line">  return &apos;myName: &quot;以乐之名&quot;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 多参数</div><div class="line">const getName = (firstName, lastName) =&gt; &#123;</div><div class="line">  return `myName: $&#123;firstName&#125; $&#123;lastName&#125;`;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-函数体只有一个可不加花括号"><a href="#3-函数体只有一个可不加花括号" class="headerlink" title="3. 函数体只有一个可不加花括号{}"></a>3. 函数体只有一个可不加花括号<code>{}</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const getName = name =&gt; return `myName: $&#123;name&#125;`;</div></pre></td></tr></table></figure>
<h5 id="4-函数体没有花括号-，可不写return，会自动返回"><a href="#4-函数体没有花括号-，可不写return，会自动返回" class="headerlink" title="4. 函数体没有花括号{}，可不写return，会自动返回"></a>4. 函数体没有花括号<code>{}</code>，可不写return，会自动返回</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const getName = name =&gt; `myName: $&#123;name&#125;`;</div></pre></td></tr></table></figure>
<hr>
<p>参考文档：</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/1488" target="_blank" rel="external">你不知道的JavaScript（上卷）</a></li>
<li><a href="https://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="external">彻底理解js中this的指向，不必硬背。</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">this|MDN</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（五）：学会函数柯里化（curry)]]></title>
      <url>/2019/01/22/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%AD%A6%E4%BC%9A%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%EF%BC%88curry/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gymazis4j30m80goaac.jpg" alt="前端进击的巨人（五）：学会函数柯里化（curry)"></p>
<blockquote>
<p>柯里化（Curring, 以逻辑学家Haskell Curry命名)</p>
</blockquote>
<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><p>柯里化理解的基础来源于我们前几篇文章构建的知识，如果还未能掌握闭包，建议回阅前文。</p>
<p>代码例子会用到 <code>apply/call</code> ，一般用来实现对象冒充，例如字符串冒充数组对象，让字符串拥有数组的方法。待对象讲解篇会细分解析。在此先了解，两者功能相同，区别在于参数传递方式的不同， <code>apply</code> 参数以数组方式传递，<code>call</code> 多个参数则是逗号隔开。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apply(context, [arguments]);</div><div class="line">call(context, arg1, arg2, arg3, ....);</div></pre></td></tr></table></figure>
<p>代码例子中使用到了ES6语法，对ES6还不熟悉的话，可学习社区这篇文章：<a href="https://segmentfault.com/a/1190000004365693" target="_blank" rel="external">《30分钟掌握ES6/ES2015核心内容（上）》</a></p>
<hr>
<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>函数柯里化在JavaScript中其实是高阶函数的一种应用，上篇文章我们简略介绍了高阶函数（可以作为参数传递，或作为返回值）。</p>
<p>理论知识太枯燥，来个生活小例子，”存款买房”（富二代绕道）。假设买房是我们存钱的终极目标。那么在买房前，存在卡里的钱（老婆本）就不能动。等到够钱买房了，钱从银行卡取出来，开始买买买。。。</p>
<p>函数柯里化就像我们往卡里存钱，存够了，才能执行买房操作，存不够，接着存。</p>
<h4 id="函数柯里化公式"><a href="#函数柯里化公式" class="headerlink" title="函数柯里化公式"></a>函数柯里化公式</h4><p>先上几个公式（左边是普通函数，右边就是转化后柯里化函数支持的调用方式）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 公式类型一</div><div class="line">fn(a,b,c,d) =&gt; fn(a)(b)(c)(d);</div><div class="line">fn(a,b,c,d) =&gt; fn(a, b)(c)(d);</div><div class="line">fn(a,b,c,d) =&gt; fn(a)(b,c,d);</div><div class="line"></div><div class="line">// 公式类型二</div><div class="line">fn(a,b,c,d) =&gt; fn(a)(b)(c)(d)();</div><div class="line">fn(a,b,c,d) =&gt; fn(a);fn(b);fn(c);fn(d);fn();</div></pre></td></tr></table></figure>
<p>两种公式类型的区别 —— 函数触发执行的机制不同：</p>
<ul>
<li>公式一当传入参数等于函数参数数量时开始执行</li>
<li>公式二当没有参数传入时（且参数数量满足）开始执行</li>
</ul>
<p>通过公式，我们先来理解这行代码 <code>fn(a)(b)(c)(d)</code>, 执行 <code>fn(a)</code> 时返回的是一个<strong>函数</strong>，并且支持<strong>传参</strong>。何时返回的是值而不是函数的触发机制控制权在我们手里，我们可以为函数制定不同的触发机制。</p>
<p>普通的函数调用，一次性传入参数就执行。而通过柯里化，它可以帮我们实现函数部分参数传入执行（并未立即执行原始函数，钱没存够接着存），这就是函数柯里化的特点：<strong>“延迟执行和部分求值”</strong></p>
<p><strong>“函数柯里化：指封装一个函数，接收原始函数作为参数传入，并返回一个能够接收并处理剩余参数的函数”</strong></p>
<h4 id="函数柯里化的例子"><a href="#函数柯里化的例子" class="headerlink" title="函数柯里化的例子"></a>函数柯里化的例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 等待我们柯里化实现的方法add</div><div class="line">function add(a, b, c, d) &#123;</div><div class="line">    return a + b + c + d;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 最简单地实现函数add的柯里化</div><div class="line">// 有点low，有助于理解</div><div class="line">function add(a, b, c, d) &#123;</div><div class="line">    return function(a) &#123;</div><div class="line">        return function(b) &#123;</div><div class="line">            return function(c) &#123;</div><div class="line">                return a + b + c + d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析代码知识点：</p>
<ol>
<li>函数作为返回值返回，闭包形成，外部环境可访问函数内部作用域</li>
<li>子函数可访问父函数的作用域，作用域由内而外的作用域链查找规则，作用域嵌套形成</li>
<li>在函数参数数量不满足时，返回一个函数（该函数可接收并处理剩余参数）</li>
<li>当函数数量满足我们的触发机制（可自由制定），触发原始函数执行</li>
</ol>
<p>前几篇文章的知识点此时刚好。可见基础知识的重要性，高阶的东西始终要靠小砖头堆砌出来。</p>
<p>弄清原理后，接下来就是将代码写得更通用些（高大上些）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 公式类型一: 参数数量满足函数参数要求，触发执行</div><div class="line">// fn(a,b,c,d) =&gt; fn(a)(b)(c)(d);</div><div class="line"></div><div class="line">const createCurry = (fn, ...args) &#123;</div><div class="line">    let _args = args || [];</div><div class="line">    let length = fn.length; // fn.length代码函数参数数量</div><div class="line"></div><div class="line">    return (...rest) =&gt; &#123;</div><div class="line">        let _allArgs = _args.slice(0);  </div><div class="line">        // 深拷贝闭包共用对象_args，避免后续操作影响（引用类型）</div><div class="line">        _allArgs.push(...rest);</div><div class="line">        if (_allArgs.length &lt; length) &#123;</div><div class="line">            // 参数数量不满足原始函数数量，返回curry函数</div><div class="line">            return createCurry.call(this, fn, ..._allArgs);</div><div class="line">        &#125; else &#123;</div><div class="line">            // 参数数量满足原始函数数量，触发执行</div><div class="line">            return fn.apply(this, _allArgs);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const curryAdd = createCurry(2);</div><div class="line">let sum = curryAdd(3)(4)(5);    // 14</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 公式类型二: 无参数传入时并且参数数量已经满足函数要求</div><div class="line">// fn(a, b, c, d) =&gt; fn(a)(b)(c)(d)();</div><div class="line">// fn(a, b, c, d) =&gt; fn(a);fn(b);fn(c);fn(d);fn();</div><div class="line"></div><div class="line">const createCurry = (fn, ...args) =&gt; &#123;</div><div class="line">    let all = args || [];</div><div class="line">    let length = fn.length;</div><div class="line"></div><div class="line">    return (...rest) =&gt; &#123;</div><div class="line">        let _allArgs = all.slice(0);</div><div class="line">        _allArgs.push(...rest);</div><div class="line">        if (rest.length &gt; 0 || _allArgs.length &lt; length) &#123;</div><div class="line">            // 调用时参数不为空或存储的参数不满足原始函数参数数量时，返回curry函数</div><div class="line">            return createCurry.call(this, fn, ..._allArgs);</div><div class="line">        &#125; else &#123;</div><div class="line">            // 调用参数为空(),且参数数量满足时，触发执行</div><div class="line">            return fn.apply(this, _allArgs);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const curryAdd = createCurry(2);</div><div class="line">let sum = curryAdd(3)(4)(5)();  // 14</div></pre></td></tr></table></figure>
<p>为实现公式中不同的两种调用公式，两个createCurry方法制定了两种不同的触发机制。记住一个点，函数触发机制可根据需求自行制定。</p>
<h3 id="偏函数与柯里化的区别"><a href="#偏函数与柯里化的区别" class="headerlink" title="偏函数与柯里化的区别"></a>偏函数与柯里化的区别</h3><p>先上个公式看对比：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 函数柯里化：参数数量完整</div><div class="line">fn(a,b,c,d) =&gt; fn(a)(b)(c)(d);</div><div class="line">fn(a,b,c,d) =&gt; fn(a,b)(c)(d);</div><div class="line"></div><div class="line">// 偏函数：只执行了部分参数</div><div class="line">fn(a,b,c,d) =&gt; fn(a);</div><div class="line">fn(a,b,c,d) =&gt; fn(a, b);</div></pre></td></tr></table></figure>
<p><strong>“函数柯里化中，当你传入部分参数时，返回的并不是原始函数的执行结果，而是一个可以继续支持后续参数的函数。而偏函数的调用方式更像是普通函数的调用方式，只调用一次，它通过原始函数内部来实现不定参数的支持。”</strong></p>
<p>如果已经看懂上述柯里化的代码例子，那么改写支持偏函数的代码，并不难。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 公式：</div><div class="line">// fn(a, b, c, d) =&gt; fn(a);</div><div class="line">// fn(a, b, c, d) =&gt; fn(a,b,c);</div><div class="line"></div><div class="line">const partialAdd = (a = 0, b = 0, c = 0, d = 0) =&gt; &#123;</div><div class="line">    return a + b + c +d;</div><div class="line">&#125;</div><div class="line"></div><div class="line">partialAdd(6);      // 6</div><div class="line">partialAdd(2, 3);   // 5</div></pre></td></tr></table></figure>
<p>使用ES6函数参数默认值，为没有传入参数，指定默认值为0，支持无参数或不定参数传入。</p>
<h3 id="柯里化的特点："><a href="#柯里化的特点：" class="headerlink" title="柯里化的特点："></a>柯里化的特点：</h3><ol>
<li>参数复用（固定易变因素）</li>
<li>延迟执行</li>
<li>提前返回</li>
</ol>
<h3 id="柯里化的缺点"><a href="#柯里化的缺点" class="headerlink" title="柯里化的缺点"></a>柯里化的缺点</h3><p>柯里化是牺牲了部分性能来实现的，可能带来的性能损耗：</p>
<ol>
<li>存取 <code>arguments</code> 对象要比存取命名参数要慢一些</li>
<li>老版本浏览器在 <code>arguments.lengths</code> 的实现相当慢(新版本浏览器忽略)</li>
<li><code>fn.apply()</code> 和 <code>fn.call()</code> 要比直接调用 <code>fn()</code> 慢</li>
<li>大量嵌套的作用域和闭包会带来开销，影响内存占用和作用域链查找速度</li>
</ol>
<h3 id="柯里化的应用"><a href="#柯里化的应用" class="headerlink" title="柯里化的应用"></a>柯里化的应用</h3><ul>
<li>利用柯里化制定约束条件，管控触发机制</li>
<li>处理浏览器兼容（参数复用实现一次性判断）</li>
<li>函数节流防抖（延迟执行）</li>
<li>ES5前bind方法的实现</li>
</ul>
<h4 id="一个应用例子：浏览器事件绑定的兼容处理"><a href="#一个应用例子：浏览器事件绑定的兼容处理" class="headerlink" title="一个应用例子：浏览器事件绑定的兼容处理"></a>一个应用例子：浏览器事件绑定的兼容处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 普通事件绑定函数</div><div class="line">var addEvent = function(ele, type, fn, isCapture) &#123;</div><div class="line">    if(window.addEventListener) &#123;</div><div class="line">        ele.addEventListener(type, fn, isCapture)</div><div class="line">    &#125; else if(window.attachEvent) &#123;</div><div class="line"></div><div class="line">        ele.attachEvent(&quot;on&quot; + type, fn)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 弊端：每次调用addEvent都会进行判断</div><div class="line"></div><div class="line">// 柯里化事件绑定函数</div><div class="line">var addEvent = (function() &#123;</div><div class="line">    if(window.addEventListener) &#123;</div><div class="line">        return function(ele, type, fn, isCapture) &#123;</div><div class="line">            ele.addEventListener(type, fn, isCapture)</div><div class="line">        &#125;</div><div class="line">    &#125; else if(window.attachEvent) &#123;</div><div class="line">        return function(ele, type, fn) &#123;</div><div class="line">             ele.attachEvent(&quot;on&quot; + type, fn)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div><div class="line">// 优势：判断只执行一次，通过闭包保留了父级作用域的判断结果</div></pre></td></tr></table></figure>
<h3 id="秒懂反柯里化"><a href="#秒懂反柯里化" class="headerlink" title="秒懂反柯里化"></a>秒懂反柯里化</h3><p>先上公式，从来没有这么喜欢写公式，简明易懂。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 反柯里化公式：</div><div class="line">curryFn(a)(b)(c)(d) = fn(a, b, c, d);</div><div class="line">curryFn(a) = fn(a);</div></pre></td></tr></table></figure></p>
<p>看完公式，是不是似曾相识，这不就是我们日常敲码的普通函数么？没错的，函数柯里化就是把普通函数变成成一个复杂的函数，而反柯里化其就是柯里化的逆反，把复杂变得简单。</p>
<p>函数柯里化是把支持多个参数的函数变成接收单一参数的函数，并返回一个函数能接收处理剩余参数：<code>fn(a,b,c,d) =&gt; fn(a)(b)(c)(d)</code>，而反柯里化就是把参数全部释放出来：<code>fn(a)(b)(c)(d) =&gt; fn(a,b,c,d)</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 反柯里化：最简单的反柯里化（普通函数）</div><div class="line">function add(a, b, c, d) &#123;</div><div class="line">    return a + b + c + d;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="反思：为何要使用柯里化"><a href="#反思：为何要使用柯里化" class="headerlink" title="反思：为何要使用柯里化"></a>反思：为何要使用柯里化</h3><p>函数柯里化是函数编程中的一个重要的基础，它为我们提供了一种编程的思维方式。显然，它让我们的函数处理变得复杂，代码调用方式并不直观，还加入了闭包，多层作用域嵌套，会有一些性能上的影响。</p>
<p>但在一些复杂的业务逻辑封装中，函数柯里化能够为我们提供更好的应对方案，让我们的函数更具自由度和灵活性。</p>
<p>实际开发中，如果你的逻辑处理相对复杂，不妨换个思维，用函数柯里化来实现，技能包不嫌多。<br>说到底，程序员就是解决问题的那群人。</p>
<hr>
<h3 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h3><p>本篇函数柯里化知识点的理解确实存在难度，暂时跳过这章也无妨，可以先了解再深入。耐得主寂寞的小伙伴回头多啃几遍，没准春季面试就遇到了。</p>
<hr>
<p>参考文档：</p>
<ul>
<li><a href="https://www.cnblogs.com/yifeng555/p/8878474.html" target="_blank" rel="external">js高阶函数应用—函数柯里化和反柯里化</a></li>
<li><a href="https://www.jianshu.com/p/5e1899fe7d6b" target="_blank" rel="external">前端基础进阶（八）：深入详解函数的柯里化</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（四）：略知函数式编程]]></title>
      <url>/2019/01/21/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%95%A5%E7%9F%A5%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>系列更文前三篇文章，围绕了一个重要的知识点：<strong>“函数”</strong>。<br>函数调用栈、函数执行上下文、函数作用域到闭包。可见不理解函数式编程，代码都撸不好。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gylkd143j30lo0git96.jpg" alt="前端进击的巨人（四）：略知函数式编程"></p>
<h3 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h3><p>函数与其它数据类型一样，可以作为值赋给变量，作为参数传递或返回值返回，也可以像对象一样给函数创建属性（不推荐给函数加属性，虽然可用）。</p>
<h4 id="函数在实际开发中应用："><a href="#函数在实际开发中应用：" class="headerlink" title="函数在实际开发中应用："></a>函数在实际开发中应用：</h4><ol>
<li>函数声明</li>
<li>函数表达式</li>
<li>匿名函数</li>
<li>自执行函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//...    </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 匿名函数</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="comment">// 自执行函数</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h4 id="何为一等：优先级"><a href="#何为一等：优先级" class="headerlink" title="何为一等：优先级"></a>何为一等：优先级</h4><p>函数声明在<strong>“执行上下文创建阶段”</strong>就会进行声明并赋值，而<code>var</code>声明变量会初始化为<code>undefined</code>，实际赋值会等到<strong>“执行上下文执行阶段”</strong>。函数表达式使用<code>var</code>来声明，因此它遵循的是变量声明的规则。<strong>（ 如果函数名与变量重名，函数优先赋值）</strong></p>
<p><strong>“函数声明优先级高于变量声明，函数表达式，自称一等公民。”</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代码书写:</span></div><div class="line"><span class="built_in">console</span>.log(getName);</div><div class="line">getName();</div><div class="line"><span class="keyword">var</span> getName;</div><div class="line">getName = <span class="string">'我的名字'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getName);</div><div class="line"></div><div class="line"><span class="comment">// 实际执行</span></div><div class="line"><span class="keyword">var</span> getName;            <span class="comment">// 变量名与函数名重名，函数优先赋值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(getName);</div><div class="line">getName();</div><div class="line">getName = <span class="string">'我的名字'</span>;</div><div class="line"><span class="built_in">console</span>.log(getName);</div></pre></td></tr></table></figure>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>函数式编程是一种编程思维方式，它建议我们在程序编写时，对复用性高的功能代码进行函数封装，实现代码的高复用性。</p>
<p>新手朋友往往是一块代码多次出现在不同的地方，常见的例子就是<code>ajax</code>请求方法运用，在需要请求后端数据时多次出现一串<code>ajax</code>请求代码。</p>
<p>如果想要对<code>ajax</code>请求统一做异常处理，或管理后端返回状态码，是不是每处代码都要修改？？？但是如果把<code>ajax</code>请求代码封装成一个函数，接口<code>url</code>和数据<code>data</code>通过参数传递到函数内部处理，后期扩展维护都方便修改，复用性扩展性都更加优秀。</p>
<p>所以实际敲代码过程中，要经常提醒自己运用函数式编程的思维方式，只要有可能出现多次的业务逻辑代码，那么就要考虑是否封装成函数，以便后续统一调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumScore</span>(<span class="params">list</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> totalScore = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">        totalScore += list[i];        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> totalScore;    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> list = [<span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> totalScore = sumScore(list);    <span class="comment">// 计算总分</span></div></pre></td></tr></table></figure>
<p><strong>TIPS: 函数名建议使用动词，如<code>addUser()，sumScore()，getUser()</code>…</strong></p>
<h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><blockquote>
<p>纯函数：相同的输入对应相同的输出，稳定没有副作用（不改变外部变量的值）</p>
</blockquote>
<h4 id="相同的输入，相同的输出"><a href="#相同的输入，相同的输出" class="headerlink" title="相同的输入，相同的输出"></a>相同的输入，相同的输出</h4><p>相同的参数传入调用，要有相同的结果输出，概念有点绕，上代码栗子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> dateOne = getDate();</div><div class="line"><span class="keyword">var</span> dateTwo = getDate();</div><div class="line"><span class="keyword">var</span> dateThr = getDate();</div></pre></td></tr></table></figure>
<p>上述代码中调用了三次<code>getDate()</code>，三次返回的值都不一样。相同的输入并没有相同的输出，所以<code>getDate()</code>并不是一个纯函数。</p>
<p><strong>TIPS：函数中使用<code>new Date()</code>,<code>Math.random()</code>, 异步等都可能造成函数不稳定。</strong></p>
<h4 id="没有副作用（不改变外部环境的值）"><a href="#没有副作用（不改变外部环境的值）" class="headerlink" title="没有副作用（不改变外部环境的值）"></a>没有副作用（不改变外部环境的值）</h4><p>部分小伙伴的代码，在函数里面直接修改参数的值，这是一种非常不推荐的做法，这样做会造成代码环境不可控制，污染外部变量环境，一旦出现错误排查起来：心累，三个字心好累。</p>
<p>函数有自己的局部作用域，因此函数中，对需要使用到的变量，管控在自身的作用域下。如果需要修改外部参数的值，通过函数返回值返回给函数调用者。修改外部参数值的操作不在函数内进行，确保对外部环境没有副作用。</p>
<p><strong>TIPS：参数为引用类型时，参数复制的是地址指针，避免修改了引用类型中属性值污染外部环境，如需使用建议手动深拷贝赋值。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGirlGift</span>(<span class="params">list</span>) </span>&#123;</div><div class="line">    <span class="comment">// 避免污染参数为引用类型的list，对list深拷贝</span></div><div class="line">    <span class="keyword">var</span> newList = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(list));</div><div class="line">    newList.map(<span class="function"><span class="params">girl</span> =&gt;</span> &#123;</div><div class="line">        girl.gift = girl.age &gt; <span class="number">18</span> ? <span class="string">'lipstick'</span> : <span class="string">'chocolates'</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> newList;    <span class="comment">// 返回新值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> girlList = [</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'Kelly'</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'Alic'</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'Moon'</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;,</div><div class="line">    &#123;<span class="attr">name</span>: <span class="string">'Nana'</span>, <span class="attr">age</span>: <span class="number">17</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> girlGiftList = getGirlGift(girlList);</div><div class="line">girlList         <span class="comment">// 原用girlList不变</span></div><div class="line">girlGiftList     <span class="comment">// 每个girl多了gift属性</span></div></pre></td></tr></table></figure>
<h4 id="Array对象的函数（纯与不纯）"><a href="#Array对象的函数（纯与不纯）" class="headerlink" title="Array对象的函数（纯与不纯）"></a>Array对象的函数（纯与不纯）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不纯的函数</span></div><div class="line">array.push();       <span class="comment">// 数组尾部插入</span></div><div class="line">array.pop();        <span class="comment">// 删除并返回数组最后一个元素</span></div><div class="line">array.unshift();    <span class="comment">// 数组头部插入</span></div><div class="line">array.shift();      <span class="comment">// 删除并返回数组第一元素</span></div><div class="line">array.splice();     <span class="comment">// 删除元素，并向数组添加元素</span></div><div class="line">array.reverse();    <span class="comment">// 颠倒数组元素的顺序</span></div><div class="line">array.sort();       <span class="comment">// 排序数组元素</span></div><div class="line"></div><div class="line"><span class="comment">// 纯函数</span></div><div class="line">array.slice();      <span class="comment">// 数组中返回选定的元素</span></div><div class="line">array.concat();     <span class="comment">// 连接数组，并发挥新数组</span></div><div class="line">array.join();       <span class="comment">// 按分隔符连接数组，返回字符串</span></div></pre></td></tr></table></figure>
<p><a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="external">&gt;&gt;更多Array对象方法，参考W3C</a></p>
<h4 id="纯函数的应用：状态管理Redux，Vuex"><a href="#纯函数的应用：状态管理Redux，Vuex" class="headerlink" title="纯函数的应用：状态管理Redux，Vuex"></a>纯函数的应用：状态管理Redux，Vuex</h4><p>流行框架中状态管理就是纯函数的实践应用，引用redux的应用，<code>reducer</code>中返回新的状态数据<code>state</code>，但不能去直接去修改<code>state</code>数据，以下为redux中<code>reducer</code>的例子代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> DELETE_TODO_ITEM:</div><div class="line">            newState.list.splice(action.value, <span class="number">1</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ADD_TODO_ITEM:</div><div class="line">            <span class="keyword">if</span> (newState.inputValue.trim().length) &#123;</div><div class="line">                newState.list.push(newState.inputValue);</div><div class="line">            &#125;</div><div class="line">            newState.inputValue = <span class="string">''</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> INIT_LIST_ACTION: </div><div class="line">            newState = action.data</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>: </div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newState;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="“自执行函数-闭包”-实现模块化"><a href="#“自执行函数-闭包”-实现模块化" class="headerlink" title="“自执行函数 + 闭包” 实现模块化"></a>“自执行函数 + 闭包” 实现模块化</h3><h4 id="模块化包括："><a href="#模块化包括：" class="headerlink" title="模块化包括："></a>模块化包括：</h4><ol>
<li>私有变量</li>
<li>私有方法</li>
<li>公有变量</li>
<li>公有方法</li>
</ol>
<p>上篇中<a href="http://wuliv.com/2019/01/19/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BB%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%B5%B0%E8%BF%9B%E9%97%AD%E5%8C%85/">《前端进击的巨人（三）：从作用域走进闭包》</a>我们讲解了作用域、闭包的原理机制。</p>
<p><strong>“自执行函数可实现块级作用域，而闭包则可实现外部环境对函数作用域内部数据的访问。”</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自执行函数 + 闭包实现模块化</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">MakeModule</span>(<span class="params">window</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'以乐之名'</span>;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">28</span>;</div><div class="line">    <span class="keyword">var</span> job = <span class="string">'程序员'</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeJob</span>(<span class="params">newJob</span>) </span>&#123;</div><div class="line">        job = newJob;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   <span class="built_in">window</span>.modulePublic = &#123;</div><div class="line">        changeJob: changeJob,</div><div class="line">        getName: getName</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.modulePublic.getName();</div><div class="line"><span class="built_in">window</span>.modulePublic.changeJob(<span class="string">'产品经理'</span>);</div></pre></td></tr></table></figure>
<p>对作用域，以及闭包知识还没掌握的小伙伴，可回阅<a href="http://wuliv.com/2019/01/19/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BB%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%B5%B0%E8%BF%9B%E9%97%AD%E5%8C%85/">《前端进击的巨人（三）：从作用域走进闭包》</a>。</p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><blockquote>
<p>高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回</p>
</blockquote>
<p>JavaScript中常用的高阶函数：</p>
<ol>
<li><p><code>Array.prototype.map</code> （映射遍历）</p>
</li>
<li><p><code>Array.prototype.filter</code> （过滤）</p>
</li>
<li><p><code>Array.prototype.reducer</code>（累计）</p>
</li>
</ol>
<p>除了内置的高阶函数，我们实际开放中，高阶函数应用的最多就是回调函数了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function getOrder(url, datas, callBack) &#123;</div><div class="line">    return $.post(url, datas, callBack(orderInfo));</div><div class="line">&#125;</div><div class="line"></div><div class="line">// getOrder就是一个高阶函数，接收callBack函数作为参数</div></pre></td></tr></table></figure></p>
<p>高阶函数的概念很简单，<strong>“本身是函数，参数是函数，或返回值是函数”</strong>。</p>
<p>参考文档：</p>
<ul>
<li><a href="https://www.cnblogs.com/wswq/p/6282920.html" target="_blank" rel="external">JavaScript利用闭包实现模块化</a></li>
<li><a href="https://www.baidu.com/link?url=obaD8FN0Qg5Rv2ntD_kO1IBKmuQuSWTfIZFSuJve4y201PeKZQU2_EzmPb_1592dS9dE2MTFpXW-mNxUNvCGPTlEG2JOHWt51u1JhDh5Hru&amp;wd=&amp;eqid=ec2be91500054799000000065c45643b" target="_blank" rel="external">[翻译]<em>浅谈JavaScript中的高阶函数</em></a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（三）：从作用域走进闭包]]></title>
      <url>/2019/01/19/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%BB%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%B5%B0%E8%BF%9B%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>进击的巨人第三篇，本篇就作用域、作用域链、闭包等知识点，一一击破。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gymz3ythj30yg0mzmxh.jpg" alt="前端进击的巨人（三）：从作用域走进闭包"></p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote>
<p>作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符（变量）的访问权限</p>
<p>——《你不知道的JavaScript上卷》</p>
</blockquote>
<p>作用域有点像圈地盘，大家划好区域，然后各自经营管理，井水不犯河水。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var globaValue = &apos;我是全局作用域&apos;;</div><div class="line">function foo() &#123;</div><div class="line">    var fooValue = &apos;我是foo作用域&apos;;</div><div class="line">    function bar() &#123;</div><div class="line">        var barValue = &apos;我是bar作用域&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function other() &#123;</div><div class="line">    var otherValue = &apos;我是other作用域&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gz1dqbg1j30m80bjt90.jpg" alt="作用域"></p>
<h3 id="作用域的变量声明"><a href="#作用域的变量声明" class="headerlink" title="作用域的变量声明"></a>作用域的变量声明</h3><p>不同作用域下命名相同的变量不会发生冲突，<strong>“就近原则”</strong>选取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var name = &apos;任何名字&apos;;</div><div class="line">function getName() &#123;</div><div class="line">    var name = &apos;以乐之名&apos;;</div><div class="line">    console.log(name);    // &apos;以乐之名&apos;</div><div class="line">&#125;</div><div class="line">console.log(name);        // &apos;任何名字&apos;</div></pre></td></tr></table></figure>
<h3 id="作用域的类型"><a href="#作用域的类型" class="headerlink" title="作用域的类型"></a>作用域的类型</h3><p>执行上下文环境有：全局、函数、eval。那么作用域也有三种，ES6新增了块级作用域。</p>
<ol>
<li>全局作用域</li>
<li>函数作用域</li>
<li>eval作用域（不推荐使用eval，暂时忽略）</li>
<li>块级作用域（ES6新增）</li>
</ol>
<h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>JavaScript中全局环境只有一个，对应的全局作用域也只有一个。没有用<code>var/let/const</code>声明的变量默认都会成为全局变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    a = 10;</div><div class="line">&#125;;</div><div class="line">foo();</div><div class="line">console.log(a);    // 10 变全局变量（意外由此发生）</div></pre></td></tr></table></figure>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>ES6之前，想要实现局部作用域的方式，都是是通过在函数中声明变量来实现的，所以也称函数作用域，支持嵌套多个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 20;</div><div class="line">function foo() &#123;</div><div class="line">    var a = 10;</div><div class="line">    console.log(a);    // 10;</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>函数中声明变量时，建议在函数起始部分声明所有变量，方便查看，切记要用<code>var/let/const</code>声明，防止手抖将局部变量变成成全局变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function getClient() &#123;</div><div class="line">    var name;</div><div class="line">    var phone;</div><div class="line">    var sex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>我们先来理解什么是块？所谓块，其实就是被大括号<code>{}</code>包裹的代码部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (true) &#123;</div><div class="line">    // 这里就是块了，也可称代码块</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6前没有块级作用域的概念，所以<code>{}</code>中并没有自己的作用域。如果我们想在ES5的环境下构建块级作用域，一般都是是通过立即执行函数来实现的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var name = &apos;任何名字&apos;;</div><div class="line">(function(window) &#123;</div><div class="line">    var name = &apos;以乐之名&apos;;</div><div class="line">    console.log(name);    // &apos;以乐之名&apos;</div><div class="line">&#125;(window));</div><div class="line">console.log(name);        // &apos;任何名字&apos;</div></pre></td></tr></table></figure>
<p>ES5借助函数作用域来实现块级作用域的方式，会让我们的代码充斥大量的立即执行函数(IIFE)，不便于代码的阅读。好的代码的就跟好的文章一样，让阅读的人读来舒畅明了。</p>
<p>为此，ES6新增块级作用域的概念，使用<code>let/const</code>声明变量的方式，即可将其作用域指定在代码块中，跟函数作用域一样支持嵌套。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let i = 0;</div><div class="line">for (let i = 0; i &lt; 10; i++)&#123;</div><div class="line">    console.log(i);</div><div class="line">&#125;</div><div class="line">i;    // 0</div></pre></td></tr></table></figure>
<p><code>let/const</code>不允许变量提升，必须<strong>“先声明再使用”</strong>。这种限制，称为<strong>“暂时性死区”</strong>。这也能让我们在代码编写阶段变得更加规范化，执行跟书写顺序保持一致。</p>
<h3 id="作用域链（变量查询规则）"><a href="#作用域链（变量查询规则）" class="headerlink" title="作用域链（变量查询规则）"></a>作用域链（变量查询规则）</h3><p>变量被作用域所管理，那么变量在作用域中的查找规则，就是所谓的作用域链。</p>
<blockquote>
<p>作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问</p>
<p>——《JavaScript高级程序涉及》</p>
</blockquote>
<p><strong>“在当前执行环境开始查找使用到的变量，如果找到，则返回其值。如果找不到，会逐层往上级（父作用域）查找，直到全局作用域”</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var money = 100;</div><div class="line">function foo() &#123;</div><div class="line">    function bar() &#123;</div><div class="line">        console.log(money);</div><div class="line">    &#125;</div><div class="line">    bar();</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gz1ofl53j30jg0ciaam.jpg" alt="作用域链上的变量查找"></p>
<h3 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h3><p>变量我们见的不少，但”自由变量”听着是不是挺唬人的。其实对它，我们并不陌生。</p>
<p><strong>“自由变量：当前执行环境使用到，但并未在当前执行环境声明的变量（函数参数arguments排除）”</strong></p>
<p>函数调用时，进入执行上下文创建阶段，会对<code>argument</code>进行隐式的变量声明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var outer = &apos;我是外面变量&apos;;</div><div class="line">function foo() &#123;</div><div class="line">    var inner = &apos;我是里面变量，不是自由变量&apos;;</div><div class="line">    console.log(outer);   </div><div class="line">    // 这里用到了outer，但outer并不在函数foo中声明，所以outer就是foo中的自由变量</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>“自由变量的作用域由词法环境决定，也就是它的作用域在代码书写阶段就已经确定了，而不是在代码编译执行阶段确定。”</strong></p>
<p><strong>“自由变量的值是在代码执行时确定的，变量变量变量，值肯定要变，所以自由变量的值只有在程序运行阶段才能确定。”</strong></p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>开篇第一文我们就执行环境，执行栈做出了详解，有所遗忘的可再温习。执行栈是我们理解闭包原理基础中的基础。</p>
<p>函数调用栈过程的图再晒出来，顺便温习下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function foo () &#123;</div><div class="line">    function bar () &#123;</div><div class="line">        return &apos;I am bar&apos;;</div><div class="line">    &#125;</div><div class="line">    return bar();</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g4gz1wphinj30qf09awf2.jpg" alt="正常出入栈过程"></p>
<p>函数调用时入栈，调用结束出栈。执行函数时，会创建一个变量对象去存储函数中的变量，方法，参数<code>arguments</code>等，结束调用时，该变量对象就会被销毁。(理想的情况下，不理想的情况就是出现<strong>“闭包”</strong>调用了)。</p>
<h4 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h4><blockquote>
<p>闭包是指有权访问另外一个函数作用域的变量的函数。</p>
<p>——《JavaScript高级程序设计》</p>
<p>闭包是指那些能够访问自由变量的函数。</p>
<p>——MDN</p>
</blockquote>
<p>闭包的特点首先是函数，其次是它可以访问到父级作用域的变量对象，即使父级函数完成调用后<strong>“理应出栈销毁”</strong>。</p>
<h4 id="判定闭包出现"><a href="#判定闭包出现" class="headerlink" title="判定闭包出现"></a>判定闭包出现</h4><ol>
<li>函数作为参数传递</li>
<li>函数作为返回值传递</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    var fooVal = &apos;2019&apos;;</div><div class="line">    var bar = function() &#123;</div><div class="line">        console.log(fooVal);    // bar中使用到了自由变量fooVal</div><div class="line">    &#125;</div><div class="line">    return bar;                 // 函数作为参数返回</div><div class="line">&#125;</div><div class="line"></div><div class="line">var getValue = foo();</div><div class="line">getValue();                     // 2019</div></pre></td></tr></table></figure>
<p>对函数中谁是闭包，各文档解释不一。在此我们遵照Chrome的方式，暂且称<code>foo</code>是闭包。</p>
<p>因为作用域和作用域链规则的限定，子环境的自由变量只能逐层向上到父环境查找。</p>
<p>但是通过闭包，我们在外部环境也可以获取到变量<code>fooVal</code>，虽然<code>foo()</code>函数执行完成了，但它并没从函数调用栈中销毁，其变量对象存储仍然能被访问到。</p>
<p>实际执行过程请看图：<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gz2hfs0vj30m80a2wf4.jpg" alt="存在闭包的出入栈过程"></p>
<p>把上述代码改以下，接着看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line"> var fooVal = &apos;2019&apos;;</div><div class="line"> var bar = function() &#123;</div><div class="line"> console.log(fooVal);     // bar中使用到了自由变量fooVal</div><div class="line"> &#125;</div><div class="line"> return bar;              // 函数作为参数返回</div><div class="line">&#125;</div><div class="line">var getValue = foo();</div><div class="line">var fooVal = &apos;2018&apos;;      // 这里的fooVal是全局作用域的变量</div><div class="line">getValue();               // 2019</div></pre></td></tr></table></figure></p>
<p>答案与结果不符的小伙伴要回头理解下自由变量了。<strong>“自由变量的作用域在代码书写时（函数创建时）就确定了”</strong>，所以函数中<code>getValue()</code>使用的<code>fooVal</code>在<code>foo</code>的作用域下，而不是在全局作用域下。</p>
<p>答对的小伙伴们再来一道题，加深你的记忆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function fn() &#123;</div><div class="line">    var max = 10;</div><div class="line">    function bar(x) &#123;</div><div class="line">        if (x &gt; max) &#123;    </div><div class="line">            console.log(x)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return bar;</div><div class="line">&#125;</div><div class="line">var f1 = fn();</div><div class="line">var max = 100;</div><div class="line"></div><div class="line">f1(20);                 // 输出20</div></pre></td></tr></table></figure>
<p>题目解析：<code>max</code>作为函数<code>bar</code>中的自由变量，它的作用域在函数<code>bar</code>创建的时候就确定了，就是函数<code>fn</code>中的<code>max</code>，所以它的作用域链查找到<code>fn</code>中已经结束并返回了，不会再向上找到全局作用域。</p>
<p><strong>注意：栈中存储的不只是闭包中使用到的自由变量，而是父级函数的整个变量对象（父级函数作用域中声明的方法，变量，参数等）</strong></p>
<h4 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h4><p>上文中已经阐述了闭包的特点，就是能够让我们跨作用域取值（不局限于父子作用域）。列举两个实际开放中常用的栗子：</p>
<ol>
<li><p>封装回调保存作用域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for(var i = 1; i &lt; 5; i++) &#123;</div><div class="line">    setTimeout((function(i)&#123;</div><div class="line">       return function() &#123;</div><div class="line">           console.log(i);        </div><div class="line">       &#125; </div><div class="line">    &#125;)(i), i * 1000)</div><div class="line">&#125;</div><div class="line">// 原理：通过自执行函数传参i，然后返回一个函数（闭包）中使用i，使父函数的变量对象一直存在</div></pre></td></tr></table></figure>
</li>
<li><p>私有变量和方法实现模块化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var makePeople = function () &#123;</div><div class="line">    var _name = &apos;以乐之名&apos;;</div><div class="line">    return &#123;</div><div class="line">        getName: function () &#123;</div><div class="line">            console.log(_name);</div><div class="line">        &#125;,</div><div class="line">        setName: function (name) &#123;</div><div class="line">            if (name != &apos;Hello world&apos;) &#123;</div><div class="line">                _name = name;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var me = makePeople();</div><div class="line">me.getName();                   // &apos;以乐之名&apos;</div><div class="line">me.setName(&apos;KenTsang&apos;);         </div><div class="line">me.getName();                   // &apos;KenTsang&apos;</div><div class="line"></div><div class="line">// 原理：私有变量_name没有对外访问权限，但通过闭包使其一直保留在内存中，可以被外部调用</div></pre></td></tr></table></figure>
</li>
</ol>
<p>闭包的应用场景还有很多，具体实际情况还需具体分析。</p>
<h4 id="闭包造成的内存泄露"><a href="#闭包造成的内存泄露" class="headerlink" title="闭包造成的内存泄露"></a>闭包造成的内存泄露</h4><p>闭包的使用，破坏了函数的出栈过程。解释执行栈的时候，讲到同个函数即使调用自身，创建的变量对象也并非同一个，其内存存储是各自独立的。</p>
<p>栈中只入不出，函数的变量对象没有被有效回收，就会造成浏览器内存占用逐步增加，内存占用过高的情况下，就会导致页面卡顿，甚至浏览器崩溃。这就是我们常说的闭包造成的<strong>“内存泄露”</strong>。</p>
<p>所以，一名合格的前端，除了会用闭包，还要正确的解除闭包引用。<br>垃圾回收机制讲解时，通过设置变量值为<code>null</code>时可已解除变量的引用，以便下一次垃圾回收销毁它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line"> var fooVal = &apos;2019&apos;;</div><div class="line"> var bar = function() &#123;</div><div class="line"> console.log(fooVal);     </div><div class="line"> &#125;</div><div class="line"> return bar;              </div><div class="line">&#125;</div><div class="line">var getValue = foo();</div><div class="line">var fooVal = &apos;2018&apos;;     </div><div class="line">getValue();</div><div class="line">getValue = null;         // 解除引用，下一次垃圾回收就会回收了</div></pre></td></tr></table></figure>
<hr>
<h3 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h3><p>闭包算是前端初学者的一个难点，能解释清楚并不容易，涉及到作用域，执行上下文环境、变量对象等等。</p>
<p>零散知识的内聚汇总，正是是系列更文的初衷所在。</p>
<p>知识不是小段子，听完笑过就忘，唯有形成体系，达成闭环，才能深植入记忆中。</p>
<hr>
<p>参考文档：</p>
<ul>
<li><a href="https://www.cnblogs.com/wangfupeng1988/p/3994065.html" target="_blank" rel="external">深入理解javascript原型和闭包</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（二）：栈、堆、队列、内存空间]]></title>
      <url>/2019/01/15/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%A0%88%E3%80%81%E5%A0%86%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>面试经常遇到的深浅拷贝，事件轮询，函数调用栈，闭包等容易出错的题目，究其原因，都是跟JavaScript基础知识不牢固有关，下层地基没打好，上层就是豆腐渣工程，新人小白，踏实踩土才是关键。</p>
<p>打地基第二篇：本篇我们将对JavaScript数据结构的知识点详解一二。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gymazis4j30m80goaac.jpg" alt="前端进击的巨人（二）：栈、堆、队列、内存空间"></p>
<p>JavaScript中有三种数据结构： 栈（stack) 、堆（heap)、 队列（queue)。</p>
<h3 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h3><p>栈的特点是<strong>“LIFO，即后进先出（Last in, first out）”</strong>。数据存储时只能从顶部逐个存入，取出时也需从顶部逐个取出。<a href="http://wuliv.com/2019/01/15/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%A0%88%EF%BC%8C%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/">《前端进击的巨人（一）：执行上下文与执行栈，变量对象》</a>中解释执行栈时，举了一个乒乓球盒子的例子，来演示栈的存取方式，这里再举个栗子搭积木。</p>
<p>举个栗子：乒乓球盒子/搭建积木<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gz01dvzyj30jg0famxv.jpg" alt="栈栗子：乒乓球盒子"></p>
<p><strong>JavaScript中Array数组模拟栈：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3, 4, 5];</div><div class="line"></div><div class="line">arr.push(6); // 存入数据 arr -&gt; [1, 2, 3, 4, 5, 6]</div><div class="line">arr.pop();   // 取出数据 arr -&gt; [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure></p>
<h3 id="堆（heap"><a href="#堆（heap" class="headerlink" title="堆（heap)"></a>堆（heap)</h3><p>堆的特点是<strong>“无序”</strong>的<code>key-value</code><strong>“键值对”</strong>存储方式。</p>
<p>举个栗子：书架存书<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gz08u7thj30d609k0t0.jpg" alt="堆栗子：书架"></p>
<p>我们想要在书架上找到想要的书，最直接的方式就是通过查找书名，书名就是我们的key。拿着这把key，就可以轻松检索到对应的书籍。</p>
<p><strong>“堆的存取方式跟顺序没有关系，不局限出入口”</strong>。</p>
<h3 id="队列-（queue"><a href="#队列-（queue" class="headerlink" title="队列 （queue)"></a>队列 （queue)</h3><p>队列的特点是是<strong>“FIFO，即先进先出（First in, first out）”</strong> 。<br>数据存取时<strong>“从队尾插入，从队头取出”</strong>。</p>
<p><strong>“与栈的区别：栈的存入取出都在顶部一个出入口，而队列分两个，一个出口，一个入口”</strong>。</p>
<p>举个栗子：排队取餐</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g4gz0mk3moj30jg07s74l.jpg" alt="队列栗子：排队取餐"></p>
<p><strong>JavaScript中Array数组模拟队列：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3, 4, 5];</div><div class="line"></div><div class="line">// 队尾in</div><div class="line">arr.push(6);    // 存入 arr -&gt; [1, 2, 3, 4, 5, 6]</div><div class="line">// 队头out</div><div class="line">arr.shift();    // 取出 arr -&gt; [2, 3, 4, 5, 6]</div></pre></td></tr></table></figure></p>
<h3 id="栈、堆、队列在JavaScript中的应用"><a href="#栈、堆、队列在JavaScript中的应用" class="headerlink" title="栈、堆、队列在JavaScript中的应用"></a>栈、堆、队列在JavaScript中的应用</h3><h4 id="1-代码运行方式（栈应用-函数调用栈）"><a href="#1-代码运行方式（栈应用-函数调用栈）" class="headerlink" title="1. 代码运行方式（栈应用/函数调用栈）"></a>1. 代码运行方式（栈应用/函数调用栈）</h4><p><a href="&#39;http://wuliv.com/2019/01/15/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%A0%88%EF%BC%8C%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/&#39;">《前端进击的巨人（一）：执行上下文与执行栈，变量对象》</a>详解了JavaScript运行时的函数调用过程，而其中执行栈（函数调用栈）就是用到栈的数据结构。</p>
<blockquote>
<p>JavaScript中函数的执行过程，其实就是一个入栈出栈的过程:</p>
<ol>
<li>当脚本要调用一个函数时，JS解析器把该函数推入栈中（push）并执行</li>
<li>当函数运行结束后，JS解释器将它从堆栈中推出（pop）</li>
</ol>
</blockquote>
<p>具体执行过程可翻阅上篇文章<a href="http://wuliv.com/2019/01/15/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%A0%88%EF%BC%8C%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/">《前端进击的巨人（一）：执行上下文与执行栈，变量对象》</a>，这里不再赘述。</p>
<h4 id="2-内存存储（栈、堆）"><a href="#2-内存存储（栈、堆）" class="headerlink" title="2. 内存存储（栈、堆）"></a>2. 内存存储（栈、堆）</h4><p>JavaScript中变量类型有两种：</p>
<ol>
<li>基础类型（<code>Undefined, Null, Boolean, Number, String, Symbol</code>）一共6种</li>
<li>引用类型（<code>Object</code>)</li>
</ol>
<p>基础类型的值保存在栈中，这些类型的值有固定大小，<strong>“按值来访问”</strong>；</p>
<p>引用类型的值保存在堆中，栈中存储的是引用类型的引用地址（地址指针），<strong>“按引用访问”</strong>，引用类型的值没有固定大小，可扩展（一个对象我们可以添加多个属性）。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g4gz0wr5s8j30fk0bhwet.jpg" alt="JS类型存储"></p>
<h4 id="3-事件轮询（队列）"><a href="#3-事件轮询（队列）" class="headerlink" title="3. 事件轮询（队列）"></a>3. 事件轮询（队列）</h4><p>JavaScript中事件轮询（Event Loop）的执行机制，就是采用队列的存取方式，因事件轮询（Event Loop）也是JS基础中的一个比较难理解的知识点，后续另开一篇章再作详细探究。</p>
<h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><p>将一个变量的值赋值给另一个变量，相当于在栈内存中创建了一个新的内存空间，然后从栈中复制值，存储到这个新空间中。对于基本类型，栈中存储的就是它自身的值，所以新内存空间存储的也是一个值。直接改变新变量的值，不会影响到旧变量的值，因为他们值存储的内存空间不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 基本类型复制变量</div><div class="line">var a = 10;</div><div class="line">var b = a;</div><div class="line">b = 20;</div><div class="line"></div><div class="line">a // 10</div><div class="line">b // 20</div></pre></td></tr></table></figure>
<p>而对于引用类型来说，同样是复制栈中存储的值。但是栈存储的只是其引用地址，其具体的值存储在堆中。变量复制仅复制栈中存储的值，不会复制堆中存储的值，所以新变量在栈中的值是一个地址指针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 引用类型复制变量</div><div class="line">var a = &#123; age: 27 &#125;;</div><div class="line">var b = a;</div><div class="line">b.age = 29;</div><div class="line"></div><div class="line">a.age == b.age; // 29</div></pre></td></tr></table></figure></p>
<p>可见，变量复制赋值，都属于栈存储拷贝，因此深浅拷贝可以这样区分分：</p>
<ul>
<li><strong>“浅拷贝：栈存储拷贝”</strong></li>
<li><strong>“深拷贝：栈堆存储拷贝”</strong></li>
</ul>
<p>深拷贝会同时开辟新的栈内存，堆内存空间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 利用JSON对象方法实现深拷贝</div><div class="line">var a = &#123; age: 27 &#125;;</div><div class="line">var b = JSON.parse(JSON.stringify(a));</div><div class="line">b.age = 29;</div><div class="line"></div><div class="line">a.age // 27</div><div class="line">b.age // 29</div></pre></td></tr></table></figure>
<h4 id="函数传参数是按值传递？按引用传递？"><a href="#函数传参数是按值传递？按引用传递？" class="headerlink" title="函数传参数是按值传递？按引用传递？"></a>函数传参数是按值传递？按引用传递？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line"> age: 27</div><div class="line">&#125;;</div><div class="line">function foo (person) &#123;</div><div class="line">  person.age = 29;</div><div class="line">&#125;</div><div class="line">foo(person);</div><div class="line">person.age // 29;</div></pre></td></tr></table></figure>
<p>函数调用时，会对参数赋值。而参数传递过程其实同样是变量复制的过程，所以它是按值传递。<code>var person = person</code>，因为传递参数是对象时，变量复制仅复制的栈存储（浅拷贝），所以修改对象属性会造成外部变量对象的修改。</p>
<p>至此，当我们理清栈、堆数据结构，以及JS中数据类型存取方式。深浅拷贝问题也就通顺了。</p>
<h3 id="内存空间管理"><a href="#内存空间管理" class="headerlink" title="内存空间管理"></a>内存空间管理</h3><p>JavaScript执行过程中内存分配：</p>
<ol>
<li>为变量对象分配需要的内存</li>
<li>在分配到的内存中进行<strong>读/写</strong>操作</li>
<li>不再使用时将其销毁，释放内存</li>
</ol>
<p>内存管理不善，会出现内存泄露，造成浏览器内存占用过多，页面卡顿等问题。（后续性能优化篇章续讲）</p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>JavaScript中有自动垃圾回收机制，会通过标记清除的算法识别哪些变量对象不再使用，对其进行销毁。开发者也可在代码中手动设置变量值为null（<code>a = null</code>）进行标记清除，让其失去引用，以便下一次垃圾回收时进行有效回收。</p>
<p>局部环境中，函数执行完成后，函数局部环境声明的变量不再需要时，就会被垃圾回收销毁（理想的情况下，闭包会阻止这一过程）。</p>
<p>全局环境只有页面退出时才会出栈，解除变量引用。所以开发者应尽量避免在全局环境中创建全局变量，如需使用，也要在不需要时手动标记清除，将其内存释放掉。</p>
<p>垃圾回收算法除了<strong>“标记清除”</strong>，还有一种<strong>“引用计数”</strong>，不常用，仅作了解。</p>
<hr>
<p>参考文档：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/11/stack.html" target="_blank" rel="external">stack的三种含义</a></li>
<li><a href="https://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="external">内存空间详细图解</a></li>
<li><a href="https://blog.csdn.net/xdd19910505/article/details/41900693" target="_blank" rel="external">JavaScript变量——栈内存or堆内存</a></li>
</ul>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端进击的巨人（一）：执行上下文与执行栈，变量对象]]></title>
      <url>/2019/01/15/%E5%89%8D%E7%AB%AF%E8%BF%9B%E5%87%BB%E7%9A%84%E5%B7%A8%E4%BA%BA%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%A0%88%EF%BC%8C%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h3><p>已经不敢自称前端小白，曾经吹过的牛逼总要一点点去实现。</p>
<p>正如前领导说的，自己喝酒吹过的牛皮，跪着都得含着泪去实现。</p>
<p>那么没有年终完美总结，来个新年莽撞开始可好。</p>
<p>进击巨人系列开篇，不忘初心，砥砺前行。</p>
<hr>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gytr3fyyj30go0ci0st.jpg" alt="前端进击的巨人（一）：执行上下文与执行栈，变量对象"></p>
<p>本文首发Github，期待Star！<br><a href="https://github.com/ZengLingYong/blog" target="_blank" rel="external">https://github.com/ZengLingYong/blog</a></p>
<h3 id="理解执行上下文"><a href="#理解执行上下文" class="headerlink" title="理解执行上下文"></a>理解执行上下文</h3><blockquote>
<p>执行上下文(Execution Context): 函数执行前进行的准备工作（也称执行上下文环境）</p>
</blockquote>
<p>运行JavaScript代码时，当代码执行进入一个环境时，就会为该环境创建一个执行上下文，它会在你运行代码前做一些准备工作，如确定作用域，创建局部变量对象等。</p>
<p>具体做了什么先按下不表，先来看下JavaScript执行环境有哪些？</p>
<h4 id="JavaScript中执行环境"><a href="#JavaScript中执行环境" class="headerlink" title="JavaScript中执行环境"></a>JavaScript中执行环境</h4><ol>
<li>全局环境</li>
<li>函数环境</li>
<li>eval函数环境 （已不推荐使用）</li>
</ol>
<p>那么与之对应的执行上下文类型同样有3种：</p>
<h4 id="执行上下文的类型"><a href="#执行上下文的类型" class="headerlink" title="执行上下文的类型"></a>执行上下文的类型</h4><ol>
<li>全局执行上下文</li>
<li>函数执行上下文</li>
<li>eval函数执行上下文</li>
</ol>
<p>JavaScript运行时首先会进入全局环境，对应会生成全局上下文。程序代码中基本都会存在函数，那么调用函数，就会进入函数执行环境，对应就会生成该函数的执行上下文。</p>
<p>先插播一个知识点：<strong>“JS是单线程”</strong>! <strong>“单线程”</strong>! <strong>“单线程”</strong>!</p>
<p>简单理解下单线程，就是同个时间段只能做一件任务，完成之后才可以继续下一个任务。正如女朋友只有一个，各位面向对象的小伙伴们你们说对不对？有女票的必须说没毛病。</p>
<p>既然是这样，必须要有一个排队机制，不然就会出现几个流氓霸着车道不让过，”还有王法么？”</p>
<h3 id="JS中管理多个执行上下文"><a href="#JS中管理多个执行上下文" class="headerlink" title="JS中管理多个执行上下文"></a>JS中管理多个执行上下文</h3><p>函数编程中，代码中会声明多个函数，对应的执行上下文也会存在多个。在JavaScript中，通过栈的存取方式来管理执行上下文，我们可称其为执行栈，或函数调用栈(Call Stack)。</p>
<p>在说明执行栈前，先来补下<strong>“栈数据结构”</strong>知识点。</p>
<h3 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gysjrqymj30jg0famxv.jpg" alt="乒乓球盒子理解栈存储"><br>借助前端大神的例子，用乒乓球盒子来理解栈的存取方式。（这个例子让我彻底记住了栈数据结构）</p>
<p>栈遵循<strong>“先进后出，后进先出”</strong>的规则，或称<strong>LIFO</strong> (“Last In First Out”) 规则。</p>
<p>如图所示，我们只能从栈顶取出或放入乒乓球，最先放进盒子的总是最后才能取出。<br>栈中<strong>“放入/取出”</strong>，也可称为<strong>“入栈/出栈”</strong>。</p>
<p>总结栈数据结构的特点：</p>
<ol>
<li>后进先出，先进后出</li>
<li>出口在顶部，且仅有一个</li>
</ol>
<h3 id="执行栈（函数调用栈）"><a href="#执行栈（函数调用栈）" class="headerlink" title="执行栈（函数调用栈）"></a>执行栈（函数调用栈）</h3><p>理解完栈的存取方式，我们接着分析JavaScript中如何通过栈来管理多个执行上下文。</p>
<p>程序执行进入一个执行环境时，它的执行上下文就会被创建，并被推入执行栈中(入栈)；<br>程序执行完成时，它的执行上下文就会被销毁，并从栈顶被推出(出栈)，控制权交由下一个执行上下文。</p>
<p>因为JS执行中最先进入全局环境，所以处于<strong>“栈底的永远是全局环境的执行上下文”</strong>。而处于<strong>“栈顶的是当前正在执行函数的执行上下文”</strong>，当函数调用完成后，它就会从栈顶被推出（理想的情况下，闭包会阻止该操作，闭包后续文章深入详解）。</p>
<p><strong>“全局环境只有一个，对应的全局执行上下文也只有一个，只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底”</strong></p>
<p>文字太多不如上代码系列 ——》代码 + 图，一览无遗：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function foo () &#123;</div><div class="line">    function bar () &#123;</div><div class="line">        return &apos;I am bar&apos;;</div><div class="line">    &#125;</div><div class="line">    return bar();</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gytbo7afj30r109ldgf.jpg" alt="出入栈过程"></p>
<h3 id="执行上下文的生命周期"><a href="#执行上下文的生命周期" class="headerlink" title="执行上下文的生命周期"></a>执行上下文的生命周期</h3><p>执行上下文的生命周期有两个阶段：</p>
<ol>
<li><p>创建阶段（<strong>进入</strong>执行上下文）</p>
</li>
<li><p>执行阶段（代码<strong>执行</strong>）</p>
</li>
</ol>
<p>创建阶段：函数被调用时，进入函数环境，为其创建一个执行上下文，此时进入创建阶段</p>
<p>执行阶段：执行函数中代码时，此时执行上下文进入执行阶段</p>
<h4 id="创建阶段的操作"><a href="#创建阶段的操作" class="headerlink" title="创建阶段的操作"></a>创建阶段的操作</h4><ol>
<li>创建变量对象<ul>
<li>函数环境会初始化创建<code>Arguments</code>对象（<strong>并赋值</strong>）</li>
<li>函数声明（<strong>并赋值</strong>）</li>
<li>变量声明，函数表达式声明（<strong>未赋值</strong>）</li>
</ul>
</li>
<li>确定this指向（<strong>this由调用者确定</strong>）</li>
<li>确定作用域（<strong>词法环境决定，哪里声明定义，就在哪里确定</strong>）</li>
</ol>
<h4 id="执行阶段的操作"><a href="#执行阶段的操作" class="headerlink" title="执行阶段的操作"></a>执行阶段的操作</h4><ol>
<li>变量对象赋值<ul>
<li>变量赋值</li>
<li>函数表达式赋值</li>
</ul>
</li>
<li>调用函数</li>
<li>顺序执行其它代码</li>
</ol>
<p>看到这里，我们不经会问变量对象是什么鬼，它与代码中常见的函数声明，变量声明有神马关系？？？</p>
<h4 id="变量对象和活动对象的区别："><a href="#变量对象和活动对象的区别：" class="headerlink" title="变量对象和活动对象的区别："></a>变量对象和活动对象的区别：</h4><p>当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象(AO)，这时候活动对象上的各种属性才能被访问。</p>
<p><strong>“创建阶段对函数声明做赋值，变量及函数表达式仅做声明，真正的赋值操作要等到执行上下文代码执行阶段”</strong>。</p>
<p>代码例子1：变量提升<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a);         <span class="comment">// 输出undefined</span></div><div class="line">  <span class="keyword">var</span> a = <span class="string">'I am here'</span>;    <span class="comment">// 赋值</span></div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"></div><div class="line"><span class="comment">// 实际执行过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a;                <span class="comment">// 变量声明，var初始化undefined</span></div><div class="line">  <span class="built_in">console</span>.log(a); </div><div class="line">  a = <span class="string">'I am here'</span>;     <span class="comment">// 变量重新赋值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码例子2：函数声明优先级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    console.log(bar);</div><div class="line">    var bar = 20;</div><div class="line">    function bar() &#123;</div><div class="line">      return 10;</div><div class="line">    &#125;</div><div class="line">    var bar = function() &#123;</div><div class="line">        return 30;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foo();  // 输出bar()整个函数声明</div></pre></td></tr></table></figure></p>
<h4 id="函数声明，变量声明，函数表达式的优先级"><a href="#函数声明，变量声明，函数表达式的优先级" class="headerlink" title="函数声明，变量声明，函数表达式的优先级"></a>函数声明，变量声明，函数表达式的优先级</h4><ol>
<li>函数声明，如果有同名属性，会替换掉</li>
<li>变量，函数表达式</li>
<li>函数声明优先 &gt; 变量，函数表达式</li>
</ol>
<h3 id="执行上下文的数量限制（堆栈溢出）"><a href="#执行上下文的数量限制（堆栈溢出）" class="headerlink" title="执行上下文的数量限制（堆栈溢出）"></a>执行上下文的数量限制（堆栈溢出）</h3><p>执行上下文可存在多个，虽然没有明确的数量限制，但如果超出栈分配的空间，会造成堆栈溢出。常见于递归调用，没有终止条件造成死循环的场景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 递归调用自身</div><div class="line">function foo() &#123;</div><div class="line">  foo();</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"></div><div class="line">// 报错： Uncaught RangeError: Maximum call stack size exceeded</div></pre></td></tr></table></figure>
<h3 id="文末总结"><a href="#文末总结" class="headerlink" title="文末总结"></a>文末总结</h3><ol>
<li>JavaScript是单线程</li>
<li>栈顶的执行上下文处于执行中，其它需要排队</li>
<li>全局上下文只有一个处于栈底，页面关闭时出栈</li>
<li>函数执行上下文可存在多个，但应避免递归时堆栈溢出</li>
<li>函数调用时就会创建新的上下文，即使调用自身，也会创建不同的执行上下文</li>
</ol>
<hr>
<p>参考文档：</p>
<ul>
<li><a href="https://www.jianshu.com/p/a6d37c77e8db" target="_blank" rel="external">执行上下文详细图解</a></li>
<li><a href="https://github.com/yygmind/blog/issues/12" target="_blank" rel="external">理解JavaScript 中的执行上下文和执行栈</a></li>
<li><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="external">这一次，彻底弄懂 JavaScript 执行机制</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端进击的巨人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(06) - 语法基础 - JavaScript高级程序设计]]></title>
      <url>/2018/12/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-06-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gyeakgyqj30go0b4t96.jpg" alt="语法基础"></p>
<h4 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h4><p>本篇是小红书笔记的第六篇，也许你会奇怪第六篇笔记才写语法基础，笔者是不是穿越了。</p>
<p>答案当然是没有，笔者在此分享自己的阅读心得，不少人翻书都是从头开始，结果永远就只在前几章。<br>对此，笔者换了随机阅读的方式，哪章感兴趣了或者想补知识点，再去翻阅对应的章节。当然目录还是要翻的。</p>
<p>工作生活节奏太快，知识太多，时间与知识的增长成反比，求全不如求专，也许不能看完全书，但至少掌握所需知识点。</p>
<hr>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gyer1zodj30yg0mxdhk.jpg" alt="语法基础"></p>
<p>思维导图是个好东西，一图流。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ol>
<li>由字母，下划线<code>_</code>，美元符号<code>$</code>，数字组成</li>
<li>第一个字符不能是数字</li>
<li>注意不要使用关键字作标识符</li>
<li>对象属性[]号写法可不遵循标识符规则 <code>obj[123] = 123</code></li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型共有10个，ES5有7个，3个为ES6新增<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">number/boolean/string/<span class="literal">undefined</span>/object/<span class="literal">null</span>/<span class="function"><span class="keyword">function</span>/<span class="title">symbol</span>/<span class="title">set</span>/<span class="title">map</span></span></div></pre></td></tr></table></figure></p>
<ol>
<li>判断类型可用<code>typeof</code></li>
<li>判断对象为何种引用类型可用<code>instanceof</code></li>
</ol>
<h4 id="undefined与null"><a href="#undefined与null" class="headerlink" title="undefined与null"></a>undefined与null</h4><ol>
<li><code>undefined</code> (使用var声明但未初始化)</li>
<li><code>null</code> (空对象指针)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>NaN表示本来应返回一个数值，结果未正确返回</p>
<ol>
<li><code>NaN</code>不等于任何值，且不等于自身</li>
<li>用<code>isNaN()</code>可判断是否为<code>NaN</code></li>
</ol>
<h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><h4 id="Number-转型函数"><a href="#Number-转型函数" class="headerlink" title="Number() 转型函数"></a>Number() 转型函数</h4><table>
<thead>
<tr>
<th>参数值</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>1</td>
</tr>
<tr>
<td>false</td>
<td>0</td>
</tr>
<tr>
<td>null</td>
<td>0</td>
</tr>
<tr>
<td>undefined</td>
<td>NaN</td>
</tr>
<tr>
<td>‘’</td>
<td>0</td>
</tr>
<tr>
<td>‘168’</td>
<td>168</td>
</tr>
<tr>
<td>‘168hello’</td>
<td>NaN</td>
</tr>
<tr>
<td>‘hello’</td>
<td>NaN</td>
</tr>
</tbody>
</table>
<p>TIPS：参数值为一个对象，则先调用<code>valueOf()</code>, 没有再调用<code>toString()</code>, 然后遵循上述规则</p>
<h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h4><ol>
<li>第一个参数为转换的值</li>
<li>第二个参数为转换的进制</li>
<li>会尝试解析字符串前面的数字（不同于<code>Number()</code>)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parseInt(&apos;168hello&apos;) -&gt; 168</div></pre></td></tr></table></figure>
<h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h4><ol>
<li>第一个小数点有效，忽略后面小数点的解析</li>
<li>会尝试解析字符串前面的数字</li>
<li>忽略前导0，只支持10进制，没有第二个参数 (不同于<code>parseInt()</code>)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parseFloat(&apos;520.13.14&apos;) -&gt; 520.14</div></pre></td></tr></table></figure>
<h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h4><ol>
<li>大多数数据类型拥有<code>toString()</code>方法，可在参数中指定转换进制</li>
<li><code>null/undefined</code> 没有<code>toString()</code>方法</li>
</ol>
<h4 id="String-转型函数"><a href="#String-转型函数" class="headerlink" title="String() 转型函数"></a>String() 转型函数</h4><ol>
<li>如果参数值有<code>toString()</code>方法，则调用<code>toString()</code>方法</li>
<li><code>null</code> 转为 <code>&quot;null&quot;</code></li>
<li><code>undefined</code> 转为 <code>&quot;undefined&quot;</code></li>
</ol>
<h3 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h3><ol>
<li>不支持重载</li>
<li>后定义的函数会覆盖之前</li>
<li>参数数组对象：<code>arguments</code></li>
</ol>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ol>
<li><code>if...else...</code></li>
<li><code>do...while...</code> 后测试循环，不同于while/for前测试循环</li>
<li><code>while</code></li>
<li><code>for</code></li>
<li><code>for...in...</code> 遍历对象属性</li>
<li><code>label</code> 与 <code>break/continue</code> 合用</li>
<li><code>switch...case...</code> case 全等判断</li>
<li><code>with</code> 将代码作用域设置到特定的对象中</li>
</ol>
<h4 id="switch…case"><a href="#switch…case" class="headerlink" title="switch…case"></a>switch…case</h4><ol>
<li><code>case</code> 判断时是全等判断，不会进行类型转换</li>
<li><code>case</code> 值不一定是常量，可以是变量，甚至是表达式</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">case &apos;hello&apos; + &apos;word&apos;;</div><div class="line">case num &lt; 10;</div></pre></td></tr></table></figure>
<h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><p>label语句允许在代码中添加标签，<code>label</code>与<code>break/continue</code>联合使用，可返回代码指定位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var num = 0;</div><div class="line"></div><div class="line">outermost:</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">    for (var j = 0; j &lt; 10; j++) &#123;</div><div class="line">        if ( i== 5 &amp;&amp; j == 5) &#123;</div><div class="line">            break outermost;    </div><div class="line">            // 退出循环（因为outermost定义的位置在最外层)</div><div class="line">            // 普通的break只能跳出一层循环</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><p>with语句的作用是将代码的作用域设置到一个特定的对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// window.location 对象为例子</div><div class="line">with(location) &#123;</div><div class="line">    var url = href; // location.href</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ol>
<li>一元操作符</li>
<li>布尔运算符</li>
<li>算数运算符</li>
<li>关系运算符</li>
<li>条件运算符</li>
<li>赋值预算符</li>
<li>逗号运算符</li>
</ol>
<h4 id="一元操作"><a href="#一元操作" class="headerlink" title="一元操作"></a>一元操作</h4><p>一元操作符指的是只能操作一个值的操作符</p>
<ol>
<li>递增<code>++</code></li>
<li>递减<code>--</code></li>
<li>后置：语句被求值后执行自身赋值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = 2;</div><div class="line">var b = 20;</div><div class="line">var c = a-- + 20;   // 后置运算 c: 22, a: 1</div></pre></td></tr></table></figure>
<h4 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h4><h5 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非!"></a>逻辑非<code>!</code></h5><p><code>!!</code> 功能等于 Boolean() 转型函数</p>
<h5 id="逻辑与-amp-amp"><a href="#逻辑与-amp-amp" class="headerlink" title="逻辑与 &amp;&amp;"></a>逻辑与 <code>&amp;&amp;</code></h5><ol>
<li>第一参数是对象，返回第二个参数</li>
<li>第一个参数为null/NaN/undefined, 则直接返回第一个参数</li>
</ol>
<h5 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或 ||"></a>逻辑或 <code>||</code></h5><p>规则与逻辑与相同，不同的是只要第一个参数成立则不会进行后续运算</p>
<p><strong>TIPS：逻辑与或都属于短路运算，并不一定返回true/false，参数未声明可能会报错或赋值不成功</strong></p>
<h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+, -, *, /, %</div></pre></td></tr></table></figure>
<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;, &gt;, &lt;=, &gt;=, ==, ===, !=, !===</div></pre></td></tr></table></figure>
<ol>
<li>两个参数都是数值，进行值比较</li>
<li>两个参数都是字符串，进行字符编码比较（大写字母的字符编码小于小写字母)</li>
<li>一个参数是数值，则转为数值比较</li>
<li>一个参数是对象，则先调用其<code>valueOf()</code>，没有<code>valueOf()</code>再调用<code>toString()</code></li>
<li><code>===</code> 全等会进行值与类型的比较</li>
<li><code>null == undefined // true</code></li>
</ol>
<h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>三元表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var score = 90;</div><div class="line">var achie = score &gt; 90 ? &apos;优秀&apos; : &apos;再接再厉&apos;;</div></pre></td></tr></table></figure></p>
<h4 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h4><p>逗号操作符可以在一条语句执行多个操作，常用于变量初始化</p>
<p><strong>TIPS: 用于赋值时，逗号操作符会返回表达式最后一项的值</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var name = &apos;KenTsang&apos;, age = 28, job = &apos;Developer&apos;;</div></pre></td></tr></table></figure>
<hr>
<p>详解逗号表达式，可移步笔者的文章:<a href="http://wuliv.com/2018/04/09/%E4%B8%80%E9%81%93JS%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/">《一道JS面试题引发的血案》</a>。</p>
<p><code>if-else/switch-case/?:/&amp;&amp;/||</code>可移步笔者的文章: <a href="http://wuliv.com/2018/07/14/JS-%E4%B8%AD-if-if-else-%E6%9B%BF%E6%8D%A2%E6%96%B9%E5%BC%8F/">《JS中 if/ if…else替换方式》</a></p>
<hr>
<p>参考文档</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim 利剑常磨，见血封喉]]></title>
      <url>/2018/12/25/Vim-%E5%88%A9%E5%89%91%E5%B8%B8%E7%A3%A8%EF%BC%8C%E8%A7%81%E8%A1%80%E5%B0%81%E5%96%89/</url>
      <content type="html"><![CDATA[<p>年底了，故事总是会有很多。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g4gyjdj401j30dw0b4mxd.jpg" alt="Vim 利剑常磨，见血封喉"></p>
<p>刚了一波通宵加班，趁着有时间，过了一遍Vim教程，顺便汇总下常用命令。</p>
<p>对于以 OSX / Linux为开发环境的伙伴们，应该并不陌生。因其轻便，扩展性，可定制化，一直很受开发者追捧。高阶大神，袖中必有深藏。</p>
<p>Vim编辑器简洁易用，在终端上可用来快速查看修改文档。虽然与其他编辑器如WebStrom, VScode相比，功能扩展相对欠缺，对新手朋友不太友好。但胜在多数Linux系统已附带，开箱即用，终端直接使用，无需再多开一个应用窗口。</p>
<p>作为一名前端开发工程师，如果你想秀操作用Vim来写HTML/CSS/JavaScript，我只想说一句，“小伙子，你很6啊！”。</p>
<p>Vim学习的过程不是两三天即可入境，懒惰如笔者，几天不敲，命令忘了七八。时不时还得翻出来看看，至今仍以新手自居。</p>
<h4 id="前言-vi-vim的区别"><a href="#前言-vi-vim的区别" class="headerlink" title="前言 vi/vim的区别"></a>前言 vi/vim的区别</h4><p>vim 是 vi 的升级版本，它不仅兼容vi的所有指令，还有新增了一些新的特性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi filename</div><div class="line">vim filename</div><div class="line">// 两者同样的功能，能少敲一个字母，所以我们就用vi吧</div></pre></td></tr></table></figure></p>
<p>“工具总须多磨，方才用的趁手。”</p>
<p>Mac 终端键入 <code>vimtutor</code> 即可进入Vim入门教程，30分钟足以让你应对Vim日常操作。</p>
<h4 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>删除光标下的字符</td>
</tr>
<tr>
<td>X</td>
<td>删除光标左边的字符</td>
</tr>
<tr>
<td>s</td>
<td>修改一个字符(与r的区别，修改后直接进入Insert模式)</td>
</tr>
<tr>
<td>i</td>
<td>光标前插入字符</td>
</tr>
<tr>
<td>a</td>
<td>光标后插入字符</td>
</tr>
<tr>
<td>A</td>
<td>行尾插入字符</td>
</tr>
<tr>
<td>o</td>
<td>光标下方新建一行并进入Insert模式</td>
</tr>
<tr>
<td>O (字母)</td>
<td>光标上方新建一行并进入Insert模式</td>
</tr>
<tr>
<td>r</td>
<td>替换字符(单个)</td>
</tr>
<tr>
<td>R</td>
<td>替换字符(多个)</td>
</tr>
<tr>
<td>cw</td>
<td>替换文本直到单词末尾(ce也可)</td>
</tr>
<tr>
<td>c$</td>
<td>替换文本直到行尾</td>
</tr>
<tr>
<td>dw</td>
<td>删除单词 (de, d2w)</td>
</tr>
<tr>
<td>d$</td>
<td>删除到行尾</td>
</tr>
<tr>
<td>D</td>
<td>删除到行尾</td>
</tr>
<tr>
<td>S</td>
<td>删除到行为，并进入Insert模式</td>
</tr>
<tr>
<td>dd</td>
<td>删除整行</td>
</tr>
<tr>
<td>y</td>
<td>复制</td>
</tr>
<tr>
<td>yy</td>
<td>复制整行 （yw, ye)</td>
</tr>
<tr>
<td>p</td>
<td>粘贴到光标之后</td>
</tr>
<tr>
<td>P</td>
<td>粘贴到光标之前</td>
</tr>
<tr>
<td>u</td>
<td>撤销</td>
</tr>
<tr>
<td>.</td>
<td>重复上一次操作</td>
</tr>
<tr>
<td>:!</td>
<td>执行外部名 (:!dir/:ls)</td>
</tr>
<tr>
<td>%</td>
<td>查找配对的括号 ), }, ]</td>
</tr>
<tr>
<td>v motion :w</td>
<td>选择性保存</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>查看可能的补全</td>
</tr>
</tbody>
</table>
<h4 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>h</td>
<td>左</td>
</tr>
<tr>
<td>l</td>
<td>右</td>
</tr>
<tr>
<td>k</td>
<td>上</td>
</tr>
<tr>
<td>j</td>
<td>下</td>
</tr>
<tr>
<td>0 (数字)</td>
<td>行首</td>
</tr>
<tr>
<td>$</td>
<td>行尾</td>
</tr>
<tr>
<td>w</td>
<td>下一个单词起始处</td>
</tr>
<tr>
<td>nw (2w)</td>
<td>n可为数字，表示移动两个单词</td>
</tr>
<tr>
<td>e</td>
<td>单词末尾（与w的区别）</td>
</tr>
<tr>
<td>gg</td>
<td>文件起始处</td>
</tr>
<tr>
<td>G</td>
<td>文件末尾处</td>
</tr>
</tbody>
</table>
<h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>:wq</td>
<td>保存并退出</td>
</tr>
<tr>
<td>ZZ</td>
<td>保存并退出</td>
</tr>
<tr>
<td>:q!</td>
<td>丢弃修改并退出 (q退出，有修改的话q不能退出)</td>
</tr>
<tr>
<td>:e!</td>
<td>丢弃修改并打开原文件</td>
</tr>
</tbody>
</table>
<h4 id="查找并替换"><a href="#查找并替换" class="headerlink" title="查找并替换"></a>查找并替换</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>:s/old/new/g</td>
<td>查找old并替换为new，g代表整行匹配</td>
</tr>
<tr>
<td>:#, #s/old/new</td>
<td>#, #代表首尾行号</td>
</tr>
<tr>
<td>:%s/old/new/g</td>
<td>全文匹配替换</td>
</tr>
<tr>
<td>:%s/old/new/gc</td>
<td>全文匹配替换，并每次替换会弹出确认提示</td>
</tr>
</tbody>
</table>
<h4 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + e</td>
<td>向下滚动一行</td>
</tr>
<tr>
<td>Ctrl + y</td>
<td>向上滚动一行</td>
</tr>
<tr>
<td>Ctrl + f</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>Ctrl + b</td>
<td>向上翻一页</td>
</tr>
<tr>
<td>Ctrl + u</td>
<td>向上翻半页</td>
</tr>
<tr>
<td>Ctrl + d</td>
<td>向下翻半页</td>
</tr>
</tbody>
</table>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>:e + filename</td>
<td>打开新文件</td>
</tr>
<tr>
<td>:r + filename</td>
<td>读取文件并插入到当前文件</td>
</tr>
</tbody>
</table>
<h4 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>:set ic</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>:set is</td>
<td>部分匹配（like)</td>
</tr>
<tr>
<td>:set hls</td>
<td>高亮匹配</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
</tbody>
</table>
<h4 id="分屏启动vim"><a href="#分屏启动vim" class="headerlink" title="分屏启动vim"></a>分屏启动vim</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>vim -on file1 file2…</td>
<td>水平分屏</td>
</tr>
<tr>
<td>vim -On file1 file2…</td>
<td>垂直分屏</td>
</tr>
</tbody>
</table>
<h4 id="关闭分屏"><a href="#关闭分屏" class="headerlink" title="关闭分屏"></a>关闭分屏</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + w  c</td>
<td>关闭当前窗口（如果是最后一个，无法关闭）</td>
</tr>
<tr>
<td>Ctrl + w q</td>
<td>关闭当前窗口（如果是最后一个，则退出vim)</td>
</tr>
</tbody>
</table>
<h4 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + w s</td>
<td>上下分屏</td>
</tr>
<tr>
<td>Ctrl + w v</td>
<td>左右分屏</td>
</tr>
<tr>
<td>:sp filename</td>
<td>左右分屏，且打开一个新的文件</td>
</tr>
<tr>
<td>:vsp filename</td>
<td>上下分屏，且打开一个新的文件</td>
</tr>
</tbody>
</table>
<h4 id="切换分屏（光标切换）"><a href="#切换分屏（光标切换）" class="headerlink" title="切换分屏（光标切换）"></a>切换分屏（光标切换）</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + w l</td>
<td>右边</td>
</tr>
<tr>
<td>Ctrl + w h</td>
<td>左边</td>
</tr>
<tr>
<td>Ctrl + w j</td>
<td>上边</td>
</tr>
<tr>
<td>Ctrl + w k</td>
<td>下边</td>
</tr>
</tbody>
</table>
<h4 id="分屏尺寸调整"><a href="#分屏尺寸调整" class="headerlink" title="分屏尺寸调整"></a>分屏尺寸调整</h4><p><em>TIPS: (上下分屏生效)</em></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + w =</td>
<td>所有屏一样高度</td>
</tr>
<tr>
<td>Ctrl + w +</td>
<td>增加高度</td>
</tr>
<tr>
<td>Ctrl + w -</td>
<td>减少高度</td>
</tr>
</tbody>
</table>
<h4 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h4><p>这么多命令要记，想对Vim说喜欢真不容易，按耐不住就新开VScode。<br>少年莫慌，很多事情，难在开头，当你学会了，才会感谢当初的付出。</p>
<p>本文仅对常用的一些命令做了汇总，Vim的玩法还有很多。在此推荐易水博客的<a href="https://blog.easwy.com/archives/advanced-vim-skills-catalog/" target="_blank" rel="external">《Vim使用进阶》</a>系列，干货满满。</p>
<p>寒梅飘香，这个寒冬，与诸君互勉。</p>
<hr>
<p>参考文档：</p>
<ul>
<li><a href="https://www.cnblogs.com/KiraEXA/p/5994078.html" target="_blank" rel="external">vi和vim的区别</a></li>
<li><a href="https://www.cnblogs.com/yangjig/p/6014198.html" target="_blank" rel="external">vim常用命令总结</a></li>
<li><a href="https://blog.easwy.com/archives/advanced-vim-skills-catalog/" target="_blank" rel="external">vi/vim使用进阶</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 工具类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具类 </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(05) - 事件 - JavaScript高级程序设计]]></title>
      <url>/2018/12/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-05-%E4%BA%8B%E4%BB%B6-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gyjz3yl6j30dv0b40su.jpg" alt="coding"></p>
<p>HTML依托于JavaScript来实现用户与WEB网页之间的动态交互，接收用户操作并做出相应的反馈，而事件在此间则充当桥梁的重要角色。</p>
<p>日常开发中，经常会为某个元素绑定一个事件，编写相应的业务逻辑，在元素被点击时执行，并反馈到用户操作界面。</p>
<p>这个过程中，事件就像一个侦听器，当点击动作发生时，才会执行对应的程序。这种模式可称之为观察员模式。</p>
<p>接下来就讲讲DOM事件相关知识。</p>
<h3 id="何为事件"><a href="#何为事件" class="headerlink" title="何为事件"></a>何为事件</h3><blockquote>
<p>事件就是用户或浏览器自身执行的某种动作</p>
</blockquote>
<p>常用的DOM事件有<code>click/mouseover/mouseout/keyup/keydown</code>等。</p>
<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><blockquote>
<p>事件流描述的是从页面中接收事件的顺序</p>
</blockquote>
<p>HTML描述的是一个DOM文档结构，而事件流所描述的是DOM文档节点接收事件顺序。</p>
<p>而事件流有两种事件模式，<strong>捕获/冒泡</strong>，两者所描述的事件传递顺序对立相反。</p>
<h4 id="事件模式：捕获与冒泡"><a href="#事件模式：捕获与冒泡" class="headerlink" title="事件模式：捕获与冒泡"></a>事件模式：捕获与冒泡</h4><h5 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h5><blockquote>
<p>事件冒泡：事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）</p>
</blockquote>
<p>规范要求事件冒泡到<code>document</code>对象，而浏览器则会将事件一直冒泡到<code>window</code>对象。</p>
<p>所有浏览器都支持事件冒泡（包括IE9以下）。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gyugpxwij30bq0bat8w.jpg" alt="事件冒泡"></p>
<h5 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h5><blockquote>
<p>事件捕获：（与事件冒泡相反）事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件</p>
</blockquote>
<p>与冒泡一样，虽然规定事件应该从<code>document</code>对象开始传播，但浏览器普遍都是从<code>window</code>对象开始捕获。</p>
<p><strong>IE9以下不支持事件捕获</strong></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyuofi8nj30bw0bwt8x.jpg" alt="事件捕获"></p>
<h4 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h4><blockquote>
<p>“DOM2级事件”规定事件流包括三个阶段，顺序进行</p>
<ol>
<li>事件捕获阶段</li>
</ol>
<ol>
<li>处于目标阶段</li>
</ol>
<ol>
<li>事件冒泡阶段</li>
</ol>
</blockquote>
<p>TIPS: 实际的目标元素在捕获阶段不会接收到事件，在处于目标阶段时接收事件发生处理，并被看成是冒泡阶段的一部分。</p>
<p>尽管”DOM2级事件”规范明确要求捕获阶段不会涉及事件目标，但浏览器会在捕获阶段触发事件对象上的事件。</p>
<h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><blockquote>
<p>响应某个事件的函数方法，我们称之为事件处理程序（或事件侦听器）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">window.onclick = function() &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">// 这里的function()&#123;&#125;就是事件处理程序</div></pre></td></tr></table></figure>
<h4 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h4><p>HTML中元素支持的事件，可以使用一个同名的HTML特性来指定，而这个特性的值就是js能执行的代码或表达式。写法上可以看出类似HTML中<code>id/type/class</code>等属性的写法，都是<code>on+&#39;...&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>缺点：HTML是结构层（显示层），而JavaScript是行为层（业务层）。在显示层上去编写业务逻辑代码处理，会使得HTML与JavaScript代码耦合过于紧密，不好维护。</p>
<p>DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。</p>
<p>而<strong>DOM事件分为3个级别：DOM 0级事件处理程序，DOM 2级事件处理程序和DOM 3级事件处理程序</strong>。DOM 1级中没有规范事件的相关内容，所以没有DOM 1级事件处理。</p>
<h4 id="DOM0-级事件处理程序"><a href="#DOM0-级事件处理程序" class="headerlink" title="DOM0 级事件处理程序"></a>DOM0 级事件处理程序</h4><p>每个元素(HTML元素)都有自己的事件处理程序属性，属性名通常以on开头，例如<code>onclick/onmouseover</code>。为这个属性的值设置一个函数，就可以指定事件处理程序。而将其属性值赋值为null，则完成解绑。(<strong>同个元素无法绑定多个同名事件</strong>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var myBtn = document.getElementById(&apos;myBtn&apos;);</div><div class="line"></div><div class="line">// 为myBtn绑定事件处理程序, 只能绑定一个</div><div class="line">myBtn.onclick = function() &#123;</div><div class="line">    alert(&apos;Hello world!&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.onclick = null;</div></pre></td></tr></table></figure>
<h4 id="DOM2-级事件处理程序"><a href="#DOM2-级事件处理程序" class="headerlink" title="DOM2 级事件处理程序"></a>DOM2 级事件处理程序</h4><p>“DOM2级事件”定义了两个方法，<code>addEventListener()/removeEventListener()</code>，用于为元素绑定和解绑事件。</p>
<p>（<strong>可绑定多个事件，区别于DOM0级/HTML仅能绑定一个</strong>）。</p>
<p><strong>el.addEventListener(eventName, callBack, useCapture)</strong></p>
<ul>
<li><p>eventName: 事件名称</p>
</li>
<li><p>callBack: 回调函数，当事件触发时，函数会传入一个参数event，为当前的事件对象</p>
</li>
<li><p><strong>useCapture: 默认是false，代表事件句柄在冒泡阶段执行， true则代表在捕获阶段执行</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var myBtn = document.getElementById(&apos;myBtn&apos;);</div><div class="line"></div><div class="line">var handleClick = function() &#123;</div><div class="line">    alert(&apos;Hello world!&apos;);</div><div class="line">&#125;</div><div class="line">// 绑定事件处理程序</div><div class="line">myBtn.addEventListener(&apos;click&apos;, handleClick, false);</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.removeEventListener(&apos;click&apos;, handleClick);</div></pre></td></tr></table></figure>
<p><strong>TIPS：DOM2级事件处理程序，解绑时<code>function</code>必须与传入<code>addEventListener</code>相同</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 绑定</div><div class="line">myBtn.addEventListener(&apos;click&apos;, function() &#123;</div><div class="line">    // 匿名函数</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.removeEventListener(&apos;click&apos;,function() &#123;</div><div class="line">    // 匿名函数</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// add/remove 分别绑定了两个匿名函数（函数为引用类型），所以两个函数并不相同，所以无法成功解绑</div></pre></td></tr></table></figure>
<p><strong>TIPS：绑定多个事件处理程序时，执行顺序按绑定顺序执行</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">myBtn.addEventListener(&apos;click&apos;, function() &#123;</div><div class="line">    // step1...</div><div class="line">&#125;)</div><div class="line">myBtn.addEventListener(&apos;click&apos;, function() &#123;</div><div class="line">    // step2...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 执行顺序：step1 -&gt; step2</div></pre></td></tr></table></figure>
<p><strong>浏览器支持情况：IE9以下不支持DOM2级事件处理程序</strong></p>
<h4 id="IE-事件处理程序"><a href="#IE-事件处理程序" class="headerlink" title="IE 事件处理程序"></a>IE 事件处理程序</h4><p>IE9以下不支持DOM2级事件，但IE提供了与DOM2级事件类似的两个方法，<code>attachEvent()/detachEvent</code>，IE9以下不支持事件捕获，所以<code>attachEvent</code>仅支持冒泡阶段触发，只接收两个参数（eventName, function)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 绑定</div><div class="line">myBtn.attachEvent(&apos;onclick&apos;, handleClick);</div><div class="line"></div><div class="line">// 解绑</div><div class="line">myBtn.detachEvent(&apos;onclick&apos;, handleClick);</div></pre></td></tr></table></figure>
<p><strong>TIPS：</strong></p>
<ol>
<li><p>解绑时<code>function</code>必须与传入<code>attachEvent</code>相同，这点与DOM2级事件相同</p>
</li>
<li><p>与DOM0级的区别，DOM0级事件处理在元素的作用域运行，而<code>attachEvent</code>事件处理在全局，<code>this</code>指向<code>window</code></p>
</li>
<li><p><strong>绑定多个事件处理程序时，执行顺序按绑定顺序逆反执行（与DOM2级相反）</strong></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">myBtn.attachEvent(&apos;click&apos;, function() &#123;</div><div class="line"> // step1...</div><div class="line">&#125;)</div><div class="line">myBtn.attachEvent(&apos;click&apos;, function() &#123;</div><div class="line"> // step2...</div><div class="line">&#125;)</div><div class="line">// 执行顺序：step2 -&gt; step1</div></pre></td></tr></table></figure>
<h3 id="Event-事件对象"><a href="#Event-事件对象" class="headerlink" title="Event 事件对象"></a>Event 事件对象</h3><h4 id="常见应用"><a href="#常见应用" class="headerlink" title="常见应用"></a>常见应用</h4><h5 id="event-preventDefault"><a href="#event-preventDefault" class="headerlink" title="event.preventDefault()"></a><code>event.preventDefault()</code></h5><p>阻止默认事件</p>
<h5 id="event-stopPropagation"><a href="#event-stopPropagation" class="headerlink" title="event.stopPropagation()"></a><code>event.stopPropagation()</code></h5><p>阻止事件流发生传递（冒泡/捕获）</p>
<h5 id="event-stopImmediatePropagation"><a href="#event-stopImmediatePropagation" class="headerlink" title="event.stopImmediatePropagation()"></a><code>event.stopImmediatePropagation()</code></h5><p>阻止剩余事件处理函数的执行，并阻止当前事件在事件流上传递</p>
<h5 id="event-currentTarget"><a href="#event-currentTarget" class="headerlink" title="event.currentTarget"></a><code>event.currentTarget</code></h5><p>当前绑定事件的元素</p>
<h5 id="event-target"><a href="#event-target" class="headerlink" title="event.target"></a><code>event.target</code></h5><p>当前触发事件的元素</p>
<h5 id="event-stopPropagation-与-stopImmediatePropagation-的区别"><a href="#event-stopPropagation-与-stopImmediatePropagation-的区别" class="headerlink" title="event.stopPropagation()与.stopImmediatePropagation()的区别"></a>event.stopPropagation()与.stopImmediatePropagation()的区别</h5><p>同个元素绑定多个同名事件时，<code>stopImmediatePropagation</code>不仅阻止了冒泡，而且会阻止后续事件的执行，可以理解为加强版的<code>stopPropagation</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">myBtn.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    // step1;</div><div class="line">    event.stopImmediatePropagation();</div><div class="line">&#125;)</div><div class="line"></div><div class="line">myBtn.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    // step2;</div><div class="line">    // 我被stopImmediatePropagation阻止掉了！！！</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="currantTarget与target的区别"><a href="#currantTarget与target的区别" class="headerlink" title="currantTarget与target的区别"></a>currantTarget与target的区别</h5><p>事件处理程序内部，this等于currentTarget（当前绑定事件的元素），而target（当前触发事件的元素）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// currentTarget == target</div><div class="line">myBtn.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    event.target == event.currentTarget; // true -&gt; myBtn</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// currentTarget != target 捕获/冒泡</div><div class="line">document.body.addEventListener(&apos;click&apos;, function(event)&#123;</div><div class="line">    event.target == event.currentTarget; // false</div><div class="line">    // event.target -&gt; myBtn</div><div class="line">    // event.currentTarget -&gt; body</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="内存与性能"><a href="#内存与性能" class="headerlink" title="内存与性能"></a>内存与性能</h3><p>WEB网页是运行在浏览器客户端的，而计算机分配给浏览器的内存及CPU占用是有限制的。虽说浏览器引擎不断地发展优化，但是内存占用多了， 性能不免会损耗。</p>
<h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>为元素指定事件绑定程序，事实上是赋值了一个函数方法，而函数在javaScript中是一种引用类型的数据格式，既然是数据那就需要用到内存储存。函数创建多了，消耗掉内存。</p>
<h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><p>为元素指定事件绑定程序，首先需要对DOM进行查询，找出要绑定事件的元素。而这也会造成DOM元素的访问次数增加。DOM的操作一直是网页性能的一个优化点。</p>
<p>了解完事件绑定带来内存跟性能的原理，我们来看一个例子，例如我们有一个<code>ul&gt;li</code>的列表，要监听每一个<code>li</code>的点击事件，并触发事件处理程序。</p>
<p>单独绑定的话，10个<code>li</code>就要对DOM元素查询10次，创建的匿名函数就有10个（当然可以共同创建同个函数引用），如果还有20个，30个，100个，那么这种为每个<code>li</code>元素单独绑定事件的方法，绝对不是最优解。</p>
<p>这就引出下面的优化方案：<strong>“事件委托”</strong>。</p>
<h4 id="事件委托（事件代理）"><a href="#事件委托（事件代理）" class="headerlink" title="事件委托（事件代理）"></a>事件委托（事件代理）</h4><p>对”事件处理程序绑定过多”的问题，最好的解决方案就是<strong>“事件委托”</strong>。它的原理是利用了事件流的<strong>“冒泡”</strong>机制，事件目标元素会把事件向上层传递，直到<code>document</code>（浏览器会传到<code>window</code>)，所以父级节点是可以接收子节点的事件传递。</p>
<p>以刚刚<code>ul&gt;li</code>的例子，<code>li</code>有很多个， 但它们有一个共同的父节点<code>ul</code>。<code>li</code>的点击事件会冒泡到<code>ul</code>，因此我们可以在<code>ul</code>上绑定一个事件处理程序，处理所有<code>li</code>的点击事件，然后通过<code>event.target</code>可以确定触发事件的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var ulParent = document.getElementById(&apos;parent&apos;);</div><div class="line">ulParent.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    var taget = event.target; </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过<strong>“事件委托”</strong>减少了DOM元素的查询，以及多个函数的内存占用，而且还有一个好处，当我们的<code>li</code>是动态的，增加和移除时，都无需再做绑定和解绑事件操作，因为它都会冒泡到父级节点。</p>
<h4 id="移除多余的事件绑定"><a href="#移除多余的事件绑定" class="headerlink" title="移除多余的事件绑定"></a>移除多余的事件绑定</h4><p>文档中移除了绑定了事件的DOM元素，如<code>innerHTML/removeChild()/replaceChild()</code>等可以对DOM进行替换，而移除的DOM元素原先所绑定的事件处理程序，并不能有效被浏览器垃圾回收，所以占用一直存在。</p>
<p>所以建议在移除某个DOM元素时，如果其绑定了事件处理程序，需手动解除绑定，释放内存。</p>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>除了为元素绑定支持的事件以外，我们还可以通过<code>Event/CustomEvent</code>来创建开发者自定义事件。</p>
<p>两者不同的是<code>CustomEvent</code>可传递一个<code>Object</code>对象来传输数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// Event</div><div class="line">var eve = new Event(&apos;custome&apos;);</div><div class="line"></div><div class="line">// CustomeEvent 可传参数</div><div class="line">var eve = new CustomeEvent(&apos;custome&apos;, &#123;</div><div class="line">    detail: &#123;</div><div class="line">        name: &apos;KenTsang&apos;,</div><div class="line">        age: 28</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 为DOM元素添加事件监听</div><div class="line">ele.addEventListener(&apos;custome&apos;, function(event) &#123;</div><div class="line">    console.log(event.detail);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 触发ele绑定的自定义事件</div><div class="line">ele.dispatch(eve);</div></pre></td></tr></table></figure>
<hr>
<p>事件这块还剩下一部分知识点，后续文章会再就模拟事件这块知识点进行拆分详解。</p>
<p>天冷了，更文不易，望大家多多点赞。</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(04) - 错误监控 - JavaScript高级程序设计]]></title>
      <url>/2018/12/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-04-%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyww5459j30go0b33z1.jpg" alt="coding"></p>
<h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><ol>
<li><p>即时运行错误 (代码错误)</p>
</li>
<li><p>资源加载错误</p>
</li>
</ol>
<h4 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h4><h5 id="1-类型转换错误"><a href="#1-类型转换错误" class="headerlink" title="1. 类型转换错误"></a>1. 类型转换错误</h5><p>建议使用全等<code>===</code>操作符</p>
<h5 id="2-数据类型错误"><a href="#2-数据类型错误" class="headerlink" title="2.数据类型错误"></a>2.数据类型错误</h5><p>建议加强类型判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 数组倒序</div><div class="line">function reverseSort(value) &#123;</div><div class="line">    if (value instanceof Array) &#123; </div><div class="line">        // 使用instanceof验证数据类型 </div><div class="line">        // (基础类型用typeof, 引用类型用instanceof)</div><div class="line">        value.sort();</div><div class="line">        value.revere()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-通信错误"><a href="#3-通信错误" class="headerlink" title="3. 通信错误"></a>3. 通信错误</h5><p>url参数编码错误造成，建议使用<code>encodeURIComponent()</code>对url参数数据进行编码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 错误的url参数</div><div class="line">// http://www.xxx.com/?redir=http://www.xxx.com?a=b&amp;c=d</div><div class="line"></div><div class="line">// 针对redir后面的参数字符串进行编码</div><div class="line"></div><div class="line">// 封装一个处理方法（摘自书中代码）</div><div class="line">function addQueryStringArg(url, name, value) &#123;</div><div class="line">    if (url.indexOf(&apos;?&apos;) &lt; 0) &#123;</div><div class="line">        url += &apos;?&apos;;        </div><div class="line">    &#125; else &#123;</div><div class="line">        url += &apos;&amp;&apos;;</div><div class="line">    &#125;</div><div class="line">    url += encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(value);</div><div class="line">    return url;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="错误的捕获方式"><a href="#错误的捕获方式" class="headerlink" title="错误的捕获方式"></a>错误的捕获方式</h4><h5 id="针对即时运行错误"><a href="#针对即时运行错误" class="headerlink" title="针对即时运行错误"></a>针对即时运行错误</h5><ol>
<li><p><code>try-catch</code>（代码可疑区域可增加<code>try-catch</code>）</p>
</li>
<li><p><code>window.onerror</code> (全局监控js错误异常)</p>
</li>
</ol>
<h5 id="1-try-catch"><a href="#1-try-catch" class="headerlink" title="1. try-catch"></a>1. <code>try-catch</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    // 可能会导致错误的代码</div><div class="line">&#125; catch (error) &#123;</div><div class="line">    // 错误发生时处理</div><div class="line">    console.log(error.message);</div><div class="line">&#125; finally &#123;</div><div class="line">    // 一定会执行(无论是否发生错误)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>TIPS: 使用了<code>finally</code>，<code>try</code>跟<code>catch</code>的<code>return</code>语句都会被忽略</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function testFinally() &#123;</div><div class="line">    try &#123;</div><div class="line">        return 2;</div><div class="line">    &#125; catch (error) &#123;</div><div class="line">        return 1;</div><div class="line">    &#125; finally &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// testFinally 最终返回 0</div></pre></td></tr></table></figure>
<p><strong>TIPS: <code>try-catch</code>只能捕获同步运行的代码错误，无法检测语法和异步错误</strong></p>
<p>（语法可借助ESlint工具在开发阶段提示解决）</p>
<h5 id="2-window-onerror"><a href="#2-window-onerror" class="headerlink" title="2. window.onerror"></a>2. <code>window.onerror</code></h5><p>遵循DOM0级事件，<code>window.onerror</code>事件处理程序不会创建<code>event</code>对象，但可以接收三个参数<code>message</code>(错误信息), <code>url</code>(错误文件url), <code>line</code>(行号)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">window.onerror = function(message, url, line)&#123;</div><div class="line">    console.log(message, ulr, line);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在事件处理程序中返回false，可以阻止浏览器报告错误的默认行为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">window.onerror = function(message, url, line) &#123;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="针对资源加载错误"><a href="#针对资源加载错误" class="headerlink" title="针对资源加载错误"></a>针对资源加载错误</h5><ol>
<li><p><code>object.onerror</code></p>
</li>
<li><p><code>performance.getEntries()</code></p>
</li>
<li><p><code>Error</code>事件捕获 （全局监控静态资源异常）</p>
</li>
</ol>
<h5 id="1-object-onerror"><a href="#1-object-onerror" class="headerlink" title="1. object.onerror"></a>1. <code>object.onerror</code></h5><p>如script，image等标签src引用，会返回一个<code>event</code>对象</p>
<p><strong>TIPS: <code>object.onerror</code>不会冒泡到<code>window</code>对象，所以window.onerror无法监控资源加载错误</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var img = new Image();</div><div class="line">img.src = &apos;http://xxx.com/xxx.jpg&apos;;</div><div class="line">img.onerror = function(event) &#123;</div><div class="line">    console.log(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gz5luggaj30ld02v3yn.jpg" alt="object.onerror"></p>
<h5 id="2-window-performance-getEntires"><a href="#2-window-performance-getEntires" class="headerlink" title="2. window.performance.getEntires()"></a>2. <code>window.performance.getEntires()</code></h5><p>适用高版本浏览器，返回已成功加载的资源列表，然后自行做比对差集运算，核实哪些文件没有加载成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var result = [];</div><div class="line">window.performance.getEntries().forEach(function (perf) &#123;</div><div class="line">    result.push(&#123;</div><div class="line">        &apos;url&apos;: perf.name,</div><div class="line">        &apos;entryType&apos;: perf.entryType,</div><div class="line">        &apos;type&apos;: perf.initiatorType,</div><div class="line">        &apos;duration(ms)&apos;: perf.duration</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">console.log(result);</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gz60m549j30ts06sq5b.jpg" alt="window.performance.getEntires"></p>
<h5 id="3-Error事件捕获"><a href="#3-Error事件捕获" class="headerlink" title="3. Error事件捕获"></a>3. Error事件捕获</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">window.addEventListener(&apos;error&apos;, function(error)&#123;</div><div class="line">    //...（全局监控静态资源异常）</div><div class="line">    console.log(error);</div><div class="line">&#125;, true);  // 默认false为冒泡阶段触发，true为捕获阶段触发</div></pre></td></tr></table></figure>
<h4 id="跨域的js错误捕获"><a href="#跨域的js错误捕获" class="headerlink" title="跨域的js错误捕获"></a>跨域的js错误捕获</h4><p>一般涉及跨域的js运行错误时会抛出错误提示<code>script error</code>，但没有具体信息（如出错文件，行列号提示等）, 可利用资源共享策略来捕获跨域js错误</p>
<ol>
<li><p>客户端：在script标签增加crossorigin属性（客户端）</p>
</li>
<li><p>服务端：js资源响应头<code>Access-Control-Allow-Origin: *</code></p>
</li>
</ol>
<h4 id="错误上报"><a href="#错误上报" class="headerlink" title="错误上报"></a>错误上报</h4><ol>
<li><p>Ajax请求 (会有跨域问题)</p>
</li>
<li><p>动态创建Image标签 (兼容完美，代码简洁，需要注意浏览器url长度限制)</p>
</li>
</ol>
<h5 id="Image标签"><a href="#Image标签" class="headerlink" title="Image标签"></a>Image标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(new Image()).src= &apos;http://xxx.com/error?code=1002&apos;</div></pre></td></tr></table></figure>
<h5 id="上报频率"><a href="#上报频率" class="headerlink" title="上报频率"></a>上报频率</h5><p>错误信息频繁发送上报请求，会对后端服务器造成压力。<br>项目中我们可通过设置采集率，或对规定时间内数据汇总再上报，减少请求数量，从而缓解服务端压力。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 借鉴别人的一个例子</div><div class="line">Reporter.send=function(data) &#123;</div><div class="line">    // 只采集30%</div><div class="line">    if（Math.random() &lt; 0.3) &#123;</div><div class="line">        send(data); // 上报错误</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考文档</p>
<ul>
<li><p><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></p>
</li>
<li><p><a href="http://jartto.wang/2018/11/20/js-exception-handling/" target="_blank" rel="external">《如何优雅处理前端异常》</a></p>
</li>
</ul>
<blockquote>
<p>作者：以乐之名本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(03) - 性能 - JavaScript高级程序设计]]></title>
      <url>/2018/12/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-03-%E6%80%A7%E8%83%BD-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyx5n8rcj30dw0b3dfr.jpg" alt="coding"></p>
<h3 id="作用域链查找"><a href="#作用域链查找" class="headerlink" title="作用域链查找"></a>作用域链查找</h3><p>作用域链的查找是逐层向上查找。查找的层次越多，速度越慢。随着硬件性能的提升和浏览器引擎的优化，这个慢我们基本可以忽略。</p>
<p>除了层级查找损耗的问题，变量的修改应只在局部环境进行，尽量避免在局部环境下去操作修改父级变量的值。（react/vue 单向数据流的数据传输方式）</p>
<p>优化方法：声明一个变量存储引用（该方法应用甚多）</p>
<h3 id="不必要的属性查找"><a href="#不必要的属性查找" class="headerlink" title="不必要的属性查找"></a>不必要的属性查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 未优化（window.location.href 3*2 6次）</div><div class="line">var query = window.location.href.substring(window.location.href.indexOf(&apos;?&apos;));</div><div class="line"></div><div class="line">// 优化后（3次，以后多次调用url，查询次数不会增加）</div><div class="line">var url = window.location.href;</div><div class="line">var query = url.substring(url.indexOf(&apos;?&apos;));</div><div class="line">url = null;</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gyxkckyyj30ae0aet8s.jpg" alt="window.location.href"></p>
<p>函数里面声明的变量，在函数调用栈执行后退出时，会自动清除引用。而全局变量和闭包则会与之相反，继续保存，所以使用用后需手动标记清除，以免造成内存泄漏。</p>
<h3 id="优化循环"><a href="#优化循环" class="headerlink" title="优化循环"></a>优化循环</h3><ol>
<li>减值迭代</li>
<li>简化终止条件</li>
<li>简化循环体</li>
<li>使用后测试循环</li>
</ol>
<h4 id="减值迭代"><a href="#减值迭代" class="headerlink" title="减值迭代"></a>减值迭代</h4><p>日常应用不多，与增值迭代的区别，就在i存储的值。减值迭代i的值不断在变小，存储的空间也在变小。</p>
<p>但在前端极少需要遍历上万次上亿次的数据，上千上百都很少，所以这个优化可忽略。而且我们遍历的顺序一般都是从数组头部开始，所以增值迭代应用的更多。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 增值迭代（用的较多）</div><div class="line">for(var i = 0; i &lt; len; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 减值迭代</div><div class="line">for(var i = len - 1; i &gt;= 0 ; i--) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="简化终止条件-常用"><a href="#简化终止条件-常用" class="headerlink" title="简化终止条件 (常用)"></a>简化终止条件 (常用)</h4><p>终止条件应该是一个固定值判断，应避免在终止条件上做其他运算（属性查找等）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 未优化，每次循环都会去计算数组长度</div><div class="line">var arr = [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JavaScript&apos;];</div><div class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 优化后</div><div class="line">for (var i = 0, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div><div class="line">// 声明了一个变量len用于储存数组长度，只会计算一次</div></pre></td></tr></table></figure></p>
<h4 id="简化循环体"><a href="#简化循环体" class="headerlink" title="简化循环体"></a>简化循环体</h4><p>循环体的代码应该着重于只需要遍历处理的代码，其他无关代码应放置到循环体外面。</p>
<h4 id="后测试循环"><a href="#后测试循环" class="headerlink" title="后测试循环"></a>后测试循环</h4><blockquote>
<p>最常用的for循环和while循环都是前测试循环。而do-while这种后测试循环，可以避免最初终止条件的计算，因此运行更快。</p>
<p>前测试循环（for/while），可能一次都不会执行循环体</p>
<p>后测试循环（do…while），至少执行一次</p>
</blockquote>
<h4 id="用确定索引值更快"><a href="#用确定索引值更快" class="headerlink" title="用确定索引值更快"></a>用确定索引值更快</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// for循环遍历</div><div class="line">var arr = [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JavaScript&apos;];</div><div class="line">for (let i = 0, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    arr[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 确定索引值</div><div class="line">arr[0]; </div><div class="line">arr[1]; </div><div class="line">arr[2];</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>原生方法较快（Math)</li>
<li>switch语句较快 (多个if情况下)</li>
<li>位运算符较快</li>
</ol>
<p><strong>TIPS: 判断优化，最可能的到最不可能的顺序组织（<code>if/switch</code>)</strong></p>
<h3 id="最小语句数"><a href="#最小语句数" class="headerlink" title="最小语句数"></a>最小语句数</h3><p>符合 <strong>write less, do more</strong> 的代码追求</p>
<h4 id="多个变量声明合并"><a href="#多个变量声明合并" class="headerlink" title="多个变量声明合并"></a>多个变量声明合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 多个var声明</div><div class="line">var name = &apos;KenTsang&apos;;</div><div class="line">var age = 28;</div><div class="line">var job = &apos;Developer&apos;;</div><div class="line"></div><div class="line">// 合并一个var声明</div><div class="line">var name = &apos;KenTsang&apos;,</div><div class="line">    age = 27,</div><div class="line">    job = &apos;Developer&apos;;</div></pre></td></tr></table></figure>
<h4 id="插入迭代值"><a href="#插入迭代值" class="headerlink" title="插入迭代值"></a>插入迭代值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 优化前</div><div class="line">var name = value[i];</div><div class="line">i++;</div><div class="line"></div><div class="line">// 优化后</div><div class="line">var name = value[i++];</div></pre></td></tr></table></figure>
<h4 id="数组-对象字面量"><a href="#数组-对象字面量" class="headerlink" title="数组/对象字面量"></a>数组/对象字面量</h4><p>创建引用类型可以使用构造函数和字面量两种方式，不过日常习惯都使用字面量，因为语句更简洁，写起来更像数据封装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 字面量</div><div class="line">var arr = [1, 2, 3, 4];</div><div class="line">var obj = &#123;</div><div class="line">    name: &apos;KenTsang&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 构造函数</div><div class="line">var arr = new Array(1, 2, 3, 4);</div><div class="line">var obj = new Object();</div><div class="line">obj.name = &apos;KenTsang&apos;;</div></pre></td></tr></table></figure></p>
<h3 id="DOM优化交互"><a href="#DOM优化交互" class="headerlink" title="DOM优化交互"></a>DOM优化交互</h3><h4 id="最小现场更新"><a href="#最小现场更新" class="headerlink" title="最小现场更新"></a>最小现场更新</h4><blockquote>
<p>现场更新：一旦你需要访问的 DOM 部分是已经显示的页面的一部分，那么你就是在进行一个现场更新</p>
</blockquote>
<h4 id="文档片段"><a href="#文档片段" class="headerlink" title="文档片段"></a>文档片段</h4><p>文档片段相当一个临时的占位符，只有片段中的内容会被添加到DOM上，片段本身并不会被添加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 代码片段标签</div><div class="line">var ele  = document.getElementById(&apos;ul&apos;);</div><div class="line">var fragment = document.createDocumentFragment();</div><div class="line">var browsers = [&apos;Firefox&apos;, &apos;Chrome&apos;, &apos;Opera&apos;, </div><div class="line">    &apos;Safari&apos;, &apos;IE&apos;];</div><div class="line"></div><div class="line">browsers.forEach(function(browser) &#123;</div><div class="line">    var li = document.createElement(&apos;li&apos;);</div><div class="line">    li.textContent = browser;</div><div class="line">    fragment.appendChild(li);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 只会操作一次DOM</div><div class="line">ele.appendChild(fragment);</div></pre></td></tr></table></figure>
<h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>合并插入代码一次性设置innerHTML。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 优化前：操作多次DOM</div><div class="line">var list = document.getElementById(&quot;myList&quot;);</div><div class="line">for (var i=0; i &lt; 10; i++) &#123;</div><div class="line">    list.innerHTML += &quot;&lt;li&gt;Item &quot; + i + &quot;&lt;/li&gt;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 优化后：操作一次DOM</div><div class="line">var innerHtml = &apos;&apos;;</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">    innerHtml += &apos;&lt;li&gt;Item&apos; + i + &apos;&lt;/li&gt;&apos;;</div><div class="line">&#125;</div><div class="line">list.innerHTML = innerHtml;</div></pre></td></tr></table></figure>
<h4 id="事件代理（事件委托）"><a href="#事件代理（事件委托）" class="headerlink" title="事件代理（事件委托）"></a>事件代理（事件委托）</h4><p>通过事件流——冒泡机制实现代理，子元素事件触发冒泡到父元素，由父元素绑定一个事件进行统一处理，避免多个事件绑定影响性能。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gyxxz0bcj30d70bct8r.jpg" alt="事件冒泡"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list&quot;&gt;</div><div class="line">    &lt;li class=&quot;item&quot;&gt;HTML&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item&quot;&gt;CSS&lt;/li&gt;</div><div class="line">    &lt;li class=&quot;item&quot;&gt;JavaScript&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">var listEle = document.getElementById(&apos;list&apos;);</div><div class="line"></div><div class="line">listEle.addEventListener(&apos;click&apos;, function(event) &#123;</div><div class="line">    if (event.target.className.indexOf(&apos;item&apos;) &gt; -1) &#123;</div><div class="line">        console.log(event.target.innerHTML); </div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// jquery</div><div class="line">$(&apos;#list&apos;).on(&apos;click&apos;, &apos;.item&apos;, function(event)&#123;</div><div class="line">    console.log($(this).html());</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="注意HTMLCollection"><a href="#注意HTMLCollection" class="headerlink" title="注意HTMLCollection"></a>注意HTMLCollection</h4><blockquote>
<p>任何时候要访问 HTMLCollection，不管它是一个属性还是一个方法，都是在文档上进行一个查询，这个查询开销很昂贵。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 一个死循环例子</div><div class="line">&lt;a href=&quot;&quot;&gt;link&lt;/a&gt;</div><div class="line">    </div><div class="line">var existLinkEle = document.getElementsByTagName(&apos;a&apos;);</div><div class="line">for (var i = 0; i &lt; existLinkEle.length; i++) &#123;     </div><div class="line">    console.log(i);</div><div class="line">    var linkEle = document.createElement(&apos;a&apos;);</div><div class="line">    document.body.appendChild(linkEle);</div><div class="line">&#125;</div><div class="line">// body会不断地插入a标签</div></pre></td></tr></table></figure>
<p>因为<code>existLinkEle.length</code>每次循环都会重新计算页面a节点的数量，而得到的值一直递增。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 优化（一个变量存储引用）</div><div class="line">var len = existLinkEle.length;</div><div class="line">for (var i = 0; i &lt; len; i++) &#123;</div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回<code>HTMLCollection</code>对象情况有：</p>
<ol>
<li><code>document.getElementByTagName()</code>。</li>
<li>获取元素的<code>childNodes</code>属性</li>
<li>获取元素的<code>attributes</code>属性</li>
<li><code>document.forms</code>,<code>document.images</code>等</li>
</ol>
<hr>
<p>参考文档</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(02) - 可维护性 - JavaScript高级程序设计]]></title>
      <url>/2018/12/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-02-%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyyrelqhj30dw0b4jrg.jpg" alt="coding"></p>
<h3 id="编写可维护性代码"><a href="#编写可维护性代码" class="headerlink" title="编写可维护性代码"></a>编写可维护性代码</h3><p>可维护的代码遵循原则：</p>
<ol>
<li>可理解性 （方便他人理解）</li>
<li>直观性    （一眼明了）</li>
<li>可适应性 （数据变化无需重写方法）</li>
<li>可扩展性 （应对未来需求扩展，要求较高）</li>
<li>可调试性 （错误处理方便定位）</li>
</ol>
<h4 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h4><p>变量取名多为为名词，方法取名多为为动词<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 变量名</div><div class="line">car, person;</div><div class="line"></div><div class="line">// 方法名</div><div class="line">getName, isEnable;</div></pre></td></tr></table></figure></p>
<h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>功能过于依赖，代码耦合过紧，不利于维护。而通过解耦能让我们更专一地处理特定功能业务的开发，也方便我们开发中调试，从复杂的耦合依赖中抽离出来。</p>
<p>解耦优势：代码复用，单元测试。</p>
<p><strong>解耦原则：</strong></p>
<ol>
<li>HTML/JavaScript解耦（结构层/行为层的解耦）</li>
<li>CSS/JavaScript解耦 （样式层/行为层的解耦）</li>
<li>应用逻辑/事件处理程序解耦</li>
</ol>
<blockquote>
<p>应用逻辑/事件处理程序解耦合的原则：</p>
<ol>
<li>勿将event对象传给其他方法；只传来自event对象中所&gt; 需的数据</li>
<li>任何可以在应用层面的动作都应该可以在不执行任何事&gt; 件处理程序的情况下进行；</li>
<li>任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 一个事件解耦的例子</div><div class="line">var pwdInput = document.getElementById(&apos;password&apos;);</div><div class="line"></div><div class="line">// 回车事件</div><div class="line">pwdInput.addEventListener(&apos;keyup&apos;, function(event)&#123;</div><div class="line">    if (event.keyCode == 13) &#123;</div><div class="line">        validatePassword(event.target.value);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 失焦事件</div><div class="line">pwdInput.addEventListener(&apos;blur&apos;, function(event) &#123;</div><div class="line">    validatePassword(event.target.value);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 业务应用单独封装到一个方法里面，多处复用/单元测试皆可</div><div class="line">function validatePassword(pwd) &#123;</div><div class="line">    if (!pwd) &#123;</div><div class="line">        alert(&apos;密码不能为空!&apos;);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对象所有权"><a href="#对象所有权" class="headerlink" title="对象所有权"></a>对象所有权</h3><p>JavaScript中是通过原型链来实现继承，而原型继承的一个特点就是原型上定义的属性方法，可以被多个实例共享使用。</p>
<p><strong>对象维护原则：</strong></p>
<ol>
<li>不要为实例或原型添加属性</li>
<li>不要为实例或原型添加方法</li>
<li>不要重定义已存在的方法</li>
</ol>
<p><strong>需要修改对象时：</strong></p>
<ol>
<li>创建包含所需功能的新对象，并用它与相关对象进行交互</li>
<li>创建自定义类型，继承需要进行修改的类型，然后可以自定义类型添加额外功能</li>
</ol>
<h3 id="全局变量引申命名空间"><a href="#全局变量引申命名空间" class="headerlink" title="全局变量引申命名空间"></a>全局变量引申命名空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var name = &apos;KenTsang&apos;;</div><div class="line">function sayName () &#123;</div><div class="line">    console.log(name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var MyApp = &#123;</div><div class="line">    name: &apos;KenTsang&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">    skill: &#123;</div><div class="line">        html: 80,</div><div class="line">        css: 80,</div><div class="line">        js: 80</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyApp.skill.js // 80</div></pre></td></tr></table></figure>
<p>虽然减少程序员输错代码造成修改全局变量的几率，但依旧可以修改到全局变量，而且增加了代码量。</p>
<h3 id="常用null比较误区"><a href="#常用null比较误区" class="headerlink" title="常用null比较误区"></a>常用null比较误区</h3><p>TIPS: <code>null</code>可同时判断<code>null/undefined</code>，可用来判断对象属性是否存在。</p>
<p>使用<code>null</code>作判断无法进行充分的类型检查。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 错误用法</div><div class="line">function sortArrays(values) &#123;</div><div class="line">    if (values != null) &#123;</div><div class="line">        // 非数组类型就会报错，因为sort方法只有Array才具备</div><div class="line">        values.sort();</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line">// 正确用法</div><div class="line">if (values instanceof Array) &#123;</div><div class="line">    value.sort();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用null比较的代码，替换原则：</p>
<ol>
<li>如果值应为一个引用类型，使用instanceof操作符检查其构造函数</li>
<li>如果值应为一个基本类型(值类型)，使用typeof检查其类型</li>
<li>如果是希望对象包含某个特点的方法名，则使用typeof操作符确保指定名字的方法存在于对象上</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 值类型 (Number, String, Boolean)</div><div class="line">typeof value == &apos;string&apos;;</div><div class="line"></div><div class="line">// 引用类型 (Array, Object, Function)</div><div class="line">value instanceof Array;</div><div class="line"></div><div class="line">// 对象方法 (Object.property)</div><div class="line">typeof person.getName == &apos;function&apos;</div></pre></td></tr></table></figure>
<h3 id="常量应用"><a href="#常量应用" class="headerlink" title="常量应用"></a>常量应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var CONSTANS = &#123;</div><div class="line">    INVALID_VALUES_MSG: &quot;Invalid value!&quot;,</div><div class="line">    INVALID_VALUE_URL: &quot;/erros/invalid.php&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CONSTANS.INVALID_VALUES_MSG // &quot;Invalid value!&quot;</div></pre></td></tr></table></figure>
<p>常量应用原则：</p>
<ol>
<li>重复值——多处地方引用的值 (CSS类名/后端返回的状态码)。</li>
<li>用户界面字符串——显示给用户的字符串 (国际化, 替换为对应的语言包文件)</li>
<li>URLs——公共地方存放所有的URL (测试API的URL/上线API的URL)</li>
<li>任何可能会更改的值 (通常是环境/语言配置上的修改)</li>
</ol>
<p>redux/vuex的actionType判断的应用，也是常量应用常见的场景。好处就是引用时拼写错误会直接抛出变量引用错误，而直接用字符串值判断，则不会抛出错误，不利于调试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// redux-reducer.js文件中应用常量</div><div class="line">import &#123;</div><div class="line">    ADD_TODO_ITEM, </div><div class="line">    DELETE_TODO_ITEM</div><div class="line">&#125; from &apos;./actionTypes&apos;</div><div class="line"></div><div class="line">const defaultState = &#123;</div><div class="line">    inputValue: &apos;&apos;,</div><div class="line">    list: []</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default (state = defaultState, action) =&gt; &#123;</div><div class="line">    let newState = JSON.parse(JSON.stringify(state));</div><div class="line"></div><div class="line">    switch (action.type) &#123;</div><div class="line">        case DELETE_TODO_ITEM:</div><div class="line">            newState.list.splice(action.value, 1);</div><div class="line">        break;</div><div class="line">        case ADD_TODO_ITEM:</div><div class="line">            if (newState.inputValue.trim().length) &#123;</div><div class="line">                newState.list.push(newState.inputValue);</div><div class="line">            &#125;</div><div class="line">            newState.inputValue = &apos;&apos;;</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return newState;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考文档</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记(01) - JSON - JavaScript高级程序设计]]></title>
      <url>/2018/12/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-01-JSON-JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gyk80lm1j30ia0dqq33.jpg" alt="coding"></p>
<h3 id="JSON与JavaScript对象"><a href="#JSON与JavaScript对象" class="headerlink" title="JSON与JavaScript对象"></a>JSON与JavaScript对象</h3><p>JSON是一种表示结构化数据的存储格式，语法格式上与JavasScript对象有些类似。</p>
<p>TIPS: 与JavaScript对象的格式区别</p>
<ol>
<li>不支持变量、函数或对象实例</li>
<li>字符串，属性名必须使用双引号</li>
<li>无需定义变量存储引用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// JSON对象</div><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;KenTsang&quot;,</div><div class="line">    &quot;age&quot;: 27,</div><div class="line">    &quot;job&quot;: &quot;Developer&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// js对象(该对象将作在后续例子引用)</div><div class="line">let person = &#123;</div><div class="line">    name: &apos;KenTsang&apos;,</div><div class="line">    age: 27,</div><div class="line">    job: &apos;Developer&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ES5定义了一个全局对象JSON，IE8+以上支持，该对象提供来<code>stringify</code>和<code>parse</code>两个方法用于JSON数据解析和序列化。</p>
<h3 id="stringify"><a href="#stringify" class="headerlink" title="stringify()"></a>stringify()</h3><p>stringify用于把JavaScript对象序列化JSON字符串，</p>
<blockquote>
<p>在序列化JavaScript对象时，所有函数及原型成员都会被有意忽略，不体现在结果中。此外，值为undefined的任何属性也都会被跳过。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JSON.stringify(</div><div class="line">    value: Object, </div><div class="line">    replace: Array | function(key,value) &#123;&#125;,</div><div class="line">    space: number | string</div><div class="line">)</div></pre></td></tr></table></figure>
<p>该方法接受三个参数</p>
<ol>
<li>参数：接收传入的js对象</li>
<li>参数：过滤器（数组/函数）</li>
<li>参数：字符串缩进（数值/字符串）</li>
</ol>
<h4 id="参数2-过滤器"><a href="#参数2-过滤器" class="headerlink" title="参数2 - 过滤器"></a>参数2 - 过滤器</h4><p>TIPS1: 过滤器是一个数组时，序列化结果只包含数组中列出的属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let result = JSON.stringify(person, [&quot;name&quot;, &quot;job&quot;]);</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">// &#123;&quot;name&quot;:&quot;KenTsang&quot;,&quot;job&quot;:&quot;Developer&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>TIPS2: 过滤器是一个函数时（替换函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var jsonStr = JSON.stringify(Person, function(key, value)&#123;</div><div class="line">    if (key == &apos;age&apos;) &#123;</div><div class="line">        return &apos;secret&apos;;</div><div class="line">    &#125; else &#123;</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">// &#123;&quot;name&quot;:&quot;KenTsang&quot;,&quot;age&quot;:&quot;secret&quot;,&quot;job&quot;:&quot;Developer&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>如果替换函数返回的是<code>undefined</code>，则该属性不会被包含在序列化结果中。</p>
<h4 id="参数3-字符串缩进"><a href="#参数3-字符串缩进" class="headerlink" title="参数3 - 字符串缩进"></a>参数3 - 字符串缩进</h4><p>用于控制序列化结果中的缩进和空白符，输出序列结果带缩进格式，方便预览查看。实际应用开发不多。</p>
<ol>
<li>为数值时，表示每个级别缩进的空格数（最大10）</li>
<li>为字符串时，则作为缩进字符（替换默认的空格，最大10个字符）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let result = JSON.stringify(person, null, &apos;--&apos;);</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">/*</div><div class="line">&#123;</div><div class="line">--&quot;name&quot;: &quot;KenTsang&quot;,</div><div class="line">--&quot;age&quot;: 27,</div><div class="line">--&quot;job&quot;: &quot;Developer&quot;</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="toJSON-方法"><a href="#toJSON-方法" class="headerlink" title="toJSON()方法"></a>toJSON()方法</h4><p>应对更复杂的一些需求，我们可以通过toJSON()对某些对象进行自定义序列化的需求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">let person = &#123;</div><div class="line">    name: &quot;KenTsang&quot;,</div><div class="line">    age: 27,</div><div class="line">    job: &apos;Developer&apos;,</div><div class="line">    toJSON: function() &#123;</div><div class="line">        return &#123;</div><div class="line">            &quot;name&quot;: &quot;KT&quot;,</div><div class="line">            &quot;age&quot;: &quot;2*&quot;,</div><div class="line">            &quot;job&quot;: &quot;DP&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let result = JSON.stringify(person);</div><div class="line"></div><div class="line">// 输出结果</div><div class="line">// &#123;&quot;name&quot;:&quot;KT&quot;,&quot;age&quot;:&quot;2*&quot;,&quot;job&quot;:&quot;DP&quot;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>TIPS: 序列化顺序</strong></p>
<blockquote>
<ol>
<li>如果存着toJSON方法而且能通过它取得有效的值，则调用该方法。否则，返回对象本身。</li>
<li>如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第(1)步的值。</li>
<li>对第(2)步返回的每个值进行相应的序列化。</li>
<li>如果提供了第三个参数，执行相应的格式化。</li>
</ol>
<p>– 摘自《JavaScript高级程序设计》–</p>
</blockquote>
<h3 id="parse"><a href="#parse" class="headerlink" title="parse()"></a>parse()</h3><p>parse用于把JSON字符串解析成JavaScript对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSON.parse(text: string, reviver: function(key, value) &#123;&#125;)</div></pre></td></tr></table></figure></p>
<p>该方法接受三个参数</p>
<ol>
<li>参数：接收传入的json字符串</li>
<li>参数：还原函数</li>
</ol>
<h4 id="还原函数"><a href="#还原函数" class="headerlink" title="还原函数"></a>还原函数</h4><ol>
<li>返回undefined, 结果中删除相应的键 </li>
<li>返回其它值，则将值插入到结果中</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">let Person = &#123;</div><div class="line">    name: &quot;KenTsang&quot;,</div><div class="line">    age: 27,</div><div class="line">    job: &quot;Developer&quot;,</div><div class="line">    birth: new Date(1991, 3, 19)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var jsonStr = JSON.stringify(Person);</div><div class="line">var jsObj = JSON.parse(jsonStr, function(key, value) &#123;</div><div class="line">    if (key == &apos;birth&apos;) &#123;</div><div class="line">        return new Date(value);</div><div class="line">    &#125; else &#123;</div><div class="line">        return value);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">jsObj.birth.getFullYearh(); </div><div class="line"></div><div class="line">// 输出结果： 1991</div></pre></td></tr></table></figure>
<p>例子中通过还原函数，重新实例一个Date对象，所以可以用到<code>getFullYear()</code>方法。</p>
<hr>
<p>参考文档</p>
<ul>
<li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="external">《JavaScript高级程序设计》</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂谈：HTTP1.1 与 HTTP2.0 知多少？]]></title>
      <url>/2018/08/04/%E6%9D%82%E8%B0%88%EF%BC%9AHTTP1-1-%E4%B8%8E-HTTP2-0-%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>HTTP是应用层协议，是基于TCP底层协议而来。</p>
<p>TCP的机制限定，每建立一个连接需要3次握手，断开连接则需要4次挥手。</p>
<p>HTTP协议采用“请求-应答”模式，HTTP1.0下，HTTP1.1非Keep-Alive模式下，每个请求都要新建一个连接，完成之后立即断开连接。如果有新的请求，则要重新创建请求连接（HTTP协议为无连接的协议）。</p>
<p>这样不免造成了网络传输数据一定的延迟，1999年推出HTTP1.1，虽然可以通过设置延迟时间，让连接延迟关闭。但仍然有线头阻塞，max-connection最大连接限制了并行请求数量等痛点，难以应对日益增长的大数据实时传输。</p>
<p>新一代HTTP2.0协议应运而生，提高HTTP应对高并发场景下的数据传输能力。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gyl113naj30go0c8q2u.jpg" alt="杂谈：HTTP1.1 与 HTTP2.0 知多少？"></p>
<h3 id="「-HTTP1-1」"><a href="#「-HTTP1-1」" class="headerlink" title="「 HTTP1.1」"></a>「 HTTP1.1」</h3><h4 id="Pipelining管道化"><a href="#Pipelining管道化" class="headerlink" title="Pipelining管道化"></a>Pipelining管道化</h4><p>提出管道化方案解决连接延迟，服务端可设置Keep-Alive来让连接延迟关闭时间，但因为浏览器自身的Max-Connection最大连接限制，同一个域名 (host) 下的请求连接限制（同域下谷歌浏览器是一次限制最多6个连接），只能通过多开域名来实现，这也就是我们的静态资源选择放到CDN上或其它域名下，来提高资源加载速度。</p>
<p>pipelining方案需要前后端支持，但绝大部分的HTTP代理器对pipelining的支持并不友好。</p>
<h4 id="只支持GET-HEAD"><a href="#只支持GET-HEAD" class="headerlink" title="只支持GET/HEAD"></a>只支持GET/HEAD</h4><p>pipelining只支持GET/HEAD方式传送数据，不支持POST等其它方式传输。</p>
<h4 id="头部信息冗余"><a href="#头部信息冗余" class="headerlink" title="头部信息冗余"></a>头部信息冗余</h4><p>HTTP是无状态的，客户端/服务端只能通过HEAD的数据维护获取状态信息，这样就造成每次连接请求时都会携带大量冗余的头部信息，头部信息包括COOKIE信息等。</p>
<h4 id="超文本协议"><a href="#超文本协议" class="headerlink" title="超文本协议"></a>超文本协议</h4><p>HTTP1.X是超文本协议传输。超文本协议传输，发送请求时会找出数据的开头和结尾帧的位置，并去除多余空格，选择最优方式传输。如果使用了HTTPS，那么还会对数据进行加密处理，一定程度上会造成传输速度上的损耗。</p>
<h4 id="线头阻塞"><a href="#线头阻塞" class="headerlink" title="线头阻塞"></a>线头阻塞</h4><p>pipelining通过延迟连接关闭的方案，虽然可同时发起对服务端的多个请求，但服务端的response依旧遵循FIFO（first in first out)规则 依次返回。</p>
<p>举个例子客户端发送了1、2、3、4四个请求，如果1没返回给客户端，那么2，3，4也不会返回。这就是所谓的线头阻塞。高并发高延迟的场景下阻塞明显。</p>
<h4 id="HTTP1-X传输优化方法"><a href="#HTTP1-X传输优化方法" class="headerlink" title="HTTP1.X传输优化方法"></a>HTTP1.X传输优化方法</h4><ol>
<li>多个资源合并成一个请求连接，如前端Spriting雪碧图，JS/CSS压缩成一个文件等</li>
<li>Inlining内联的方式，采用inline css/inline js等并入html中，减少对css/js文件的请求</li>
<li>CDN资源多域名转发，静态资源分布存储在多个域下。</li>
</ol>
<p>以上三种三种方法虽然能使HTTP1.X协议传输速度提高，但也有对应的不足。</p>
<ol>
<li>如雪碧图，将多个小图合并成一张大图，降低多张小图请求的高延迟，但是如果我只想要两个icon小图，却需要加载一整张大图，就会造成资源冗余。合并的JS/CSS文件也有类似的问题。</li>
<li>内联的方式，会让我们的代码变得难以维护，让html文件变得更大，代码混合严重。</li>
<li>多域名下可缓解Max-Connection，但不同域会让Cookie信息无法彼此共享。</li>
</ol>
<hr>
<p>了解完HTTP1.1的痛点，接下来就是我们新一代的HTTP协议HTTP2.0</p>
<hr>
<h3 id="「-HTTP2-0」"><a href="#「-HTTP2-0」" class="headerlink" title="「 HTTP2.0」"></a>「 HTTP2.0」</h3><h4 id="前身SPDY"><a href="#前身SPDY" class="headerlink" title="前身SPDY"></a>前身SPDY</h4><p>SPDY是2012年谷歌推出的是基于SSL/TLS的传输协议，SPDY有降低延迟，多路复用，头部压缩，服务端推送等特点，这些特点也称为了后续HTTP2.0的功能基石，HTTP2.0是SPDY/3 draft的优化版。</p>
<p>HTTP2.0 与 SPDY的区别：</p>
<ol>
<li>HTTP2.0 头部压缩采用HPACK， 而SPDY采用DELEFT。</li>
<li>HTTP2.0 理论上支持明文HTTP传输，而SPDY强制使用HTTPS。</li>
</ol>
<h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>（一个域只要一个TCP连接）实现真正的并发请求，降低延时，提高了带宽的利用率。</p>
<h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><p>客户端/服务端进行渐进更新维护，采用HPACK压缩，节省了报文头占用流量。</p>
<ol>
<li>相同的头部信息不会通过请求发送，延用之前请求携带的头部信息。</li>
<li>新增/修改的头部信息会被加入到HEAD中，两端渐进更新。</li>
</ol>
<p>两端会共同维护一个head list，每次请求时都会进行检查。<br>该list包括：</p>
<ol>
<li>static (既定的头部信息)</li>
<li>dynamic (自定义的头部信息)</li>
</ol>
<h4 id="请求优先级"><a href="#请求优先级" class="headerlink" title="请求优先级"></a>请求优先级</h4><p>每个流都有自己的优先级别，客户端可指定优先级。并可以做流量控制。因为HTTP2.0的传世允许请求并发，但是应用场景中我们要处理一些主要文件的优先级权重，以及资源模块依赖等。所以我们可通过设置优先级来提高主要文件的权重，使其优先加载请求。</p>
<h4 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h4><p>请求不是来自客户端“明确”的请求，是从服务端PUSH_PROMISE帧中提供。例如我们加载index.html, 我们可能还需要index.js, index.css等文件。传统的请求只有当拿到index.html，解析html中对index.js/index.css的引入才会再请求资源加载，但是通过服务端数据，可以提前将资源推送给客户端，这样客户端要用到的时候直接调用即可，不用再发送请求。</p>
<ul>
<li>push的资源能缓存在浏览器中</li>
<li>不同的网页能使用该缓存，不用重新发起</li>
<li>push的资源通过multiplexed进行传输</li>
<li>push的资源能够进行priority标识</li>
<li>client有权取消push资源的加载</li>
<li>push的资源必须同域</li>
</ul>
<h4 id="二进制协议"><a href="#二进制协议" class="headerlink" title="二进制协议"></a>二进制协议</h4><p>HTTP2.0 传输协议采用二进制协议，区别与HTTP1.X的超文本协议。更易于帧，数据包的发送接收。HTTP2.0是运行在TCP连接上的应用层协议，接受服务器或发送请求时，会自动将头部信息/request body分成HEAD帧和DATA帧。</p>
<p>客户端/服务端发送/接收数据时，会将数据打散乱序发送，接收数据时接收一端再通过streamID标识来将数据合并。</p>
<h4 id="HTTP2-0环境要求"><a href="#HTTP2-0环境要求" class="headerlink" title="HTTP2.0环境要求"></a>HTTP2.0环境要求</h4><p>HTTP2.0理论上支持明文HTTP传输，但因为其前身SPDY是在TLS上，他们的主人Google 和 Firefox 都支持TLS架构，所以需要搭建HTTP2.0 + TLS成了标准。</p>
<ol>
<li>Nginx &gt; 1.10</li>
<li>OpenSSL &gt; 1.0.2</li>
<li>CA证书</li>
</ol>
<p>参考文档</p>
<ul>
<li><a href="https://blog.csdn.net/charleslei/article/details/50621912" target="_blank" rel="external">HTTP协议头部与Keep-Alive模式详解</a></li>
<li><a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/" target="_blank" rel="external">HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事</a></li>
<li><a href="https://segmentfault.com/a/1190000005085636" target="_blank" rel="external">前端应该了解的HTTP2</a></li>
<li><a href="https://tech.upyun.com/article/227/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%20HTTP%2F2%20%E7%89%B9%E6%80%A7.html" target="_blank" rel="external">一文读懂 HTTP/2 特性</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>  本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 中 if / if...else...替换方式]]></title>
      <url>/2018/07/14/JS-%E4%B8%AD-if-if-else-%E6%9B%BF%E6%8D%A2%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyiwlu1xj30dw0b4743.jpg" alt="if/if...else...替换方式"></p>
<p>说说烂大街的<code>if/if...else...</code>，程序中用得最多的流程判断语句。</p>
<p>对着曾经满屏的<code>if/if...else...</code>，心想能不能搞点事情，折腾点浪花浪里呀浪。</p>
<p>对顶着“这个需求很简单，怎么实现我不管，明天上线”的程序猿，答案必须YES。</p>
<p><strong>“Write Less, Do More”</strong>，学习进步的本质就是为了更有效率地偷懒。</p>
<p>废话说完，直接上方法汇总，让我们来一窥究竟：</p>
<h3 id="switch改写if"><a href="#switch改写if" class="headerlink" title="switch改写if"></a>switch改写if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// if 版本</div><div class="line">var a = 1;</div><div class="line">if(a &gt; 1 &amp;&amp; a &lt; 5) &#123;</div><div class="line">    return 1</div><div class="line">&#125; else if(a &gt; 5 &amp;&amp; a &lt; 10)&#123;</div><div class="line">    return 5</div><div class="line">&#125;else&#123;</div><div class="line">    return 10</div><div class="line">&#125;</div><div class="line"></div><div class="line">// switch 改版</div><div class="line">switch(true)&#123;</div><div class="line">    case (a &gt; 1 &amp;&amp; a &lt; 5):</div><div class="line">        return 1</div><div class="line">    case (a &gt; 5 &amp;&amp; a &lt; 10):</div><div class="line">        return 5</div><div class="line">    default:</div><div class="line">        return 10</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码的<code>switch...case...</code>的用法实际使用不多，仅供参考。<br>一般case为常量时<code>switch...case...</code>用得较多。</p>
<p>选择分支较多时，建议选用<code>switch…case</code>可提高程序的效率，但<code>switch...case</code>不足的地方在于只能处理字符或者数字类型的变量，<code>if…else</code>更加灵活，可用于判断表达式是否成立，比如<code>if(a+b&gt;c)</code>,<code>if…else</code>的应用范围更广。</p>
<h3 id="三元运算符改写if"><a href="#三元运算符改写if" class="headerlink" title="三元运算符改写if"></a>三元运算符改写if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// if 版本</div><div class="line">if (bool) &#123;</div><div class="line">    value = 1;</div><div class="line">&#125; else &#123;</div><div class="line">    value = 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 三元运算符 版本</div><div class="line">value = bool ? 1 : 2;</div><div class="line">// 三元预算符 多个运算需要括号包裹 此处用了逗号表达式</div><div class="line">return typeof foo === &apos;object&apos;?(console.log(1),1):(console.log(2),2);</div></pre></td></tr></table></figure>
<p>优点：代码简化，更加清爽，write less</p>
<p>缺点：复杂的三元运算符可读性较差，需友好注释</p>
<p>TIPS:  三元运算符后面不能带return</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 错误用法，运算符号后不能带return</div><div class="line">bool ? return 1 : return 2;</div></pre></td></tr></table></figure>
<h3 id="逻辑判断-and-amp-amp-和or-改写if"><a href="#逻辑判断-and-amp-amp-和or-改写if" class="headerlink" title="逻辑判断 and(&amp;&amp;)和or(||) 改写if"></a>逻辑判断 and(&amp;&amp;)和or(||) 改写if</h3><p>原理：利用逻辑判断的短路运算来实现</p>
<blockquote>
<p>短路：<code>&amp;&amp;</code> 中第一个表达式为假就不会去处理第二个表达式，<code>||</code> 则相反</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// if为真</div><div class="line">if (bool) &#123;</div><div class="line">    value = getYes();</div><div class="line">&#125;</div><div class="line">// &amp;&amp;改版</div><div class="line">bool &amp;&amp; (value = getYes());</div><div class="line"></div><div class="line">// if为假</div><div class="line">if (!bool) &#123;</div><div class="line">    value = getNo();</div><div class="line">&#125;</div><div class="line">bool || (value = getNo());</div></pre></td></tr></table></figure>
<p>优点：代码简化，更加清爽，write less</p>
<p>缺点：适用于简单判断逻辑，复杂的判断运算可读性较差，需友好注释</p>
<p>TIPS：适用于没有else的场景, 逻辑运算符后面不能带return</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 错误用法，运算符号后不能带return</div><div class="line">boll || return true;</div></pre></td></tr></table></figure>
<hr>
<h4 id="知识点插播-——-1"><a href="#知识点插播-——-1" class="headerlink" title="知识点插播 —— (1)"></a>知识点插播 —— (1)</h4><ol>
<li><p>三元运算符和逻辑运算符都有一层return作用，但不可作用于函数return语句，所以像以下这种用法都是错误的；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 错误用法</div><div class="line">function getResult(value) &#123;</div><div class="line">    value ? &apos;yes&apos; : &apos;no&apos;;</div><div class="line">&#125;</div><div class="line">var result = getResult(true); // 并不会有值返回</div></pre></td></tr></table></figure>
</li>
<li><p>js逻辑运算中，<code>0/&quot;&quot;/null/false/undefined/NaN</code>都会判为<code>false</code>，其它都为<code>true</code>；</p>
</li>
<li>很多开源代码中可见<code>if(!!attr)</code>，为什么不直接写<code>if(attr)</code>， 其实这是一种更严谨的写法，<code>!!attr</code>会强制转化为boolean类型。<code>typeof !!attr == true</code> 比 <code>typeof attr == true</code> 更加严谨。</li>
</ol>
<hr>
<h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// if版本</div><div class="line">if (a == 1) &#123;</div><div class="line">    return &apos;one&apos;;</div><div class="line">&#125; else if (a == 2) &#123;</div><div class="line">    return &apos;two&apos;;</div><div class="line">&#125; else if (a == 3) &#123;</div><div class="line">    return &apos;three&apos;;</div><div class="line">&#125; else &#123;</div><div class="line">    return &apos;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 对象属性 改版</div><div class="line">var ret = &#123;</div><div class="line">    1: &apos;one&apos;,</div><div class="line">    2: &apos;two&apos;,</div><div class="line">    3: &apos;three&apos;</div><div class="line">&#125;;</div><div class="line">return ret[a] ? ret[a] : &apos;&apos;;</div></pre></td></tr></table></figure>
<p>TIPS：</p>
<ol>
<li>判断值需为确定值，如<code>==</code> ，其它如<code>&gt;=/&lt;=/&gt;/&lt;</code>不适用</li>
<li>条件作为对象属性，需要注意对象属性的读取方式</li>
</ol>
<hr>
<h4 id="知识点插播-——-2"><a href="#知识点插播-——-2" class="headerlink" title="知识点插播 —— (2)"></a>知识点插播 —— (2)</h4><h5 id="JS的命名规则（变量的命名规则）"><a href="#JS的命名规则（变量的命名规则）" class="headerlink" title="JS的命名规则（变量的命名规则）"></a>JS的命名规则（变量的命名规则）</h5><ul>
<li>标识符只能由字母、数字、下划线和‘$’组成</li>
<li>数字不可以作为标识符的首字符</li>
</ul>
<h5 id="对象属性的命名规则"><a href="#对象属性的命名规则" class="headerlink" title="对象属性的命名规则"></a>对象属性的命名规则</h5><ul>
<li>通过<code>[]</code>操作符为对象添加属性时，属性名可以是任何字符串（包括只包含空格的字符串和空字符串）；</li>
<li>通过<code>.</code>操作符为对象添加属性时，属性名必须是合法的标识符名称；</li>
<li>如果属性名包含非法的标识符字符，则只能采用<code>obj[“propertyName”]</code>的形式；</li>
<li>如果属性名是合法的标识符，读取时可采用<code>obj.propertyName</code>或<code>obj[“propertyName”]</code>的形式；</li>
</ul>
<hr>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote>
<p>策略模式：定义一系列的算法，把它们一个个封装起来，目的就是将算法的使用与算法的实现分离开来</p>
</blockquote>
<p>以下为常见的表单验证，用策略模式来构建，替换<code>if...else</code>的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line">&lt;form id = &quot;registerForm&quot; method=&quot;post&quot; action=&quot;http://xxxx.com/api/register&quot;&gt;</div><div class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;userName&quot;&gt;</div><div class="line">    密码：&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;</div><div class="line">    手机号码：&lt;input type=&quot;text&quot; name=&quot;phoneNumber&quot;&gt;</div><div class="line">    &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">// js</div><div class="line">// 策略对象</div><div class="line">var strategies = &#123;</div><div class="line">    isNoEmpty: function (value, errorMsg) &#123;</div><div class="line">        if (value === &apos;&apos;) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    isNoSpace: function (value, errorMsg) &#123;</div><div class="line">        if (value.trim() === &apos;&apos;) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    minLength: function (value, length, errorMsg) &#123;</div><div class="line">        if (value.trim().length &lt; length) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    maxLength: function (value, length, errorMsg) &#123;</div><div class="line">        if (value.length &gt; length) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    isMobile: function (value, errorMsg) &#123;</div><div class="line">        if (!/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[7]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$/.test(value)) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;                </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 验证类</div><div class="line">var Validator = function() &#123;</div><div class="line">    this.cache = [];</div><div class="line">&#125;</div><div class="line">Validator.prototype.add = function(dom, rules) &#123;</div><div class="line">    var self = this;</div><div class="line">    for(var i = 0, rule; rule = rules[i++];) &#123;</div><div class="line">        (function(rule) &#123;</div><div class="line">            var strategyAry = rule.strategy.split(&apos;:&apos;);</div><div class="line">            var errorMsg = rule.errorMsg;</div><div class="line">            self.cache.push(function() &#123;</div><div class="line">            var strategy = strategyAry.shift();</div><div class="line">            strategyAry.unshift(dom.value);</div><div class="line">            strategyAry.push(errorMsg);</div><div class="line">            return strategies[strategy].apply(dom, strategyAry);</div><div class="line">            &#125;)</div><div class="line">        &#125;)(rule)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Validator.prototype.start = function() &#123;</div><div class="line">    for(var i = 0, validatorFunc; validatorFunc = this.cache[i++];) &#123;</div><div class="line">        var errorMsg = validatorFunc();</div><div class="line">        if (errorMsg) &#123;</div><div class="line">            return errorMsg;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 调用代码</div><div class="line">var registerForm = document.getElementById(&apos;registerForm&apos;);</div><div class="line"></div><div class="line">var validataFunc = function() &#123;</div><div class="line">    var validator = new Validator();</div><div class="line">    validator.add(registerForm.userName, [&#123;</div><div class="line">        strategy: &apos;isNoEmpty&apos;,</div><div class="line">        errorMsg: &apos;用户名不可为空&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">        strategy: &apos;isNoSpace&apos;,</div><div class="line">        errorMsg: &apos;不允许以空白字符命名&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">        strategy: &apos;minLength:2&apos;,</div><div class="line">        errorMsg: &apos;用户名长度不能小于2位&apos;</div><div class="line">    &#125;]);</div><div class="line">    validator.add(registerForm.password, [ &#123;</div><div class="line">        strategy: &apos;minLength:6&apos;,</div><div class="line">        errorMsg: &apos;密码长度不能小于6位&apos;</div><div class="line">    &#125;]);</div><div class="line">    validator.add(registerForm.phoneNumber, [&#123;</div><div class="line">        strategy: &apos;isMobile&apos;,</div><div class="line">        errorMsg: &apos;请输入正确的手机号码格式&apos;</div><div class="line">    &#125;]);</div><div class="line">    var errorMsg = validator.start();</div><div class="line">    return errorMsg;</div><div class="line">&#125;</div><div class="line"></div><div class="line">registerForm.onsubmit = function() &#123;</div><div class="line">    var errorMsg = validataFunc();</div><div class="line">    if (errorMsg) &#123;</div><div class="line">        alert(errorMsg);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程;</li>
<li>第二个部分是环境类Context，该Context接收客户端的请求，随后把请求委托给某一个策略类;</li>
</ul>
<p>优点： </p>
<ol>
<li>有效避免多重条件选择语句</li>
<li>提供了对外开放 - 封装原则的完美支持，将方法封装在独立的strategy中，使得它们易于切换、易于理解、易于扩展。</li>
<li>复用性</li>
</ol>
<p>缺点：</p>
<ol>
<li>增加了策略类/对象的使用</li>
<li>使用策略模式，必须先了解所有的strategy，违反了最少知识原则</li>
</ol>
<hr>
<p>参考资料</p>
<ol>
<li><a href="https://segmentfault.com/a/1190000006899198" target="_blank" rel="external">JavaScript设计模式之策略模式</a></li>
<li><a href="https://segmentfault.com/q/1010000007013419" target="_blank" rel="external">js减少if语句的技巧</a></li>
<li><a href="https://www.cnblogs.com/canger/p/6382944.html" target="_blank" rel="external">js对象属性的命名规则</a></li>
<li><a href="https://www.cnblogs.com/kester/p/6231328.html" target="_blank" rel="external">javascript中||和&amp;&amp;代替if</a></li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道JS面试题引发的血案]]></title>
      <url>/2018/04/09/%E4%B8%80%E9%81%93JS%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/</url>
      <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gyqnqf97j30go0b4mx1.jpg" alt="逗号表达式"></p>
<p>刚入职新公司，属于公司萌新一枚，一天下午对着屏幕看代码架构时。<br>BI项目组长给我看了一道面试别人的JS面试题。</p>
<p>虽然答对了，但把理由说错了，照样不及格。</p>
<p>话不多说，直接上题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">switch (a) &#123;</div><div class="line">    case 2:</div><div class="line">        console.log(2)</div><div class="line">    break;</div><div class="line">    case 1, 2, 3:  // 这里case是对比几呢？</div><div class="line">        console.log(1)</div><div class="line">    break;</div><div class="line">    default: </div><div class="line">    break;</div><div class="line">&#125;</div><div class="line">// result：最后什么都不会输出</div></pre></td></tr></table></figure>
<p>看完题如果答对并且知道理由的小伙伴，仅当加深印象；如果你也像我一样不明所以，请仔细往下看。</p>
<h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">表达式1，表达式2，表达式3，...... ，表达式n</div></pre></td></tr></table></figure>
<h4 id="逗号表达式的要领："><a href="#逗号表达式的要领：" class="headerlink" title="逗号表达式的要领："></a>逗号表达式的要领：</h4><ol>
<li>逗号表达式的运算过程为：从左往右逐个计算表达式</li>
<li>逗号表达式作为一个整体，它的值为最后一个表达式（也即表达式n）的值</li>
<li>逗号运算符的优先级别在所有运算符中最低</li>
</ol>
<p>有了上述的概念，再回过头来看面试题就很清晰了。</p>
<p>打铁趁热，再来一道题来加深下理解。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var i, j, k;</div><div class="line">for (i = 0, j = 0; i &lt; 10, j &lt; 6; i++, j++) &#123;</div><div class="line">    k = i+j;</div><div class="line">&#125;</div><div class="line">console.log(k); </div><div class="line"></div><div class="line">// result：10</div></pre></td></tr></table></figure>
<p>执行步骤如下表</p>
<table>
<thead>
<tr>
<th>i</th>
<th>j</th>
<th>k</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>10</td>
</tr>
</tbody>
</table>
<p>一直埋头写代码，没用到的知识总是容易忘记，刚好碰到，索性做下笔记加深印象，努力学习知识，仅为装X。</p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂谈：前端Web通信]]></title>
      <url>/2018/03/25/%E6%9D%82%E8%B0%88%EF%BC%9A%E5%89%8D%E7%AB%AFWeb%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gykse745j30go0ciglg.jpg" alt="前端Web通信"></p>
<p>Web2.0以来，Ajax的出世，解决了传统表单提交页面跳转，闪烁白屏等问题。使得Web页面可以实现局部更新，不仅减少了网络带宽，还大大提升了用户体验。</p>
<p>但Ajax并非是一把万能的钥匙，足以打开Web通信这扇大门，当请求遇到跨域通信时，Ajax就没辙了。</p>
<p>Web的快速发展让开发走向工程化的同时，要求工作维度进行划分（前端后端分工明细），以便扩展维护日益复杂庞大的项目需求。而前后端分离的开发方式正是这种需求背景下衍生的产物。（以前混编的代码现在是再也不想看到）</p>
<p>前后端分离的开发方式，如何进行数据通信是开发人员绕不过去的问题。作为开发同学的小伙伴客户端的浏览器，有点小调皮还做了一个同源策略的限制，当我们的数据请求遇到不同源的情况下（跨域），我们就得尝试其它的通信方法，不能Ajax一条道走到黑。</p>
<h3 id="什么是同源策略及限制"><a href="#什么是同源策略及限制" class="headerlink" title="什么是同源策略及限制"></a>什么是同源策略及限制</h3><blockquote>
<p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。</p>
</blockquote>
<p><strong>同源要求协议，域名，端口(默认80)三者都相同，否则为非同源。</strong></p>
<h4 id="同源策略限制："><a href="#同源策略限制：" class="headerlink" title="同源策略限制："></a>同源策略限制：</h4><ul>
<li>Cookie， LocalStorage和IndexDB无法读取</li>
<li>Dom无法获取</li>
<li>Ajax请求不能发送</li>
</ul>
<hr>
<h3 id="前后端如何通信"><a href="#前后端如何通信" class="headerlink" title="前后端如何通信"></a>前后端如何通信</h3><ol>
<li>Ajax（仅支持同源）</li>
<li>WebSocket （不受同源限制）</li>
<li>CORS （都支持，新的W3C通信标准）</li>
</ol>
<h3 id="如何创建Ajax"><a href="#如何创建Ajax" class="headerlink" title="如何创建Ajax"></a>如何创建Ajax</h3><ul>
<li>XMLHttpRequest对象的工作流程</li>
<li>兼容性处理</li>
<li>事件的触发条件</li>
<li>事件的触发顺序</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var xhr = XMLHttpRequest ? new XMLHttpRequest() : new window.ActiveXObject(&apos;Microsoft&apos;)</div><div class="line">var data = opt.data,</div><div class="line">    url = opt.url,</div><div class="line">    type = opt.type.toUpperCase(),</div><div class="line">    dataArr = [];</div><div class="line">for (var k in data) &#123;</div><div class="line">    dataArr.push(k + &apos;=&apos; + data[k]);</div><div class="line">&#125;</div><div class="line">if (type === &apos;GET&apos;) &#123;</div><div class="line">    url = url + &apos;?&apos; + dataArr.join(&apos;&amp;&apos;);</div><div class="line">    xhr.open(type, url.replace(/\?$/g, &apos;&apos;, true);</div><div class="line">    xhr.send();</div><div class="line">&#125; </div><div class="line">if (type === &apos;POST&apos;) &#123;</div><div class="line">    xhr.open(type, url, true);</div><div class="line">    xhr.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);</div><div class="line">    xhr.send(data.join(&apos;&amp;&apos;));</div><div class="line">&#125;</div><div class="line">xhr.onload = function() &#123;</div><div class="line">    if (xhr.status === 200 || xhr.status === 304) &#123;</div><div class="line">        var res;</div><div class="line">        if (opt.success &amp;&amp; opt.success instanceof Function) &#123;</div><div class="line">            res = xhr.responseText;</div><div class="line">            if (typeof res === &apos;string&apos;) &#123;</div><div class="line">                res = JSON.parse(res);</div><div class="line">                opt.success.call(xhr, res)</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (opt.error &amp;&amp; opt.error instanceof Function) &#123;</div><div class="line">                opt.error.call(xhr, res);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同源下，我们可以直接使用Ajax来与后端同学做数据通信，但是遇到跨域请求时，我们就得更换手中这把Ajax的钥匙，来重新配钥匙开锁</p>
<h3 id="跨域通信的几种方式"><a href="#跨域通信的几种方式" class="headerlink" title="跨域通信的几种方式"></a>跨域通信的几种方式</h3><ol>
<li>JSONP</li>
<li>Hash</li>
<li>postMessage (HTML5)</li>
<li>WebSocket</li>
<li>CORS (新的W3C通信标准)</li>
</ol>
<h4 id="1-JSONP"><a href="#1-JSONP" class="headerlink" title="1. JSONP"></a>1. JSONP</h4><p>JSONP原理：客户端通过动态创建script标签异步加载来实现，服务端callback返回客户端定义的方法名，让客户端进行调用获取数据。</p>
<p><strong>只支持Get请求</strong> (GET与POST的区别这里暂不细讲)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 客户端发送请求</div><div class="line">&lt;script src=&quot;http://www.abc.com?data=name&amp;callback=jsonpname&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">jsonpname(&#123;</div><div class="line">    data: &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="2-Hash"><a href="#2-Hash" class="headerlink" title="2. Hash"></a>2. Hash</h4><p>Hash原理：通过<code>window.onhashchange</code>事件监听来获取url中hash值来实现数据传输。与Get一样，有Url长度限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// A中代码</div><div class="line">var B = document.getElementdByTagName(&apos;iframe&apos;);</div><div class="line">B.src = B.src + &apos;#&apos; + &apos;data&apos;;</div><div class="line">// B中代码</div><div class="line">window.onhashchange = function()&#123;</div><div class="line">    var data = window.location.hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="3-postMessage"><a href="#3-postMessage" class="headerlink" title="3. postMessage"></a>3. postMessage</h4><p>postMessage是HTML5的API，可参考开发文档<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">window.postMessage</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// A.com向B.com发送信息</div><div class="line">Bwindow.postMessage(&apos;data&apos;,&apos;http://B.com&apos;)</div><div class="line">// B中监听</div><div class="line">window.addEventListener(&apos;message&apos;, function(event)&#123;</div><div class="line">    console.log(event.origin); // http://A.com</div><div class="line">    console.log(event.source); // Bwindow</div><div class="line">    console.log(event.data); // data</div><div class="line">&#125;, false)</div></pre></td></tr></table></figure></p>
<p>项目中应用场景：</p>
<ol>
<li>页面和其打开的新窗口的数据传递</li>
<li>多窗口之间消息传递</li>
<li>页面与嵌套的iframe消息传递</li>
<li>上面三个问题的跨域数据传递</li>
</ol>
<h4 id="4-WebSocket"><a href="#4-WebSocket" class="headerlink" title="4. WebSocket"></a>4. WebSocket</h4><p>WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，本身不受同源限制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// WebSocket代码示例</div><div class="line">var ws = new WebSocket(&apos;wss://echo.websocket.org&apos;);</div><div class="line"></div><div class="line">ws.onopen = function (evt) &#123;</div><div class="line">    console.log(&apos;Connection open ...&apos;);</div><div class="line">    ws.send(&apos;Hello WebSocket!&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ws.onmessage = function (evt) &#123;</div><div class="line">    console.log(&apos;Received Message: &apos; + evt.data);</div><div class="line">    ws.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line">ws.onclose = function (evt) &#123;</div><div class="line">    console.log(&apos;Connection closed.&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="5-CORS"><a href="#5-CORS" class="headerlink" title="5. CORS"></a>5. CORS</h4><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<p>浏览器兼容在XHR(IE8/9)及XHR2(&gt;=IE10)下需要做兼容处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// CORS代码示例</div><div class="line">fetch(&apos;/url&apos;, &#123;</div><div class="line">    method: &apos;get&apos;，</div><div class="line">&#125;).then(function(res)&#123;</div><div class="line">    ...</div><div class="line">&#125;).catch(function(err) &#123;</div><div class="line">    // 错误</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="–-End-–"><a href="#–-End-–" class="headerlink" title="– End –"></a>– End –</h3><p>JSONP有更好的兼容性，能兼容低版本浏览器，但是基于Get传输数据，会因为浏览器Url长度限制而限制数据大小。CORS在不考虑低版本浏览器时，无疑是目前最好前后端通信方案（单向），双向选择WebSocket，而多个页面之间的数据通信，如内嵌iFrame等，则推荐postMessage。</p>
<p>每种方案有不同的应用场景，解决问题不只有一种解决方案，实际项目开发中，需根据实际需求来挑选最优的方案。</p>
<hr>
<p>参考资料</p>
<ol>
<li><a href="https://www.cnblogs.com/dolphinX/p/3464056.html" target="_blank" rel="external">html5 postMessage解决跨域、跨窗口消息传递</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDI3MjA5MQ==&amp;mid=2697266201&amp;idx=2&amp;sn=1b2ca738a21c6d899e82fa6fe769446b&amp;chksm=8376fb2db401723b8a88295bfb74f98bddc2eb52dabffe221ec2f06ed49885f3e606231796d5&amp;mpshare=1&amp;scene=1&amp;srcid=0703jbtAFe3qTgBHtxuzBfgt&amp;pass_ticket=ml9eF7+G5p9IAyQPuOX/q0esEXgr51fhWBL88VWLmzU=#rd" target="_blank" rel="external">干货 | 前端常用的通信技术</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">阮一峰 — 跨域资源共享 CORS 详解</a></li>
<li><a href="https://blog.csdn.net/jlin991/article/details/57083865" target="_blank" rel="external">CORS正确使用姿势</a></li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杂谈：渐进增强与优雅降级]]></title>
      <url>/2018/03/21/%E6%9D%82%E8%B0%88%EF%BC%9A%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E4%B8%8E%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p>作为一名前端开发人员，最头疼的莫过于浏览器兼容。远古时期万恶的IE6，到现在CSS3不兼容的IE7/8.为了保证不同版本浏览器都有共同或更优化的用户体验，前端搬砖的我们不得不与浏览器兼容顽强斗争。而<strong>渐进增强</strong>和<strong>优雅降级</strong>两种不同的开发流程，也是在我们项目初期做调研选型时会考虑的一个点。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gykkh5a3j30go0990sr.jpg" alt="渐进增钱/优雅降级"></p>
<h3 id="渐进增强（Progressive-Enhancement）"><a href="#渐进增强（Progressive-Enhancement）" class="headerlink" title="渐进增强（Progressive Enhancement）"></a>渐进增强（Progressive Enhancement）</h3><p>一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p>
<h3 id="优雅降级（graceful-degradation）"><a href="#优雅降级（graceful-degradation）" class="headerlink" title="优雅降级（graceful degradation）"></a>优雅降级（graceful degradation）</h3><p>一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。</p>
<p>初一看这两个概念有点高大上，其实作为开发人员来说，多多少少已经在项目中运用只是你自己不察觉而已。换个词汇就比较好理解了，渐进增强（向上/前兼容），优雅降级（向下兼容），向上兼容高版本浏览器，向下兼容低版本浏览器。</p>
<h3 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h3><p><strong>渐进增强</strong>和<strong>优雅降级</strong>只是看待同种事物的两种观点。渐进增强和优雅降级都关注于同一网站在不同设备里不同浏览器下的表现程度。关键的区别则在于它们各自关注的着重点不同，以及这种不同的关注点如何影响项目开发的流程。</p>
<p>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 Chrome，Safari，IE、FireFox等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>
<p>渐进增强观点则认为应关注于内容本身。请注意其中的差别：我甚至连“浏览器”三个字都没提。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得渐进增强成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>
<p><strong>概括：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</strong></p>
<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.transition &#123; /*渐进增强写法*/</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">          transition: all .5s;</div><div class="line">&#125;</div><div class="line">.transition &#123; /*优雅降级写法*/</div><div class="line">          transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">&#125;</div><div class="line">// -webkit- / -moz- / -o- (浏览器前缀)</div></pre></td></tr></table></figure>
<ol>
<li>很久以前：浏览器前缀CSS3和正常CSS3都不支持；</li>
<li>不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；</li>
<li>现在：浏览器既支持前缀CSS3，又支持正常CSS3；</li>
<li>未来：浏览器不支持前缀CSS3，仅支持正常CSS3.</li>
</ol>
<p>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期3中前缀CSS3和正常CSS3都可用的情况下，正常CSS3会覆盖前缀CSS3。优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期3中前缀CSS3和正常CSS3都可用的情况下，前缀CSS3会覆盖正常的CSS3。</p>
<p>现实项目开发中，推荐使用渐进增强的写法（postcss的autofixer也是这种写法），因为前缀CSS3的某些属性在浏览器中的实现效果有可能与正常的CSS3实现效果不太一样，所以最终还是得以正常CSS3为准。</p>
<p>可参考张鑫旭大神的文章《<a href="http://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/" target="_blank" rel="external">需警惕CSS3属性的书写顺序</a>。</p>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul>
<li>低版本浏览器用户占比居多，优先采用渐进增强的开发流程；</li>
<li>高版本浏览器用户占比居多，优先采用优雅降级的开发流程；</li>
</ul>
<p>事实上绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。例如，淘宝，京东，新浪微博等网站前端的更新，不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。当然也有一些反例如阿里云，本身就是面向软件开发者，这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本，而且大多用的是谷歌浏览器，即使用IE浏览器，也是高版本IE浏览器，面对这种情况，优雅降级的开发流程才是更好的选择。</p>
<hr>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="http://blog.csdn.net/xiongzhengxiang/article/details/7999525" target="_blank" rel="external">渐进增强、优雅降级</a></li>
<li><a href="https://www.jianshu.com/p/d313f1108862" target="_blank" rel="external">渐进增强 VS 优雅降级</a></li>
<li><a href="https://segmentfault.com/q/1010000000264469/a-1020000005988192" target="_blank" rel="external">渐进增强和优雅降级之间的有什么不同?</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/" target="_blank" rel="external">需警惕CSS3属性的书写顺序</a></li>
<li><a href="http://www.cnblogs.com/mofish/p/3822879.html" target="_blank" rel="external">优雅降级和渐进增强的区别</a></li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 常见问题 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[天才迈向传奇 | 《硅谷钢铁侠:埃隆·马斯克》]]></title>
      <url>/2018/02/10/%E5%A4%A9%E6%89%8D%E8%BF%88%E5%90%91%E4%BC%A0%E5%A5%87-%E7%A1%85%E8%B0%B7%E9%92%A2%E9%93%81%E4%BE%A0-%E5%9F%83%E9%9A%86%E9%A9%AC%E6%96%AF%E5%85%8B/</url>
      <content type="html"><![CDATA[<p>埃隆·马斯克的名字也许有很多人不熟知，包括未看到这本书的我。可能我们对于硅谷很多传奇名人，听得多的都是比尔盖茨，乔布斯，扎克伯格，但是好像还真没听说过埃隆·马斯克的名字。那么换个词汇，“特斯拉”，相信不少关注极客圈或者喜欢折腾新科技产品的小伙伴，或多或少听过一点吧，而“特斯拉”的创始人兼CEO，正是埃隆·马斯克。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyldhcnwj308q0dw0tb.jpg" alt="5179mrE+WWL.jpg"></p>
<blockquote>
<p>埃隆·马斯克是一名风格独具的梦想家，也是眼光独到、一再开创新商业模式的企业家。从PayPal，到特斯拉、Space X、太阳城，他的创业历程中遭遇了无数棘手的事件，但是每一次突破都令全球惊艳。无论钟情于什么领域，他都可以展现出惊人的专注力。44岁的马斯克已经涉足颠覆互联网、 金融、汽车、航空以及能源业。他近乎疯狂的对科技的专注，使他成为目前最成功的连续创业者和科技创业家。 —— 百度百科</p>
</blockquote>
<h3 id="时间最贵"><a href="#时间最贵" class="headerlink" title="时间最贵"></a>时间最贵</h3><p>埃隆·马斯克在创立公司时要求员工节约开发成本，拒绝员工采购价格高昂的汽车零件，却可以花9万美元租一架飞机返自己的办公室。一般人看来，这不“有钱没处花么”，其实不然，处于这种职位的人，时间对他们来说更宝贵，他们可以利用时间来处理更多的事情，创造更多的财富。但对于普通人来说，心中的年头可能是“我是缺钱，但不缺时间”。我觉得背后隐藏的另一个词是效率，不管哪种工作成本，时间也是其中一种。记得曾在书中见到这么一个例子，一位高管不理解公司为何要付出额外的开销给他配置司机，他有自行驾车出行的能力，完全没有必要再付出一个人的工资来请司机。但是反过来，他每天上下班时，多出了一个小时来阅读工作汇报，项目计划，公司虽然多支出了一份薪水，但得到了高管更多的工作回报，于公司更有利。我们不可否认，人类的一生是很短暂的。不管多聪明，多优秀的人，也抵不过时间，逃不了生老病死。还在浪费时间的我们，是不是该想想自己剩下的时间，还有多少盈利呢？</p>
<h3 id="偏执狂梦想家"><a href="#偏执狂梦想家" class="headerlink" title="偏执狂梦想家"></a>偏执狂梦想家</h3><p>梦想每个人都有，就算没有，做个白日梦，还有不会的么。但是能认真思考并实现的，坚持完成的，寥寥无几。而埃隆·马斯克，从天才走向传奇。<br>当然传奇的道路上会有许多荆棘，梦想和野心没有经历挫折的洗礼，注定不够完美。埃隆·马斯克信仰自己的“武士道”精神，情愿切腹，也不愿忍受失败。最后拿柄武士刀成为一件装饰品，因为他战胜了失败。不管是PayPal、特斯拉、SpaceX、太阳城，他都赢了，亲手将自己的梦想一个一个实现。作为一名具有工业专业能力的天才，他相信科技可以改变世界，而现在，他已是硅谷的传奇。</p>
<h3 id="多核并行"><a href="#多核并行" class="headerlink" title="多核并行"></a>多核并行</h3><p>我曾试想着自己创业时的场景，诘问自己能否做好一个项目，运营好一家公司。未读这本书之前，我认为其它创业成功的人也许同我同我一样，在他们创业时，从一而终，至少是第一家公司走上正轨之前，都不会有精力去折腾第二家，第三家公司。而埃隆·马斯克，就像一个多核的CPU，并行处理不同的任务，同时兼顾着PayPal，特斯拉，SpaceX多家公司，而且还没有宕机重启过。越是压力承肩时，越能做出最好的决策，这不疑需要高度的专注力与毕其功于一役的决心。</p>
<h3 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h3><p>我自己本身很喜欢小唐尼的《钢铁侠》系列电影，读完埃隆·马斯克，确实有很多钢铁侠的影子，埃隆·马斯克并不是钢铁侠的原型，但个人自身的魅力，性格特征，偏执成狂，强硬做派等，与唐尼的钢铁侠不谋而合。<br>摒弃掉书中很多我未能理解的技术词汇，我觉得作为平凡的我们，即使没有超高的智商和不凡的能力，也不妨将梦想再放大一些，万一哪天真的见鬼实现了呢。当然圆梦的道路上，你可不一定走得顺畅，但不妨迈出脚去走走看，指不定还能得到上火星居住的机会。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不曾停歇 | “超级个体”]]></title>
      <url>/2018/01/29/%E4%B8%8D%E6%9B%BE%E5%81%9C%E6%AD%87-%E8%B6%85%E7%BA%A7%E4%B8%AA%E4%BD%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“你不努力，谁也给不了你想要的生活。欲带皇冠，必承其重。你想过上自己梦想的生活，就应该选择一条属于自己的道路，并为此付出别人无法企及的努力。”<br>——韦娜 《世界不曾亏欠每一个努力的人》</p>
</blockquote>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyqzf1qxj30go0b40tp.jpg" alt=""></p>
<h3 id="新知识的快感，让知识瘫痪"><a href="#新知识的快感，让知识瘫痪" class="headerlink" title="新知识的快感，让知识瘫痪"></a>新知识的快感，让知识瘫痪</h3><p>当我们尝试去学习新知识时，会有很多的新鲜感。而相比在旧有知识继续升华沉淀，你会感到越来越枯燥，甚至开始厌恶。的确，旧知识的学习遇到瓶颈，需要花费更多的时间精力来沉淀。而新知识，相当于把玩一件新式物件，调起你喜新厌旧的本性。所以很多人，包括我自己，满足于新知识的快感，学得多但不精，略懂皮毛而不深究。久而久之，知识越来越多，不规整，不成体系，根基不稳，最后受不住顶端压力，以崩塌告终。想要知识大厦牢固，逻辑清晰不混乱，合理地利用大脑储藏就是必经之路。抽出时间精力对旧有知识形成体系沉淀，打好地基，再逐步扩展汲取新知识，添砖加瓦。这样你的知识殿堂才足够牢固，又具扩展性。</p>
<h3 id="成功不是从零开始，而是在其领域中知识能力的积累"><a href="#成功不是从零开始，而是在其领域中知识能力的积累" class="headerlink" title="成功不是从零开始，而是在其领域中知识能力的积累"></a>成功不是从零开始，而是在其领域中知识能力的积累</h3><p>成功不是让你去开创一个你从未接触过的行业，从零开始去做起来，这样你成功的可能性极低。正如我们从小到大的学习生涯，数理化知识的积累，从语数英再到物理，化学，历史，政治等。没有语数英的基础，不会有后面科目的扩展学习。许多人创业当老板，程序员跑去当产品经理，产品经理跑来当投资人，都是利用自己原有的知识和经验，融入到自己新的工作上并取得成功，而不是摒弃掉你之前的果实，重新栽种一颗新的树苗，再拾起浇水驱虫的工作。</p>
<h3 id="白日梦想家"><a href="#白日梦想家" class="headerlink" title="白日梦想家"></a>白日梦想家</h3><p>乐观无疑是好事，但是过于乐观，你的大脑缺乏压力，没有紧迫感，放松了对问题的思考。居安而思危，对危机要有足够的警惕性，做好危机应对的准备，方可让你离梦想更进一步，不至于危机到来时，一脸懵逼。</p>
<h3 id="安全感的奴隶"><a href="#安全感的奴隶" class="headerlink" title="安全感的奴隶"></a>安全感的奴隶</h3><p>熟悉的工作岗位，固定的生活方式。会让我们形成一种安全感，对其依赖。不求改变，不敢尝试，不敢跳出自己的舒适圈，觉得自己的人生足够安逸，日复一日直到退休，似乎你已经看到自己退休的样子。殊不知现在企业的寿命比员工的寿命还要更短，世界500强的企业，寿命也不过30-40年左右。很明显，我们为企业工作到退休的时间可远远不止这点时间。所以只有求变，不断适应社会的步伐，不断学习挑战突破自己，提升自己的软技能，职场竞争能力，方可收获真正的安全感。</p>
<h3 id="什么时候适合陪伴父母亲"><a href="#什么时候适合陪伴父母亲" class="headerlink" title="什么时候适合陪伴父母亲"></a>什么时候适合陪伴父母亲</h3><p>我们总觉得年轻时到大城市打拼，不能常伴父母身旁，特变是中国“百行孝为先”的传统思想，让我们对父母总有一份愧疚。换个角度思考，我们二三十岁时，父母亲的身体都还健壮，生活可以自理，甚至还未到退休年龄，不至于丧失生存能力。而到父母亲七十八十岁左右，年纪比较大了，身体病痛也随之增加，这个时候，我们大概四五十岁左右，作为子女的我们在这个阶段需要花费大量的时间、精力、财力去照顾父母。那么你想在四五十岁阶段具备充裕的时间，财务自由，时间自由，靠的是什么，靠的不就是在你年轻的时候去拼搏去奋斗，到大城市去打拼换取而来，自己四五十岁时的时间及财富么。<br>所以，趁年轻，多出去浪浪。</p>
<h3 id="适者生存"><a href="#适者生存" class="headerlink" title="适者生存"></a>适者生存</h3><p>这个时代什么样的人会生存下来，智者？强者？都不是，这个时代，不是“智者生存”，也不是“强者生存”，而是“适者生存”，是能够适应自己的生存环境，才不至于被淘汰在任何一个时代的个体。</p>
<h3 id="乐高式能力组合"><a href="#乐高式能力组合" class="headerlink" title="乐高式能力组合"></a>乐高式能力组合</h3><p>单一的能力并不能使你更强大，在这个快节奏的时代，每个行业的知识都有可能被取代替换，科技带来的行业冲击，生活方式的改变，没有谁可以保证你所在的行业，你的工作不会被其它人或机器所替代。<br>所谓技不压身，多一项能力，多一种技术，就意味着你比别人多一份机会，多一份优势。不断学习将单一的能力拼接合成你自己的软实力。</p>
<h3 id="结尾-——-成为“超级个体”"><a href="#结尾-——-成为“超级个体”" class="headerlink" title="结尾 —— 成为“超级个体”"></a>结尾 —— 成为“超级个体”</h3><p>每个人都有机会依靠自己的努力和才华成功。<br>这个时代，有才而不成功的几率变小，缺的是怕你没有才华还不努力。</p>
]]></content>
      
        <categories>
            
            <category> 日更文集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日更文集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你有我的知识焦虑么？]]></title>
      <url>/2018/01/28/%E4%BD%A0%E6%9C%89%E6%88%91%E7%9A%84%E7%9F%A5%E8%AF%86%E7%84%A6%E8%99%91%E4%B9%88/</url>
      <content type="html"><![CDATA[<h3 id="”知识焦虑“"><a href="#”知识焦虑“" class="headerlink" title="”知识焦虑“"></a>”知识焦虑“</h3><blockquote>
<p>在信息爆炸时代，人们对信息的吸收是呈平方数增长，但面对如此大量的信息，人类的思维模式远没有高速到接受自如的阶段。由此造成一系列的自我强迫和紧张。</p>
</blockquote>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g4gyry1tjtj30h80beq40.jpg" alt="你有我的知识焦虑么？"></p>
<p>我相信我们现处的这个时代，很多人跟我一样，都有一份“知识焦虑”，对自己未知的信息和知识，给予了自己的自我强迫与紧张。<br>面对自己的不努力，懒惰懈怠，都会有或多或少的一份不安全感与恨其不争的无奈。<br>懒散过后，又开始信誓旦旦地制定学习计划，希望通过学习课程，读书来让自己的内心变得充实些。</p>
<p>现实中，如果你有个有钱的老爸，让你衣食无忧，光鲜亮丽，些许你会少点焦虑。<br>可惜大多数人如你我，并没有这样足以啃老的臂膀。<br>唯有步履匆匆，用兢兢业业的工作和不敢停歇的学习，来让自己拥有一份份看上去不那么不堪的安全感。<br>因为明白，不学习不努力就意味着不拼爹，不拼高考，你已经没有什么可以跟他们比拼的了。</p>
<p>但是，你的努力真的对了么？？？<br>你在背的雅思英语，你在看的MBA，你在看的成功学。真的适合你么？？？</p>
<h3 id="改变你的思维认知"><a href="#改变你的思维认知" class="headerlink" title="改变你的思维认知"></a>改变你的思维认知</h3><blockquote>
<p>“立场，体验，意见” —— “目标，方法，行动”</p>
</blockquote>
<p>思维方式的转变，我们每一个人的大脑里总会产生各种天马行空的想法或创意，每个人有不同的个人体验和对事物的意见。但是真正落实实践自己想法，行动起来的却少之又少。</p>
<p>投资界有这么个故事，投资人考核一家初创公司，不是看公司第一把手，而是看公司的第二把手。因为公司第一把手大多是公司创意想法的制造者，而公司第二把手则是执行者，如果执行者能力足够胜任，那么证明这家公司可行。因为第一把手已经成功地推销了自己的想法，并且得到其它牛人的认可，并且确保可以正确有效地执行。那么公司可以成功地运营起来。<br>初创公司空有想法创意，不能有效执行实施，终究是空谈。</p>
<p>我们的思维方式来自从小的生活环境，父母，学校，家庭的耳濡目染。<br>更多的是来自父母，“富爸爸，穷爸爸”的思维方式，把父辈的那一套思维方式传递给了我们。</p>
<p>随着“阶层危机”的到来，让社会阶层越来越固化，平民阶层与上层阶层的界限，除了资源的比拼，更深层次地是思维认知的差距。“富爸爸，穷爸爸”不是现金存款房车的比拼，而是比拼贫富的思维认知。<br>“贫穷限制了你的思维”这并不是一句调侃的话，而是鲜血淋漓的写照。</p>
<p>想改变你所处的阶层，想从平民阶层晋升到上层阶层，唯有从改变你的思维认知开始，让你的思维完成从“立场，体验，意见”到“目标，方法，行动”转变。使你的思维认知不再处于贫穷。</p>
<h3 id="“体验型消费”"><a href="#“体验型消费”" class="headerlink" title="“体验型消费”"></a>“体验型消费”</h3><p>如果你没有知识，出去旅游看见美丽的风景，你只会说“哇靠，太美了”。<br>而有知识的人，当你看到夕阳余晖… 你的脑海浮现的是：“落霞与孤鹜齐飞，秋水共长天一色。” 而不是：“卧槽，好多鸟，好多鸟，卧槽，真TM太好看了！”<br>没有文化积淀的旅行，到哪不过是在你的相机中多留几张照片而已。<br>作为一个俗人，欣赏它的美并不需要任何的门槛。但是没有文化知识的积淀，你就只是在走马观花，到此一游。</p>
<h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><p>知识量爆发式增长，知识付费的兴起，各种在线音视频课程，公众号课堂雨后春笋般增长，人们获取知识的成本越来越低。但与之对比是人们的时间却被剧烈分割，时间一点一点被碎片化。不再拥有像学校课堂里，让你整整45分钟坐在课桌前，学完一学期的课程。<br>知识量与学习时间成反比增长，传统的、系统化的学习方法已经不再有效。我们所处的时代，有太多的诱惑纷扰我们的集中力，很多人时不时地去看手机，一刷个朋友圈，一看个头条微博，大半的时间就这样不翼而飞。强迫你拿着本书从头看到尾，这样耗时，又学不牢，估计看完了也就完了，又剩下多少是你自己的。</p>
<p>因此，如何利用有限的时间来完成自己的知识储备，对当下的我们尤为重要。</p>
<h4 id="1-20-的时间学习80-的知识"><a href="#1-20-的时间学习80-的知识" class="headerlink" title="1. 20%的时间学习80%的知识"></a>1. 20%的时间学习80%的知识</h4><p>80%的知识并不难学会，但是剩下20%的进阶知识往往需要花费更多的时间精力才可并入囊中。鉴于投入与产出成正比，20%的时间换取80%的知识显然更符合当下，学习过后通过转述或者读书笔记加深自己的理解和记忆，变成自己的知识储备。</p>
<h4 id="2-找一个牛人，跟着他学"><a href="#2-找一个牛人，跟着他学" class="headerlink" title="2. 找一个牛人，跟着他学"></a>2. 找一个牛人，跟着他学</h4><p>自己摸索前行，总有很多荆棘。避免少走弯路，我们缺少一个领路人。<br>而行业/知识领域界的大牛，他就是我们想要到达的终点，也是我们学习的参考对象。跟着他学，我们将知道自己所要学习哪些知识，朝哪个方向努力，有哪些坑需要跳过。有人给你指明了前方的路，你更容易到达，这样焦虑负担相对小了些。</p>
<h4 id="3-先搭建概念大厦，再具体学习"><a href="#3-先搭建概念大厦，再具体学习" class="headerlink" title="3. 先搭建概念大厦，再具体学习"></a>3. 先搭建概念大厦，再具体学习</h4><p>我们对于未知的知识或多或少都有抗拒，如果一开始就抗拒，不利于你去接受认可它。<br>学习新知识，可以先了解新知识各种概念名词，再去细化具体每个概念的基础学习。正如我们手中拿起一本未读过的书，先翻阅目录，了解每个章节的概念名词，再去翻阅具体每个章节的知识。减少来自我们自身的抗拒，并在脑海中构建起新知识的骨架，再一点点拼积木完成学习积累。</p>
<hr>
<p>从自身做出改变，总是一件很难很难的事情。<br>但是一点点的不同，都是对自身努力的一次美好见证。<br>愿你我终有所得。</p>
]]></content>
      
        <categories>
            
            <category> 日更文集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日更文集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac终端配置，DIY你的Terminal（iTerm2 + Oh-My-Zsh）]]></title>
      <url>/2018/01/10/Mac%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE%EF%BC%8CDIY%E4%BD%A0%E7%9A%84Terminal%EF%BC%88iTerm2-Oh-My-Zsh%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>使用mac osx一年以来，自带的Terminal终端一直都是白底黑字，食之无味，越来越缺乏新鲜感，怎么也得想个法子来刺激下眼球。<br>不然花那么多大洋买你回来是要哪般，难道真是为来学习工作？？？<br>怎么可能，不装逼谁TM买苹果。。。好吧，其实为来工作学习，装逼纯属业余。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyou35iuj30fu0chjrs.jpg" alt="最终效果图"></p>
<p>完成配置后的终端具备功能：</p>
<ol>
<li>语法高亮</li>
<li>命令行tab补全</li>
<li>自动提示符</li>
<li>显示Git仓库状态等功能</li>
<li>⌘+r 快速清空代码面板，跟终端输入clear一样的效果</li>
</ol>
<hr>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-下载iTerm2"><a href="#1-下载iTerm2" class="headerlink" title="1. 下载iTerm2"></a>1. 下载<a href="http://www.iterm2.com/" target="_blank" rel="external">iTerm2</a></h3><h3 id="2-解压后安装iTerm2并打开"><a href="#2-解压后安装iTerm2并打开" class="headerlink" title="2. 解压后安装iTerm2并打开"></a>2. 解压后安装iTerm2并打开</h3><ol>
<li>iTerm2 -&gt; Make iTerm2 Default Term<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g4gyp4956wj308p0alweq.jpg" alt="将iTerm2设置为默认终端"></li>
<li>打开偏好设置preference，选中Keys，勾选Hotkey下的Show/hide iTerm2 with a system-wide hotkey，将热键设置为 ⌘+. ，这样你就可以通过 ⌘+. 全局热键来打开或关闭iTerm2窗口，非常方便<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gypcxlv4j30qi0e3dhb.jpg" alt="设置Hotkey"><h3 id="3-配色方案"><a href="#3-配色方案" class="headerlink" title="3. 配色方案"></a>3. 配色方案</h3>选用 <a href="http://ethanschoonover.com/solarized" target="_blank" rel="external">solarized</a>，下载解压，然后打开 iTerm2 下的偏好设置 preference ，点开 profiles 下的colors 选项，点击右下角的 Color Presets 选项，选择import ，导入解压到的 solarized 文件下的Solarized Dark.itermcolors<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g4gypn718uj30pe0c2aav.jpg" alt="导入配色方案"></li>
</ol>
<h3 id="4-安装oh-my-zsh"><a href="#4-安装oh-my-zsh" class="headerlink" title="4. 安装oh-my-zsh"></a>4. 安装oh-my-zsh</h3><p>github：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a><br>官方提供 curl 和 wget 两种安装方式<br>curl 安装：<br><code>sh -c ``&quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code><br>wget安装：<br><code>sh -c ``&quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></p>
<h3 id="5-配置主题"><a href="#5-配置主题" class="headerlink" title="5. 配置主题"></a>5. 配置主题</h3><p>安装oh-my-zsh成功后</p>
<ol>
<li>用 vim 编辑隐藏文件 .zshrc， 终端输入<code>vi ~/.zshrc</code><br><code>ZSH_THEME=&quot;agnoster&quot;</code> 将zsh主题修改为“agnoster”</li>
<li>应用“agnoster”主题需要特殊的字体支持，否则会出现乱码情况，<br>使用 <a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf" target="_blank" rel="external">Meslo</a> 字体，点开链接点击 view raw 下载字体</li>
<li>安装字体到系统字体册</li>
<li><p>在iTerm2中应用字体 iTerm -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font）<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g4gyq0g0elj30pg0cjaax.jpg" alt="iTerm2应用字体"></p>
</li>
<li><p>重新打开iTerm2窗口（或新打开一个iTerm2窗口）即可以看到字体效果</p>
</li>
</ol>
<h3 id="6-自动提示与命令补全"><a href="#6-自动提示与命令补全" class="headerlink" title="6. 自动提示与命令补全"></a>6. 自动提示与命令补全</h3><p>比iTerm2自带的更强大的命令提示与补全</p>
<ol>
<li><p>克隆仓库到本地 ~/.oh-my-zsh/custom/plugins 路径下<br><code>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></p>
</li>
<li><p>用 vim 编辑 .zshrc 文件，找到插件设置命令，默认是 <code>plugins=(git)</code> ，我们把它修改为<code>plugins=(zsh-autosuggestions git)</code></p>
</li>
</ol>
<p>PS：当你重新打开终端时可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些：</p>
<ol>
<li><code>cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code></li>
<li>用 vim 编辑 zsh-autosuggestions.zsh 文件，修改<code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=10&#39;</code></li>
</ol>
<h3 id="7-语法高亮效果"><a href="#7-语法高亮效果" class="headerlink" title="7. 语法高亮效果"></a>7. 语法高亮效果</h3><ol>
<li>使用homebrew包管理工具安装 zsh-syntax-highlighting 插件<br><code>brew install zsh-syntax-highlighting</code><br>如果电脑上还没有安装homebrew，请先安装homebrew<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li>
<li>配置.zshrc文件，插入一行<br><code>source /xxx/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code><br>(注意： /xxx/ 代表.zshrc所在的路径)</li>
<li>加载.zshrc配置<br><code>source ~/.zshrc</code></li>
<li>重新打开iTerm2窗口（或新打开一个iTerm2窗口）即可以看到效果</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol>
<li>iTerm2 默认使用dash改用zsh解决方法：<code>chsh -s /bin/zsh</code></li>
<li>iTerm2 zsh切换回原来的dash：<code>chsh -s /bin/bash</code></li>
<li>卸载<code>oh my zsh</code>，在命令行输入：<code>uninstall_oh_my_zsh</code></li>
<li>路径前缀的XX@XX太长，缩短问题：<br>编辑<code>~/.oh-my-zsh/themes/agnoster.zsh-theme</code>主体文件，将里面的<code>build_prompt</code>下的<code>prompt_context</code>字段在前面加<code>#</code>注释掉即可</li>
</ol>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 工具类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具类 </tag>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序爬坑日记]]></title>
      <url>/2017/12/08/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%88%AC%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>新公司上手小程序。<br>30天，从入门到现在，还没放弃。。。</p>
<p>虽然小程序发布出来快一年了，爬坑的兄弟们大多把坑都踩平了。而我一直停留在“Hello World”的学习阶段。<br>一来没项目，只有项目才是实践学习的根本；<br>二来刚出来，总是有很多坑。爬坑总是痛并快乐着。</p>
<p>再多的借口，产品项目需求拍在桌前，都得缴械投降。<br>不要怂撸起袖子，就是干。</p>
<p><img src="http://wx4.sinaimg.cn/mw690/72ec38a9gy1fm94qk59f7j21kw0yt42o.jpg" alt="微信小程序"></p>
<h3 id="初识小程序"><a href="#初识小程序" class="headerlink" title="初识小程序"></a>初识小程序</h3><p>微信推出小程序，想要实现即开即用，用完即走的用户体验。免去APP下载安装繁琐的流程。听起来像谷歌推出的PWA，不过PWA普及到国内还有段时间。而小程序借助于微信的用户群体，植入成本低，容易被用户接受。</p>
<p>小程序的代码风格跟Vue其实挺像，对于习惯Vue开发模式的同学，上手并没有太大的问题。</p>
<p>小程序不支持前端主流框架，如Vue，Angular，React，jQuery等，而且小程序有自己的一套视图容器(Dom)的写法，跟平常我们在web上写HTML不一样。不过CSS3那些变化不大。虽然文件名改成了(.wxss)</p>
<p>本司项目，使用webpack做打包工具，将代码编译成符合小程序的代码目录规范，采用wechat-mina-loader插件，实际开发起来跟在Vue下开发习惯一样。<br>babel完成ES6转ES5，sass编译，压缩转化等工作都放到webpack中去做。</p>
<h3 id="不支持dom操作"><a href="#不支持dom操作" class="headerlink" title="不支持dom操作"></a>不支持dom操作</h3><p>小程序脚本内不能使用window,document对象，所以无法操作dom。如果想操作节点，可用<code>wx.createSelectorQuery()</code></p>
<p>另外数据驱动的开发模式，跟Vue相同，只是写法换了（vue: v-if，小程序: wx:if）</p>
<h3 id="rpx布局"><a href="#rpx布局" class="headerlink" title="rpx布局"></a>rpx布局</h3><blockquote>
<p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p>
</blockquote>
<p>设计师做设计图以iPhone6作为设计稿基准就可以，基本上可以用rpx替换px，不过在一些表单或者提示页面，使用设计稿上的rpx会让小屏幕手机看着尺寸略小，提示页面可参照weui用px来实现</p>
<h3 id="路由层级"><a href="#路由层级" class="headerlink" title="路由层级"></a>路由层级</h3><ul>
<li><code>wx.navigateTo(OBJECT)</code><br>保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面</li>
<li><code>wx.redirctTo(OBJECT)</code><br>关闭当前页面，跳转到应用内的某个页面</li>
<li><code>wx.switchTab(OBJECT)</code><br>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</li>
<li><code>wx.reLaunch(OBJECT)</code><br>关闭所有页面，打开到应用内的某个页面</li>
</ul>
<p>小程序只能同时打开打开5个页面，当打开5个页面后，wx.navigateTo不能正常打开新页面，请避免多层级的交互方式，或者使用wx.redirctTo重定向</p>
<h3 id="tabBar底部导航栏"><a href="#tabBar底部导航栏" class="headerlink" title="tabBar底部导航栏"></a>tabBar底部导航栏</h3><p>tabBar是一个数组。配置最少2个，最多5个，tab数组按顺序排序</p>
<h3 id="页面滚动到顶部"><a href="#页面滚动到顶部" class="headerlink" title="页面滚动到顶部"></a>页面滚动到顶部</h3><p>基础库1.4.0支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wx.pageScrollTo(&#123;</div><div class="line">  scrollTop: 0   //滚动到页面的目标位置（单位px）</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="图片资源，CSS中的背景图片"><a href="#图片资源，CSS中的背景图片" class="headerlink" title="图片资源，CSS中的背景图片"></a>图片资源，CSS中的背景图片</h3><p>CSS中无法使用本地资源(开发目录中)的图片作为background-image。可以使用网络图片资源，或base64，或者使用image标签。tabBar的icon资源可使用本地资源</p>
<h3 id="unionid与openid的区别"><a href="#unionid与openid的区别" class="headerlink" title="unionid与openid的区别"></a>unionid与openid的区别</h3><p>每个用户在每个小程序里面都有唯一的openid，如果想在多个公众号，小程序里面共享用户信息，统一识别该用户，则需要用到unionid。为了获取uniond则需要注册微信开放平台，将需要共享的小程序，公众号进行绑定（不超过10个，超过10个还要申请认证称为第三发平台）。</p>
<h3 id="textarea在滚动页面中的bug"><a href="#textarea在滚动页面中的bug" class="headerlink" title="textarea在滚动页面中的bug"></a>textarea在滚动页面中的bug</h3><p>textarea,map等组件是由客户端创建的原生组件，它的层级是最高的。如果有遇到定位元素的话。永远在最上面，盖不住。</p>
<ul>
<li>请勿在 scroll-view、swiper、picker-view、movable-view 中使用 textarea 组件</li>
<li>CSS动画对textarea无效</li>
</ul>
<p>项目场景：页面底部固定了一个按钮（position:fixed), 页面滚动时，textarea总是在按钮上面，点击按钮就点到了textarea</p>
<h3 id="可以设置网络请求的超时时间"><a href="#可以设置网络请求的超时时间" class="headerlink" title="可以设置网络请求的超时时间"></a>可以设置网络请求的超时时间</h3><p>app.js中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;networkTimeout&quot;: &#123;</div><div class="line">  &quot;request&quot;: 10000 // 10秒</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="window配置"><a href="#window配置" class="headerlink" title="window配置"></a>window配置</h3><p>navigationBarTextStyle 导航栏标题颜色仅支持black/white<br>状态栏，导航条，标题，窗口背景色支持纯色，不支持渐变色</p>
<h3 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h3><ul>
<li><p>url中添加参数，<br>如<code>url?a=1&amp;b=2</code>, <code>onLoad(options) options.query.a, options.query.b</code>可获取到</p>
</li>
<li><p>扫描小程序码进页面，如果想获取小程序码url中所带的参数，可通过options.scene获取，不过需要对二维码中的scene值进行转换decodeURIComponent(options.scene), 调试阶段可以使用开发工具的条件编译自定义参数 scene=xxxx 进行模拟，开发工具模拟时的 scene 的参数值需要进行 urlencode (启动参数：scene=n%3D1001) 实际为scene=n=1001，参数n=1001</p>
</li>
</ul>
<h3 id="image标签图片"><a href="#image标签图片" class="headerlink" title="image标签图片"></a>image标签图片</h3><p>image默认width: 300px, height: 225px, lazy-load懒加载只对page与scroll-view下的image有效<br>mode缩放模式，mode=”widthFix”比较常用(宽度不变，高度自动变化，保持原图宽高比不变)</p>
<h3 id="小程序可以监听小程序的关闭后，但是无法阻断"><a href="#小程序可以监听小程序的关闭后，但是无法阻断" class="headerlink" title="小程序可以监听小程序的关闭后，但是无法阻断"></a>小程序可以监听小程序的关闭后，但是无法阻断</h3><p>场景：想在小程序退出时弹出个提示框，并阻止关闭（暂时无法实现）</p>
<h3 id="小程序码"><a href="#小程序码" class="headerlink" title="小程序码"></a>小程序码</h3><p>小程序码(葵花码)有几种方式，只有发布过小程序才可正常显示小程序码</p>
<h3 id="小程序第一次提交的审核时间较后面的长"><a href="#小程序第一次提交的审核时间较后面的长" class="headerlink" title="小程序第一次提交的审核时间较后面的长"></a>小程序第一次提交的审核时间较后面的长</h3><p>第一次提交审核一般1天到2天。所以为了能准点上线，建议先上一次临时的版本(放一个提示页面都可以)，过了第一次审核发布再说。日常提交审核，2-3小时就可以。</p>
<h3 id="频繁地setData会造成性能问题"><a href="#频繁地setData会造成性能问题" class="headerlink" title="频繁地setData会造成性能问题"></a>频繁地setData会造成性能问题</h3><p>频繁地setData操作，会出现卡顿，操作反馈延迟严重，甚至有可能闪退。</p>
<blockquote>
<p>场景：原计划用countUp做数字动画，原理就是频繁地改变数字值，setData操作，渲染到模版上。</p>
</blockquote>
<h3 id="ES6转ES5，小程序检测目录中的js文件-极少"><a href="#ES6转ES5，小程序检测目录中的js文件-极少" class="headerlink" title="ES6转ES5，小程序检测目录中的js文件(极少)"></a>ES6转ES5，小程序检测目录中的js文件(极少)</h3><p>项目中用了webpack进行ES6转ES5，所以关闭了微信小程序的ES6转ES5功能。这个坑就比较隐蔽了，测试的时候在5S真机上报js错误，发现有个js(使用了ES6，没有转ES5)文件没有使用，微信小程序会去检测目录中的js文件，如果关闭了微信自带的ES6转ES5，检测到目录中js文件不兼容ES5，就报错。这个Bug只在5S真机里出现过，5C都正常。如果开启了微信开发工具中的ES6转ES5，则会自动帮你完成转化工作，不会出现类似问题。</p>
<p>分享些小程序开发比较常用的第三方库</p>
<ul>
<li>weui-wxss(小程序版的weui样式库) Github: <a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="external">https://github.com/Tencent/weui-wxss</a></li>
<li>wepy(小程序组件化框架) Github: <a href="https://github.com/Tencent/wepy" target="_blank" rel="external">https://github.com/Tencent/wepy</a></li>
<li>skyvow/vux(小程序组件库) Github: <a href="https://github.com/skyvow/wux" target="_blank" rel="external">https://github.com/skyvow/wux</a></li>
<li>xiaolin3303/wx-charts(小程序图标) Github: <a href="https://github.com/xiaolin3303/wx-charts" target="_blank" rel="external">https://github.com/xiaolin3303/wx-charts</a></li>
</ul>
<blockquote>
<p>作者：以乐之名<br>  本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm常用命令整理]]></title>
      <url>/2017/10/04/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>npm是一个NodeJS包管理跟分发工具，已经成为了非官方的发布node模块（包）的标准。<br>它可以帮助我们解决代码部署上的一些问题，将开发者从繁琐的包管理工作中(版本、依赖等)解放出来，更加专注于功能上的开发，大大提升我们的工作效率。</p>
<p>以下为日常应用中收集整理的npm常用命令:</p>
<h4 id="初始化-引导你创建一个package-json文件"><a href="#初始化-引导你创建一个package-json文件" class="headerlink" title="初始化 引导你创建一个package.json文件"></a>初始化 引导你创建一个package.json文件</h4><p><code>npm init</code></p>
<h4 id="查看package-json文件内容格式"><a href="#查看package-json文件内容格式" class="headerlink" title="查看package.json文件内容格式"></a>查看package.json文件内容格式</h4><p><code>npm help json</code></p>
<h4 id="安装模块-install-可简写为-i"><a href="#安装模块-install-可简写为-i" class="headerlink" title="安装模块 (install 可简写为 i)"></a>安装模块 (install 可简写为 i)</h4><p><code>npm install moduleName</code><br>(安装到当前目录，仅在当前目录可用)</p>
<h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p><code>npm install moduleName -g</code><br>(全局安装，可在所有目录下使用)</p>
<h4 id="安装package-json中的模块"><a href="#安装package-json中的模块" class="headerlink" title="安装package.json中的模块"></a>安装package.json中的模块</h4><p><code>npm install</code><br>(目录中存在package.json，将安装package.json配置号的版本模块，install后面可不带模块名)</p>
<h4 id="安装到开发环境依赖"><a href="#安装到开发环境依赖" class="headerlink" title="安装到开发环境依赖"></a>安装到开发环境依赖</h4><p><code>npm install moduleName --save-dev</code><br>(例如一些预编译包，如sass-loader,less-loader等，仅在开发环境中会用到)</p>
<h4 id="安装到生成环境依赖"><a href="#安装到生成环境依赖" class="headerlink" title="安装到生成环境依赖"></a>安装到生成环境依赖</h4><p><code>npm install moduleName --save</code></p>
<h4 id="卸载模块-uninstall-可简写-un"><a href="#卸载模块-uninstall-可简写-un" class="headerlink" title="卸载模块 (uninstall 可简写 un)"></a>卸载模块 (uninstall 可简写 un)</h4><p><code>npm uninstall moduleName</code></p>
<h4 id="重新安装模块"><a href="#重新安装模块" class="headerlink" title="重新安装模块"></a>重新安装模块</h4><p><code>npm rebuild moduleName</code></p>
<h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><p><code>npm help</code></p>
<h4 id="检查模块是否已经过时"><a href="#检查模块是否已经过时" class="headerlink" title="检查模块是否已经过时"></a>检查模块是否已经过时</h4><p><code>npm outdated</code><br>（列出所有有新版本的模块，方便对包的更新）</p>
<h4 id="检查npm线上是否存在该模块"><a href="#检查npm线上是否存在该模块" class="headerlink" title="检查npm线上是否存在该模块"></a>检查npm线上是否存在该模块</h4><p><code>npm search moduleName</code><br>（当你想要发布自己写的包时，需查看线上是否有同名的已发布的包）</p>
<h4 id="查看当前目录模块的安装路径"><a href="#查看当前目录模块的安装路径" class="headerlink" title="查看当前目录模块的安装路径"></a>查看当前目录模块的安装路径</h4><p><code>npm root</code></p>
<h4 id="查看全局安装模块的安装路径"><a href="#查看全局安装模块的安装路径" class="headerlink" title="查看全局安装模块的安装路径"></a>查看全局安装模块的安装路径</h4><p><code>npm root -g</code></p>
<h4 id="查看npm安装的版本"><a href="#查看npm安装的版本" class="headerlink" title="查看npm安装的版本"></a>查看npm安装的版本</h4><p><code>npm -v</code></p>
<h4 id="更新本机npm的版本"><a href="#更新本机npm的版本" class="headerlink" title="更新本机npm的版本"></a>更新本机npm的版本</h4><p><code>npm install -g</code></p>
<p>更多npm命令请查看<a href="https://docs.npmjs.com/" target="_blank" rel="external">NPM官方文档</a></p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[preventDefault,stopPropagation,return false三者的区别]]></title>
      <url>/2017/08/31/preventDefault-stopPropagation-return-false%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>逛帖子的时候看到道友发的前端面试题，</p>
<blockquote>
<p>preventDefault(), stopPropagation(), return false三者的区别</p>
</blockquote>
<p>这三者的使用想必大家并不陌生，但是细想之下还是有可究之处。</p>
<h3 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault()"></a>preventDefault()</h3><p>阻止元素在浏览器中的默认行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a id=&quot;link&quot; href=&quot;http://wuliv.com&quot;&gt;网站&lt;/a&gt;</div><div class="line">$(&apos;#link&apos;).click(function(event)&#123;</div><div class="line">    event.preventDefault(); // 阻止了a链接href的访问或跳转</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="stopPropagation"><a href="#stopPropagation" class="headerlink" title="stopPropagation()"></a>stopPropagation()</h3><p>事件冒泡：当一个元素上的事件被触发时，比如鼠标点击了一个按钮，同样的事件将会在该按钮元素的所有父级／祖先元素上触发。这一个过程就被称为事件冒泡。它是由子级元素先触发，父级元素后触发，由内而外（由下往上）的一个流程。与之顺序相反的是事件捕获。  </p>
<blockquote>
<p>事件捕获：父级元素先触发，子级元素后触发，在此仅做了解。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;inner&quot;&gt;</div><div class="line">    &lt;p&gt;事件冒泡例子&lt;/p&gt;</div><div class="line">    &lt;button id=&quot;btn&quot;&gt;我要弹个框&lt;/button&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">$(&apos;#btn&apos;).click(function(event)&#123;</div><div class="line">  event.stopPropagation(); // 阻止了事件冒泡，不会触发&quot;#inner, body&quot;的点击事件  </div><div class="line">  console.log(&apos;#btn&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;#inner&apos;).click(function(event)&#123;</div><div class="line">    // #btn 阻止了冒泡，这里不会执行</div><div class="line">    // 如果不使用stopPropagation, 当#btn点击时，这里也会执行</div><div class="line">    console.log(&apos;#inner&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;body&apos;).click(function(event)&#123;</div><div class="line">    // #btn 阻止了冒泡，.btn点击不会影响到我</div><div class="line">    // 如果不使用stopPropagation, 当#btn点击时，这里也会执行</div><div class="line">    console.log(&apos;body&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 使用了stopPropagation()输出</div><div class="line">&apos;#btn&apos;</div><div class="line"></div><div class="line">// 不使用stopPropagation()输出</div><div class="line">&apos;#btn&apos;</div><div class="line">&apos;#inner&apos;</div><div class="line">&apos;body&apos;</div></pre></td></tr></table></figure>
<h3 id="stopImmediatePropagation"><a href="#stopImmediatePropagation" class="headerlink" title="stopImmediatePropagation()"></a>stopImmediatePropagation()</h3><p>阻止对象绑定的剩余的事件处理函数方法的执行，并阻止当前事件的冒泡。<br>可以理解为stopImmediatePropagation是stopPropagation的升级版，除了阻止冒泡，还能阻止结束掉当前对象未执行的其它绑定事件方法。  </p>
<blockquote>
<p>jQuery中一个对象可以绑定多个事件方法，执行顺序会按照绑定的先后顺序来执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;inner&quot;&gt;</div><div class="line">        &lt;p&gt;stopImmediatePropagation()例子&lt;/p&gt;</div><div class="line">        &lt;button id=&quot;btn&quot;&gt;按钮&lt;/btn&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">$(&apos;body&apos;).click(function(event)&#123;</div><div class="line">    // body 点击</div><div class="line">    console.log(&apos;body&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(&apos;#inner&apos;).click(function(event)&#123;</div><div class="line">    // #inner 点击</div><div class="line">    console.log(&apos;#inner&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;#btn&apos;).click(function(event)&#123;</div><div class="line">    // 第一个#btn点击</div><div class="line">    e.stopImmediatePropagation();</div><div class="line">    console.log(&apos;#btn 1&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(&apos;#btn&apos;).click(function(event)&#123;</div><div class="line">    // 第二个#btn点击</div><div class="line">    console.log(&apos;#btn 2&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 最终输出</div><div class="line">&apos;#btn 1&apos; // (因为stopImmediatePropagation阻止了#btn绑定的剩余未执行的事件方法，并且阻止了冒泡)</div><div class="line"></div><div class="line">// 如果不使用stopImmediatePropagation， 将输出</div><div class="line">&apos;#btn 1&apos;</div><div class="line">&apos;#btn 2&apos;</div><div class="line">&apos;#inner&apos;</div><div class="line">&apos;body&apos;</div><div class="line">同个对象执行顺序按绑定顺序执行，冒泡则由内向外执行</div></pre></td></tr></table></figure>
<h3 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h3><p>“return false” 相信不少同学会用来阻止元素在浏览器中的默认行为，<br>拿它当preventDefault()使用，但其实“return false”做的事情不仅仅只是阻止默认行为</p>
<p>当调用“return false”时，它执行了以下三件事情</p>
<blockquote>
<ol>
<li>event.preventDefault()</li>
<li>event.stopPropagation()</li>
<li>停止回调函数执行并立即返回</li>
</ol>
</blockquote>
<p>1，2点还好理解，那么第3点是怎么回事？<br>return语句会终止函数的执行并返回函数的值。所以不管是否返回false或是其它值，return语句后面的代码都不会执行。而返回false，使它具备了preventDefault和stropPropagation的功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&apos;a&apos;).click(function()&#123;</div><div class="line">    return false; // return false直接返回了，并不会执行alert</div><div class="line">    alert(&apos;我没有被弹出来&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// preventDefault 和 stopPropagation 并不会阻止回调函数的执行</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很多jQuery教程在代码演示中用“return false”来阻止执行浏览器的默认行为。<br>久而久之，很多同学习惯滥用“return false”来代替preventDefault</p>
<p>大多数情况下，我们仅仅是想要它执行跟preventDefault的功能而已，但它却自作主张地帮你执行了另外两步操作。<br>比较好的编程习惯是，需要用到该事件方法再去调用，否则应该避免冗余事件的执行。<br>就像prevnetDefault完成它该有的工作，并不会阻止父节点继续处理事件，使得代码更加灵活，更易于维护。</p>
<p>日常开发中还是要慎用“return false”，除非你同时需要preventDefault和stopPropagation，并且确定你的回调函数执行完成后调用，那么你可以使用“return false”，否则还是用preventDefault 或 stopPropagation 更好些。</p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
<p>参考文章：<a href="http://www.cnblogs.com/dannyxie/p/5642727.html" target="_blank" rel="external">《preventDefault()、stopPropagation()、return false 之间的区别》</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP中GET与POST的区别 99%的错误认识]]></title>
      <url>/2017/08/27/HTTP%E4%B8%ADGET%E4%B8%8EPOST%E7%9A%84%E5%8C%BA%E5%88%AB-99-%E7%9A%84%E9%94%99%E8%AF%AF%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>本篇文章分两部分，第一部分可以列为初为新人的装逼失败模式，第二部分列为修炼低调模式。<br>装逼失败模式：99%的人对GET和POST的认识<br>修炼低调模式：1%不知道的进阶认识</p>
<p>GET和POST，在我们日常WEB开发中，是最常用的数据传输方式。面试中我们也经常会遇到。<br>一般我们在浏览器输入一个网址URL访问网站都是GET方式请求；<br>在HTML FROM表单中，可以通过设置method指定提交方式为GET或者POST方式，默认为GET提交方式</p>
<p>HTTP定义了与服务器交互的不同方法，其中最基本的四种：GET，POST，PUT，DELETE，HEAD；<br>其中GET和HEAD被称为安全方法，因为使用GET和HEAD的HTTP请求不会产生什么动作。不会产生动作意味着GET和HEAD的HTTP请求不会在服务器上产生任何结果。但是安全方法并不是什么动作都不产生，这里的安全方法仅指不会修改信息。</p>
<p>GET和POST我们比较常用，其它几种实际应用比较少用到，在此仅作了解。</p>
<hr>
<h3 id="99-的人所认为的GET和POST"><a href="#99-的人所认为的GET和POST" class="headerlink" title="99%的人所认为的GET和POST"></a>99%的人所认为的GET和POST</h3><h4 id="1-传输方式（自我理解“显示方式”）"><a href="#1-传输方式（自我理解“显示方式”）" class="headerlink" title="1. 传输方式（自我理解“显示方式”）"></a>1. 传输方式（自我理解“显示方式”）</h4><p>GET请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数之间以&amp;连接，<br>如<code>&quot;http://www.xxx.com/product?type=shoe&amp;price=100&amp;sex=male&quot;</code><br>数据格式有以下注意点：</p>
<ol>
<li>如果数据是英文字母/数字，原样发送；</li>
<li>如果是空格，转换为+；</li>
<li>如果是中文或其他字符，则把数据用Base64加密，<br>如<code>&quot;%E4%BD%A0%E5%A5%BD&quot;</code>其中<code>％XX</code>中的<code>XX</code>为该符号以16进制表示的ASCII码。</li>
</ol>
<p>POST请求会把请求的数据放置在HTTP请求包的包体中，GET传输的数据会直接暴露在URL中，而POST请求则不会。</p>
<h4 id="2-传输数据大小"><a href="#2-传输数据大小" class="headerlink" title="2. 传输数据大小"></a>2. 传输数据大小</h4><p>GET方式传输的数据最多只能是1024字节，<br>因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系，URL本身不存在参数上限的问题，HTTP协议规范也没有对URL长度进行限制。<br>这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p>
<p><em>注意：限制是针对整个URL长度，不单是传输的数据长度。</em></p>
<p>POST方式理论上没有限制，可传较大的数据。起限制作用的是服务器的处理程序的处理能力。Apache, Nigx, IIS服务器自身可配置限制传输大小。</p>
<h4 id="3-GET在浏览器回退是无害的，而POST会再次提交请求"><a href="#3-GET在浏览器回退是无害的，而POST会再次提交请求" class="headerlink" title="3. GET在浏览器回退是无害的，而POST会再次提交请求"></a>3. GET在浏览器回退是无害的，而POST会再次提交请求</h4><h4 id="4-GET产生的URL可以作为标签或存于历史记录中，而POST不可以"><a href="#4-GET产生的URL可以作为标签或存于历史记录中，而POST不可以" class="headerlink" title="4. GET产生的URL可以作为标签或存于历史记录中，而POST不可以"></a>4. GET产生的URL可以作为标签或存于历史记录中，而POST不可以</h4><h4 id="5-GET请求会被浏览器主动cahe，而POST不会，除非手动设置"><a href="#5-GET请求会被浏览器主动cahe，而POST不会，除非手动设置" class="headerlink" title="5. GET请求会被浏览器主动cahe，而POST不会，除非手动设置"></a>5. GET请求会被浏览器主动cahe，而POST不会，除非手动设置</h4><h4 id="6-安全性"><a href="#6-安全性" class="headerlink" title="6. 安全性"></a>6. 安全性</h4><p>GET传输的数据直接暴露在URL中，如果我们在做用户登录时，需要传输登录帐号及密码到后端做验证，如果用GET方式，那么账户密码直接暴露在URL里面，是极其危险的。<br>而且浏览器缓存的机制，访问过的网站URL会被保存在浏览器历史记录里，其他人可通过历史记录查看访问网站URL，直接获取到传输的数据。<br>很可能受到 “Cross-site request forgery”(中文名称：跨站请求伪造) 攻击。<br>不过POST的数据也是可以被拦截的。</p>
<p>总结：</p>
<ol>
<li>GET请求是用来向服务器发送索取数据的一种请求，实际应用中数据不涉及到安全性，可用GET方式来向后端请求数据，<br>如分页或搜索关键词 <code>&quot;http://www.xxx.com/product?keywords=xxx&amp;page=2&quot;</code>;</li>
<li>POST请求是向服务器提交数据的一种请求，涉及到安全性的数据，用POST的方式来传输较GET更安全。</li>
</ol>
<hr>
<p>曾经的曾经，我也是那99%的一员，还把自己归纳的文章发给新人同事看，然后装逼失败，被老大引导练成最后的这1%。</p>
<hr>
<h3 id="1-的人所拥有的"><a href="#1-的人所拥有的" class="headerlink" title="1%的人所拥有的"></a>1%的人所拥有的</h3><p>GET和POST本质上是没有区别的，它们是HTTP协议中的两种发送请求的方式。<br>HTTP是基于TCP/IP的关于数据如何在万维网中通信的协议，即HTTP的底层是TCP/IP，所以GET和POST的底层也是TCP/IP，也就是说：GET/POST都是TCP链接。<br>给POST带上url参数，给GET加上request body，技术上是可以实现的。</p>
<p>为了更方便的管理，避免混乱，HTTP给这些请求定义GET，POST，PUT，DELETE。<br>而数据大小，则是因为浏览器的限制造成的。</p>
<p>所以GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同</p>
<h4 id="隐藏的Buff"><a href="#隐藏的Buff" class="headerlink" title="隐藏的Buff"></a>隐藏的Buff</h4><p>GET产生一个TCP数据包，而POST产生两个TCP数据包</p>
<p>GET的请求，浏览器会把http header和data一并发送出去，服务器返回200（返回数据）<br>POST的请求，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200（返回数据）</p>
<p>因为POST需要两步，时间上消耗的多一点，<br>不过网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。<br>网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点</p>
<p>并不是所有浏览器POST发送两次包，Fiefox就发送一次。</p>
<p>最后的最后，当你以后被别人问到的时候，你就可以。。。。。。请开始你的表演</p>
<blockquote>
<p>作者：以乐之名<br>本文原创，有不当的地方欢迎指出。转载请指明出处。</p>
</blockquote>
<p>参考文章：<a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="external">《99%的人都理解错了HTTP中GET与POST的区别》</a></p>
]]></content>
      
        <categories>
            
            <category> HTTP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
